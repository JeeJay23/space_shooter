
space_shooter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000055a8  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f0  08005668  08005668  00015668  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005758  08005758  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08005758  08005758  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005758  08005758  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005758  08005758  00015758  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800575c  0800575c  0001575c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08005760  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000188  20000070  080057d0  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001f8  080057d0  000201f8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e125  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001dce  00000000  00000000  0002e1bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000cd0  00000000  00000000  0002ff90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c08  00000000  00000000  00030c60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00011009  00000000  00000000  00031868  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f515  00000000  00000000  00042871  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000682ab  00000000  00000000  00051d86  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ba031  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000032d4  00000000  00000000  000ba084  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000070 	.word	0x20000070
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08005650 	.word	0x08005650

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000074 	.word	0x20000074
 8000104:	08005650 	.word	0x08005650

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_shi>:
 8000118:	b403      	push	{r0, r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0040      	lsls	r0, r0, #1
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	5e09      	ldrsh	r1, [r1, r0]
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	448e      	add	lr, r1
 8000128:	bc03      	pop	{r0, r1}
 800012a:	4770      	bx	lr

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	; 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f806 	bl	8000240 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			; (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__aeabi_idiv0>:
 8000240:	4770      	bx	lr
 8000242:	46c0      	nop			; (mov r8, r8)

08000244 <__aeabi_dadd>:
 8000244:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000246:	464f      	mov	r7, r9
 8000248:	4646      	mov	r6, r8
 800024a:	46d6      	mov	lr, sl
 800024c:	000d      	movs	r5, r1
 800024e:	0004      	movs	r4, r0
 8000250:	b5c0      	push	{r6, r7, lr}
 8000252:	001f      	movs	r7, r3
 8000254:	0011      	movs	r1, r2
 8000256:	0328      	lsls	r0, r5, #12
 8000258:	0f62      	lsrs	r2, r4, #29
 800025a:	0a40      	lsrs	r0, r0, #9
 800025c:	4310      	orrs	r0, r2
 800025e:	007a      	lsls	r2, r7, #1
 8000260:	0d52      	lsrs	r2, r2, #21
 8000262:	00e3      	lsls	r3, r4, #3
 8000264:	033c      	lsls	r4, r7, #12
 8000266:	4691      	mov	r9, r2
 8000268:	0a64      	lsrs	r4, r4, #9
 800026a:	0ffa      	lsrs	r2, r7, #31
 800026c:	0f4f      	lsrs	r7, r1, #29
 800026e:	006e      	lsls	r6, r5, #1
 8000270:	4327      	orrs	r7, r4
 8000272:	4692      	mov	sl, r2
 8000274:	46b8      	mov	r8, r7
 8000276:	0d76      	lsrs	r6, r6, #21
 8000278:	0fed      	lsrs	r5, r5, #31
 800027a:	00c9      	lsls	r1, r1, #3
 800027c:	4295      	cmp	r5, r2
 800027e:	d100      	bne.n	8000282 <__aeabi_dadd+0x3e>
 8000280:	e099      	b.n	80003b6 <__aeabi_dadd+0x172>
 8000282:	464c      	mov	r4, r9
 8000284:	1b34      	subs	r4, r6, r4
 8000286:	46a4      	mov	ip, r4
 8000288:	2c00      	cmp	r4, #0
 800028a:	dc00      	bgt.n	800028e <__aeabi_dadd+0x4a>
 800028c:	e07c      	b.n	8000388 <__aeabi_dadd+0x144>
 800028e:	464a      	mov	r2, r9
 8000290:	2a00      	cmp	r2, #0
 8000292:	d100      	bne.n	8000296 <__aeabi_dadd+0x52>
 8000294:	e0b8      	b.n	8000408 <__aeabi_dadd+0x1c4>
 8000296:	4ac5      	ldr	r2, [pc, #788]	; (80005ac <__aeabi_dadd+0x368>)
 8000298:	4296      	cmp	r6, r2
 800029a:	d100      	bne.n	800029e <__aeabi_dadd+0x5a>
 800029c:	e11c      	b.n	80004d8 <__aeabi_dadd+0x294>
 800029e:	2280      	movs	r2, #128	; 0x80
 80002a0:	003c      	movs	r4, r7
 80002a2:	0412      	lsls	r2, r2, #16
 80002a4:	4314      	orrs	r4, r2
 80002a6:	46a0      	mov	r8, r4
 80002a8:	4662      	mov	r2, ip
 80002aa:	2a38      	cmp	r2, #56	; 0x38
 80002ac:	dd00      	ble.n	80002b0 <__aeabi_dadd+0x6c>
 80002ae:	e161      	b.n	8000574 <__aeabi_dadd+0x330>
 80002b0:	2a1f      	cmp	r2, #31
 80002b2:	dd00      	ble.n	80002b6 <__aeabi_dadd+0x72>
 80002b4:	e1cc      	b.n	8000650 <__aeabi_dadd+0x40c>
 80002b6:	4664      	mov	r4, ip
 80002b8:	2220      	movs	r2, #32
 80002ba:	1b12      	subs	r2, r2, r4
 80002bc:	4644      	mov	r4, r8
 80002be:	4094      	lsls	r4, r2
 80002c0:	000f      	movs	r7, r1
 80002c2:	46a1      	mov	r9, r4
 80002c4:	4664      	mov	r4, ip
 80002c6:	4091      	lsls	r1, r2
 80002c8:	40e7      	lsrs	r7, r4
 80002ca:	464c      	mov	r4, r9
 80002cc:	1e4a      	subs	r2, r1, #1
 80002ce:	4191      	sbcs	r1, r2
 80002d0:	433c      	orrs	r4, r7
 80002d2:	4642      	mov	r2, r8
 80002d4:	4321      	orrs	r1, r4
 80002d6:	4664      	mov	r4, ip
 80002d8:	40e2      	lsrs	r2, r4
 80002da:	1a80      	subs	r0, r0, r2
 80002dc:	1a5c      	subs	r4, r3, r1
 80002de:	42a3      	cmp	r3, r4
 80002e0:	419b      	sbcs	r3, r3
 80002e2:	425f      	negs	r7, r3
 80002e4:	1bc7      	subs	r7, r0, r7
 80002e6:	023b      	lsls	r3, r7, #8
 80002e8:	d400      	bmi.n	80002ec <__aeabi_dadd+0xa8>
 80002ea:	e0d0      	b.n	800048e <__aeabi_dadd+0x24a>
 80002ec:	027f      	lsls	r7, r7, #9
 80002ee:	0a7f      	lsrs	r7, r7, #9
 80002f0:	2f00      	cmp	r7, #0
 80002f2:	d100      	bne.n	80002f6 <__aeabi_dadd+0xb2>
 80002f4:	e0ff      	b.n	80004f6 <__aeabi_dadd+0x2b2>
 80002f6:	0038      	movs	r0, r7
 80002f8:	f001 f8a8 	bl	800144c <__clzsi2>
 80002fc:	0001      	movs	r1, r0
 80002fe:	3908      	subs	r1, #8
 8000300:	2320      	movs	r3, #32
 8000302:	0022      	movs	r2, r4
 8000304:	1a5b      	subs	r3, r3, r1
 8000306:	408f      	lsls	r7, r1
 8000308:	40da      	lsrs	r2, r3
 800030a:	408c      	lsls	r4, r1
 800030c:	4317      	orrs	r7, r2
 800030e:	42b1      	cmp	r1, r6
 8000310:	da00      	bge.n	8000314 <__aeabi_dadd+0xd0>
 8000312:	e0ff      	b.n	8000514 <__aeabi_dadd+0x2d0>
 8000314:	1b89      	subs	r1, r1, r6
 8000316:	1c4b      	adds	r3, r1, #1
 8000318:	2b1f      	cmp	r3, #31
 800031a:	dd00      	ble.n	800031e <__aeabi_dadd+0xda>
 800031c:	e0a8      	b.n	8000470 <__aeabi_dadd+0x22c>
 800031e:	2220      	movs	r2, #32
 8000320:	0039      	movs	r1, r7
 8000322:	1ad2      	subs	r2, r2, r3
 8000324:	0020      	movs	r0, r4
 8000326:	4094      	lsls	r4, r2
 8000328:	4091      	lsls	r1, r2
 800032a:	40d8      	lsrs	r0, r3
 800032c:	1e62      	subs	r2, r4, #1
 800032e:	4194      	sbcs	r4, r2
 8000330:	40df      	lsrs	r7, r3
 8000332:	2600      	movs	r6, #0
 8000334:	4301      	orrs	r1, r0
 8000336:	430c      	orrs	r4, r1
 8000338:	0763      	lsls	r3, r4, #29
 800033a:	d009      	beq.n	8000350 <__aeabi_dadd+0x10c>
 800033c:	230f      	movs	r3, #15
 800033e:	4023      	ands	r3, r4
 8000340:	2b04      	cmp	r3, #4
 8000342:	d005      	beq.n	8000350 <__aeabi_dadd+0x10c>
 8000344:	1d23      	adds	r3, r4, #4
 8000346:	42a3      	cmp	r3, r4
 8000348:	41a4      	sbcs	r4, r4
 800034a:	4264      	negs	r4, r4
 800034c:	193f      	adds	r7, r7, r4
 800034e:	001c      	movs	r4, r3
 8000350:	023b      	lsls	r3, r7, #8
 8000352:	d400      	bmi.n	8000356 <__aeabi_dadd+0x112>
 8000354:	e09e      	b.n	8000494 <__aeabi_dadd+0x250>
 8000356:	4b95      	ldr	r3, [pc, #596]	; (80005ac <__aeabi_dadd+0x368>)
 8000358:	3601      	adds	r6, #1
 800035a:	429e      	cmp	r6, r3
 800035c:	d100      	bne.n	8000360 <__aeabi_dadd+0x11c>
 800035e:	e0b7      	b.n	80004d0 <__aeabi_dadd+0x28c>
 8000360:	4a93      	ldr	r2, [pc, #588]	; (80005b0 <__aeabi_dadd+0x36c>)
 8000362:	08e4      	lsrs	r4, r4, #3
 8000364:	4017      	ands	r7, r2
 8000366:	077b      	lsls	r3, r7, #29
 8000368:	0571      	lsls	r1, r6, #21
 800036a:	027f      	lsls	r7, r7, #9
 800036c:	4323      	orrs	r3, r4
 800036e:	0b3f      	lsrs	r7, r7, #12
 8000370:	0d4a      	lsrs	r2, r1, #21
 8000372:	0512      	lsls	r2, r2, #20
 8000374:	433a      	orrs	r2, r7
 8000376:	07ed      	lsls	r5, r5, #31
 8000378:	432a      	orrs	r2, r5
 800037a:	0018      	movs	r0, r3
 800037c:	0011      	movs	r1, r2
 800037e:	bce0      	pop	{r5, r6, r7}
 8000380:	46ba      	mov	sl, r7
 8000382:	46b1      	mov	r9, r6
 8000384:	46a8      	mov	r8, r5
 8000386:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000388:	2c00      	cmp	r4, #0
 800038a:	d04b      	beq.n	8000424 <__aeabi_dadd+0x1e0>
 800038c:	464c      	mov	r4, r9
 800038e:	1ba4      	subs	r4, r4, r6
 8000390:	46a4      	mov	ip, r4
 8000392:	2e00      	cmp	r6, #0
 8000394:	d000      	beq.n	8000398 <__aeabi_dadd+0x154>
 8000396:	e123      	b.n	80005e0 <__aeabi_dadd+0x39c>
 8000398:	0004      	movs	r4, r0
 800039a:	431c      	orrs	r4, r3
 800039c:	d100      	bne.n	80003a0 <__aeabi_dadd+0x15c>
 800039e:	e1af      	b.n	8000700 <__aeabi_dadd+0x4bc>
 80003a0:	4662      	mov	r2, ip
 80003a2:	1e54      	subs	r4, r2, #1
 80003a4:	2a01      	cmp	r2, #1
 80003a6:	d100      	bne.n	80003aa <__aeabi_dadd+0x166>
 80003a8:	e215      	b.n	80007d6 <__aeabi_dadd+0x592>
 80003aa:	4d80      	ldr	r5, [pc, #512]	; (80005ac <__aeabi_dadd+0x368>)
 80003ac:	45ac      	cmp	ip, r5
 80003ae:	d100      	bne.n	80003b2 <__aeabi_dadd+0x16e>
 80003b0:	e1c8      	b.n	8000744 <__aeabi_dadd+0x500>
 80003b2:	46a4      	mov	ip, r4
 80003b4:	e11b      	b.n	80005ee <__aeabi_dadd+0x3aa>
 80003b6:	464a      	mov	r2, r9
 80003b8:	1ab2      	subs	r2, r6, r2
 80003ba:	4694      	mov	ip, r2
 80003bc:	2a00      	cmp	r2, #0
 80003be:	dc00      	bgt.n	80003c2 <__aeabi_dadd+0x17e>
 80003c0:	e0ac      	b.n	800051c <__aeabi_dadd+0x2d8>
 80003c2:	464a      	mov	r2, r9
 80003c4:	2a00      	cmp	r2, #0
 80003c6:	d043      	beq.n	8000450 <__aeabi_dadd+0x20c>
 80003c8:	4a78      	ldr	r2, [pc, #480]	; (80005ac <__aeabi_dadd+0x368>)
 80003ca:	4296      	cmp	r6, r2
 80003cc:	d100      	bne.n	80003d0 <__aeabi_dadd+0x18c>
 80003ce:	e1af      	b.n	8000730 <__aeabi_dadd+0x4ec>
 80003d0:	2280      	movs	r2, #128	; 0x80
 80003d2:	003c      	movs	r4, r7
 80003d4:	0412      	lsls	r2, r2, #16
 80003d6:	4314      	orrs	r4, r2
 80003d8:	46a0      	mov	r8, r4
 80003da:	4662      	mov	r2, ip
 80003dc:	2a38      	cmp	r2, #56	; 0x38
 80003de:	dc67      	bgt.n	80004b0 <__aeabi_dadd+0x26c>
 80003e0:	2a1f      	cmp	r2, #31
 80003e2:	dc00      	bgt.n	80003e6 <__aeabi_dadd+0x1a2>
 80003e4:	e15f      	b.n	80006a6 <__aeabi_dadd+0x462>
 80003e6:	4647      	mov	r7, r8
 80003e8:	3a20      	subs	r2, #32
 80003ea:	40d7      	lsrs	r7, r2
 80003ec:	4662      	mov	r2, ip
 80003ee:	2a20      	cmp	r2, #32
 80003f0:	d005      	beq.n	80003fe <__aeabi_dadd+0x1ba>
 80003f2:	4664      	mov	r4, ip
 80003f4:	2240      	movs	r2, #64	; 0x40
 80003f6:	1b12      	subs	r2, r2, r4
 80003f8:	4644      	mov	r4, r8
 80003fa:	4094      	lsls	r4, r2
 80003fc:	4321      	orrs	r1, r4
 80003fe:	1e4a      	subs	r2, r1, #1
 8000400:	4191      	sbcs	r1, r2
 8000402:	000c      	movs	r4, r1
 8000404:	433c      	orrs	r4, r7
 8000406:	e057      	b.n	80004b8 <__aeabi_dadd+0x274>
 8000408:	003a      	movs	r2, r7
 800040a:	430a      	orrs	r2, r1
 800040c:	d100      	bne.n	8000410 <__aeabi_dadd+0x1cc>
 800040e:	e105      	b.n	800061c <__aeabi_dadd+0x3d8>
 8000410:	0022      	movs	r2, r4
 8000412:	3a01      	subs	r2, #1
 8000414:	2c01      	cmp	r4, #1
 8000416:	d100      	bne.n	800041a <__aeabi_dadd+0x1d6>
 8000418:	e182      	b.n	8000720 <__aeabi_dadd+0x4dc>
 800041a:	4c64      	ldr	r4, [pc, #400]	; (80005ac <__aeabi_dadd+0x368>)
 800041c:	45a4      	cmp	ip, r4
 800041e:	d05b      	beq.n	80004d8 <__aeabi_dadd+0x294>
 8000420:	4694      	mov	ip, r2
 8000422:	e741      	b.n	80002a8 <__aeabi_dadd+0x64>
 8000424:	4c63      	ldr	r4, [pc, #396]	; (80005b4 <__aeabi_dadd+0x370>)
 8000426:	1c77      	adds	r7, r6, #1
 8000428:	4227      	tst	r7, r4
 800042a:	d000      	beq.n	800042e <__aeabi_dadd+0x1ea>
 800042c:	e0c4      	b.n	80005b8 <__aeabi_dadd+0x374>
 800042e:	0004      	movs	r4, r0
 8000430:	431c      	orrs	r4, r3
 8000432:	2e00      	cmp	r6, #0
 8000434:	d000      	beq.n	8000438 <__aeabi_dadd+0x1f4>
 8000436:	e169      	b.n	800070c <__aeabi_dadd+0x4c8>
 8000438:	2c00      	cmp	r4, #0
 800043a:	d100      	bne.n	800043e <__aeabi_dadd+0x1fa>
 800043c:	e1bf      	b.n	80007be <__aeabi_dadd+0x57a>
 800043e:	4644      	mov	r4, r8
 8000440:	430c      	orrs	r4, r1
 8000442:	d000      	beq.n	8000446 <__aeabi_dadd+0x202>
 8000444:	e1d0      	b.n	80007e8 <__aeabi_dadd+0x5a4>
 8000446:	0742      	lsls	r2, r0, #29
 8000448:	08db      	lsrs	r3, r3, #3
 800044a:	4313      	orrs	r3, r2
 800044c:	08c0      	lsrs	r0, r0, #3
 800044e:	e029      	b.n	80004a4 <__aeabi_dadd+0x260>
 8000450:	003a      	movs	r2, r7
 8000452:	430a      	orrs	r2, r1
 8000454:	d100      	bne.n	8000458 <__aeabi_dadd+0x214>
 8000456:	e170      	b.n	800073a <__aeabi_dadd+0x4f6>
 8000458:	4662      	mov	r2, ip
 800045a:	4664      	mov	r4, ip
 800045c:	3a01      	subs	r2, #1
 800045e:	2c01      	cmp	r4, #1
 8000460:	d100      	bne.n	8000464 <__aeabi_dadd+0x220>
 8000462:	e0e0      	b.n	8000626 <__aeabi_dadd+0x3e2>
 8000464:	4c51      	ldr	r4, [pc, #324]	; (80005ac <__aeabi_dadd+0x368>)
 8000466:	45a4      	cmp	ip, r4
 8000468:	d100      	bne.n	800046c <__aeabi_dadd+0x228>
 800046a:	e161      	b.n	8000730 <__aeabi_dadd+0x4ec>
 800046c:	4694      	mov	ip, r2
 800046e:	e7b4      	b.n	80003da <__aeabi_dadd+0x196>
 8000470:	003a      	movs	r2, r7
 8000472:	391f      	subs	r1, #31
 8000474:	40ca      	lsrs	r2, r1
 8000476:	0011      	movs	r1, r2
 8000478:	2b20      	cmp	r3, #32
 800047a:	d003      	beq.n	8000484 <__aeabi_dadd+0x240>
 800047c:	2240      	movs	r2, #64	; 0x40
 800047e:	1ad3      	subs	r3, r2, r3
 8000480:	409f      	lsls	r7, r3
 8000482:	433c      	orrs	r4, r7
 8000484:	1e63      	subs	r3, r4, #1
 8000486:	419c      	sbcs	r4, r3
 8000488:	2700      	movs	r7, #0
 800048a:	2600      	movs	r6, #0
 800048c:	430c      	orrs	r4, r1
 800048e:	0763      	lsls	r3, r4, #29
 8000490:	d000      	beq.n	8000494 <__aeabi_dadd+0x250>
 8000492:	e753      	b.n	800033c <__aeabi_dadd+0xf8>
 8000494:	46b4      	mov	ip, r6
 8000496:	08e4      	lsrs	r4, r4, #3
 8000498:	077b      	lsls	r3, r7, #29
 800049a:	4323      	orrs	r3, r4
 800049c:	08f8      	lsrs	r0, r7, #3
 800049e:	4a43      	ldr	r2, [pc, #268]	; (80005ac <__aeabi_dadd+0x368>)
 80004a0:	4594      	cmp	ip, r2
 80004a2:	d01d      	beq.n	80004e0 <__aeabi_dadd+0x29c>
 80004a4:	4662      	mov	r2, ip
 80004a6:	0307      	lsls	r7, r0, #12
 80004a8:	0552      	lsls	r2, r2, #21
 80004aa:	0b3f      	lsrs	r7, r7, #12
 80004ac:	0d52      	lsrs	r2, r2, #21
 80004ae:	e760      	b.n	8000372 <__aeabi_dadd+0x12e>
 80004b0:	4644      	mov	r4, r8
 80004b2:	430c      	orrs	r4, r1
 80004b4:	1e62      	subs	r2, r4, #1
 80004b6:	4194      	sbcs	r4, r2
 80004b8:	18e4      	adds	r4, r4, r3
 80004ba:	429c      	cmp	r4, r3
 80004bc:	419b      	sbcs	r3, r3
 80004be:	425f      	negs	r7, r3
 80004c0:	183f      	adds	r7, r7, r0
 80004c2:	023b      	lsls	r3, r7, #8
 80004c4:	d5e3      	bpl.n	800048e <__aeabi_dadd+0x24a>
 80004c6:	4b39      	ldr	r3, [pc, #228]	; (80005ac <__aeabi_dadd+0x368>)
 80004c8:	3601      	adds	r6, #1
 80004ca:	429e      	cmp	r6, r3
 80004cc:	d000      	beq.n	80004d0 <__aeabi_dadd+0x28c>
 80004ce:	e0b5      	b.n	800063c <__aeabi_dadd+0x3f8>
 80004d0:	0032      	movs	r2, r6
 80004d2:	2700      	movs	r7, #0
 80004d4:	2300      	movs	r3, #0
 80004d6:	e74c      	b.n	8000372 <__aeabi_dadd+0x12e>
 80004d8:	0742      	lsls	r2, r0, #29
 80004da:	08db      	lsrs	r3, r3, #3
 80004dc:	4313      	orrs	r3, r2
 80004de:	08c0      	lsrs	r0, r0, #3
 80004e0:	001a      	movs	r2, r3
 80004e2:	4302      	orrs	r2, r0
 80004e4:	d100      	bne.n	80004e8 <__aeabi_dadd+0x2a4>
 80004e6:	e1e1      	b.n	80008ac <__aeabi_dadd+0x668>
 80004e8:	2780      	movs	r7, #128	; 0x80
 80004ea:	033f      	lsls	r7, r7, #12
 80004ec:	4307      	orrs	r7, r0
 80004ee:	033f      	lsls	r7, r7, #12
 80004f0:	4a2e      	ldr	r2, [pc, #184]	; (80005ac <__aeabi_dadd+0x368>)
 80004f2:	0b3f      	lsrs	r7, r7, #12
 80004f4:	e73d      	b.n	8000372 <__aeabi_dadd+0x12e>
 80004f6:	0020      	movs	r0, r4
 80004f8:	f000 ffa8 	bl	800144c <__clzsi2>
 80004fc:	0001      	movs	r1, r0
 80004fe:	3118      	adds	r1, #24
 8000500:	291f      	cmp	r1, #31
 8000502:	dc00      	bgt.n	8000506 <__aeabi_dadd+0x2c2>
 8000504:	e6fc      	b.n	8000300 <__aeabi_dadd+0xbc>
 8000506:	3808      	subs	r0, #8
 8000508:	4084      	lsls	r4, r0
 800050a:	0027      	movs	r7, r4
 800050c:	2400      	movs	r4, #0
 800050e:	42b1      	cmp	r1, r6
 8000510:	db00      	blt.n	8000514 <__aeabi_dadd+0x2d0>
 8000512:	e6ff      	b.n	8000314 <__aeabi_dadd+0xd0>
 8000514:	4a26      	ldr	r2, [pc, #152]	; (80005b0 <__aeabi_dadd+0x36c>)
 8000516:	1a76      	subs	r6, r6, r1
 8000518:	4017      	ands	r7, r2
 800051a:	e70d      	b.n	8000338 <__aeabi_dadd+0xf4>
 800051c:	2a00      	cmp	r2, #0
 800051e:	d02f      	beq.n	8000580 <__aeabi_dadd+0x33c>
 8000520:	464a      	mov	r2, r9
 8000522:	1b92      	subs	r2, r2, r6
 8000524:	4694      	mov	ip, r2
 8000526:	2e00      	cmp	r6, #0
 8000528:	d100      	bne.n	800052c <__aeabi_dadd+0x2e8>
 800052a:	e0ad      	b.n	8000688 <__aeabi_dadd+0x444>
 800052c:	4a1f      	ldr	r2, [pc, #124]	; (80005ac <__aeabi_dadd+0x368>)
 800052e:	4591      	cmp	r9, r2
 8000530:	d100      	bne.n	8000534 <__aeabi_dadd+0x2f0>
 8000532:	e10f      	b.n	8000754 <__aeabi_dadd+0x510>
 8000534:	2280      	movs	r2, #128	; 0x80
 8000536:	0412      	lsls	r2, r2, #16
 8000538:	4310      	orrs	r0, r2
 800053a:	4662      	mov	r2, ip
 800053c:	2a38      	cmp	r2, #56	; 0x38
 800053e:	dd00      	ble.n	8000542 <__aeabi_dadd+0x2fe>
 8000540:	e10f      	b.n	8000762 <__aeabi_dadd+0x51e>
 8000542:	2a1f      	cmp	r2, #31
 8000544:	dd00      	ble.n	8000548 <__aeabi_dadd+0x304>
 8000546:	e180      	b.n	800084a <__aeabi_dadd+0x606>
 8000548:	4664      	mov	r4, ip
 800054a:	2220      	movs	r2, #32
 800054c:	001e      	movs	r6, r3
 800054e:	1b12      	subs	r2, r2, r4
 8000550:	4667      	mov	r7, ip
 8000552:	0004      	movs	r4, r0
 8000554:	4093      	lsls	r3, r2
 8000556:	4094      	lsls	r4, r2
 8000558:	40fe      	lsrs	r6, r7
 800055a:	1e5a      	subs	r2, r3, #1
 800055c:	4193      	sbcs	r3, r2
 800055e:	40f8      	lsrs	r0, r7
 8000560:	4334      	orrs	r4, r6
 8000562:	431c      	orrs	r4, r3
 8000564:	4480      	add	r8, r0
 8000566:	1864      	adds	r4, r4, r1
 8000568:	428c      	cmp	r4, r1
 800056a:	41bf      	sbcs	r7, r7
 800056c:	427f      	negs	r7, r7
 800056e:	464e      	mov	r6, r9
 8000570:	4447      	add	r7, r8
 8000572:	e7a6      	b.n	80004c2 <__aeabi_dadd+0x27e>
 8000574:	4642      	mov	r2, r8
 8000576:	430a      	orrs	r2, r1
 8000578:	0011      	movs	r1, r2
 800057a:	1e4a      	subs	r2, r1, #1
 800057c:	4191      	sbcs	r1, r2
 800057e:	e6ad      	b.n	80002dc <__aeabi_dadd+0x98>
 8000580:	4c0c      	ldr	r4, [pc, #48]	; (80005b4 <__aeabi_dadd+0x370>)
 8000582:	1c72      	adds	r2, r6, #1
 8000584:	4222      	tst	r2, r4
 8000586:	d000      	beq.n	800058a <__aeabi_dadd+0x346>
 8000588:	e0a1      	b.n	80006ce <__aeabi_dadd+0x48a>
 800058a:	0002      	movs	r2, r0
 800058c:	431a      	orrs	r2, r3
 800058e:	2e00      	cmp	r6, #0
 8000590:	d000      	beq.n	8000594 <__aeabi_dadd+0x350>
 8000592:	e0fa      	b.n	800078a <__aeabi_dadd+0x546>
 8000594:	2a00      	cmp	r2, #0
 8000596:	d100      	bne.n	800059a <__aeabi_dadd+0x356>
 8000598:	e145      	b.n	8000826 <__aeabi_dadd+0x5e2>
 800059a:	003a      	movs	r2, r7
 800059c:	430a      	orrs	r2, r1
 800059e:	d000      	beq.n	80005a2 <__aeabi_dadd+0x35e>
 80005a0:	e146      	b.n	8000830 <__aeabi_dadd+0x5ec>
 80005a2:	0742      	lsls	r2, r0, #29
 80005a4:	08db      	lsrs	r3, r3, #3
 80005a6:	4313      	orrs	r3, r2
 80005a8:	08c0      	lsrs	r0, r0, #3
 80005aa:	e77b      	b.n	80004a4 <__aeabi_dadd+0x260>
 80005ac:	000007ff 	.word	0x000007ff
 80005b0:	ff7fffff 	.word	0xff7fffff
 80005b4:	000007fe 	.word	0x000007fe
 80005b8:	4647      	mov	r7, r8
 80005ba:	1a5c      	subs	r4, r3, r1
 80005bc:	1bc2      	subs	r2, r0, r7
 80005be:	42a3      	cmp	r3, r4
 80005c0:	41bf      	sbcs	r7, r7
 80005c2:	427f      	negs	r7, r7
 80005c4:	46b9      	mov	r9, r7
 80005c6:	0017      	movs	r7, r2
 80005c8:	464a      	mov	r2, r9
 80005ca:	1abf      	subs	r7, r7, r2
 80005cc:	023a      	lsls	r2, r7, #8
 80005ce:	d500      	bpl.n	80005d2 <__aeabi_dadd+0x38e>
 80005d0:	e08d      	b.n	80006ee <__aeabi_dadd+0x4aa>
 80005d2:	0023      	movs	r3, r4
 80005d4:	433b      	orrs	r3, r7
 80005d6:	d000      	beq.n	80005da <__aeabi_dadd+0x396>
 80005d8:	e68a      	b.n	80002f0 <__aeabi_dadd+0xac>
 80005da:	2000      	movs	r0, #0
 80005dc:	2500      	movs	r5, #0
 80005de:	e761      	b.n	80004a4 <__aeabi_dadd+0x260>
 80005e0:	4cb4      	ldr	r4, [pc, #720]	; (80008b4 <__aeabi_dadd+0x670>)
 80005e2:	45a1      	cmp	r9, r4
 80005e4:	d100      	bne.n	80005e8 <__aeabi_dadd+0x3a4>
 80005e6:	e0ad      	b.n	8000744 <__aeabi_dadd+0x500>
 80005e8:	2480      	movs	r4, #128	; 0x80
 80005ea:	0424      	lsls	r4, r4, #16
 80005ec:	4320      	orrs	r0, r4
 80005ee:	4664      	mov	r4, ip
 80005f0:	2c38      	cmp	r4, #56	; 0x38
 80005f2:	dc3d      	bgt.n	8000670 <__aeabi_dadd+0x42c>
 80005f4:	4662      	mov	r2, ip
 80005f6:	2c1f      	cmp	r4, #31
 80005f8:	dd00      	ble.n	80005fc <__aeabi_dadd+0x3b8>
 80005fa:	e0b7      	b.n	800076c <__aeabi_dadd+0x528>
 80005fc:	2520      	movs	r5, #32
 80005fe:	001e      	movs	r6, r3
 8000600:	1b2d      	subs	r5, r5, r4
 8000602:	0004      	movs	r4, r0
 8000604:	40ab      	lsls	r3, r5
 8000606:	40ac      	lsls	r4, r5
 8000608:	40d6      	lsrs	r6, r2
 800060a:	40d0      	lsrs	r0, r2
 800060c:	4642      	mov	r2, r8
 800060e:	1e5d      	subs	r5, r3, #1
 8000610:	41ab      	sbcs	r3, r5
 8000612:	4334      	orrs	r4, r6
 8000614:	1a12      	subs	r2, r2, r0
 8000616:	4690      	mov	r8, r2
 8000618:	4323      	orrs	r3, r4
 800061a:	e02c      	b.n	8000676 <__aeabi_dadd+0x432>
 800061c:	0742      	lsls	r2, r0, #29
 800061e:	08db      	lsrs	r3, r3, #3
 8000620:	4313      	orrs	r3, r2
 8000622:	08c0      	lsrs	r0, r0, #3
 8000624:	e73b      	b.n	800049e <__aeabi_dadd+0x25a>
 8000626:	185c      	adds	r4, r3, r1
 8000628:	429c      	cmp	r4, r3
 800062a:	419b      	sbcs	r3, r3
 800062c:	4440      	add	r0, r8
 800062e:	425b      	negs	r3, r3
 8000630:	18c7      	adds	r7, r0, r3
 8000632:	2601      	movs	r6, #1
 8000634:	023b      	lsls	r3, r7, #8
 8000636:	d400      	bmi.n	800063a <__aeabi_dadd+0x3f6>
 8000638:	e729      	b.n	800048e <__aeabi_dadd+0x24a>
 800063a:	2602      	movs	r6, #2
 800063c:	4a9e      	ldr	r2, [pc, #632]	; (80008b8 <__aeabi_dadd+0x674>)
 800063e:	0863      	lsrs	r3, r4, #1
 8000640:	4017      	ands	r7, r2
 8000642:	2201      	movs	r2, #1
 8000644:	4014      	ands	r4, r2
 8000646:	431c      	orrs	r4, r3
 8000648:	07fb      	lsls	r3, r7, #31
 800064a:	431c      	orrs	r4, r3
 800064c:	087f      	lsrs	r7, r7, #1
 800064e:	e673      	b.n	8000338 <__aeabi_dadd+0xf4>
 8000650:	4644      	mov	r4, r8
 8000652:	3a20      	subs	r2, #32
 8000654:	40d4      	lsrs	r4, r2
 8000656:	4662      	mov	r2, ip
 8000658:	2a20      	cmp	r2, #32
 800065a:	d005      	beq.n	8000668 <__aeabi_dadd+0x424>
 800065c:	4667      	mov	r7, ip
 800065e:	2240      	movs	r2, #64	; 0x40
 8000660:	1bd2      	subs	r2, r2, r7
 8000662:	4647      	mov	r7, r8
 8000664:	4097      	lsls	r7, r2
 8000666:	4339      	orrs	r1, r7
 8000668:	1e4a      	subs	r2, r1, #1
 800066a:	4191      	sbcs	r1, r2
 800066c:	4321      	orrs	r1, r4
 800066e:	e635      	b.n	80002dc <__aeabi_dadd+0x98>
 8000670:	4303      	orrs	r3, r0
 8000672:	1e58      	subs	r0, r3, #1
 8000674:	4183      	sbcs	r3, r0
 8000676:	1acc      	subs	r4, r1, r3
 8000678:	42a1      	cmp	r1, r4
 800067a:	41bf      	sbcs	r7, r7
 800067c:	4643      	mov	r3, r8
 800067e:	427f      	negs	r7, r7
 8000680:	4655      	mov	r5, sl
 8000682:	464e      	mov	r6, r9
 8000684:	1bdf      	subs	r7, r3, r7
 8000686:	e62e      	b.n	80002e6 <__aeabi_dadd+0xa2>
 8000688:	0002      	movs	r2, r0
 800068a:	431a      	orrs	r2, r3
 800068c:	d100      	bne.n	8000690 <__aeabi_dadd+0x44c>
 800068e:	e0bd      	b.n	800080c <__aeabi_dadd+0x5c8>
 8000690:	4662      	mov	r2, ip
 8000692:	4664      	mov	r4, ip
 8000694:	3a01      	subs	r2, #1
 8000696:	2c01      	cmp	r4, #1
 8000698:	d100      	bne.n	800069c <__aeabi_dadd+0x458>
 800069a:	e0e5      	b.n	8000868 <__aeabi_dadd+0x624>
 800069c:	4c85      	ldr	r4, [pc, #532]	; (80008b4 <__aeabi_dadd+0x670>)
 800069e:	45a4      	cmp	ip, r4
 80006a0:	d058      	beq.n	8000754 <__aeabi_dadd+0x510>
 80006a2:	4694      	mov	ip, r2
 80006a4:	e749      	b.n	800053a <__aeabi_dadd+0x2f6>
 80006a6:	4664      	mov	r4, ip
 80006a8:	2220      	movs	r2, #32
 80006aa:	1b12      	subs	r2, r2, r4
 80006ac:	4644      	mov	r4, r8
 80006ae:	4094      	lsls	r4, r2
 80006b0:	000f      	movs	r7, r1
 80006b2:	46a1      	mov	r9, r4
 80006b4:	4664      	mov	r4, ip
 80006b6:	4091      	lsls	r1, r2
 80006b8:	40e7      	lsrs	r7, r4
 80006ba:	464c      	mov	r4, r9
 80006bc:	1e4a      	subs	r2, r1, #1
 80006be:	4191      	sbcs	r1, r2
 80006c0:	433c      	orrs	r4, r7
 80006c2:	4642      	mov	r2, r8
 80006c4:	430c      	orrs	r4, r1
 80006c6:	4661      	mov	r1, ip
 80006c8:	40ca      	lsrs	r2, r1
 80006ca:	1880      	adds	r0, r0, r2
 80006cc:	e6f4      	b.n	80004b8 <__aeabi_dadd+0x274>
 80006ce:	4c79      	ldr	r4, [pc, #484]	; (80008b4 <__aeabi_dadd+0x670>)
 80006d0:	42a2      	cmp	r2, r4
 80006d2:	d100      	bne.n	80006d6 <__aeabi_dadd+0x492>
 80006d4:	e6fd      	b.n	80004d2 <__aeabi_dadd+0x28e>
 80006d6:	1859      	adds	r1, r3, r1
 80006d8:	4299      	cmp	r1, r3
 80006da:	419b      	sbcs	r3, r3
 80006dc:	4440      	add	r0, r8
 80006de:	425f      	negs	r7, r3
 80006e0:	19c7      	adds	r7, r0, r7
 80006e2:	07fc      	lsls	r4, r7, #31
 80006e4:	0849      	lsrs	r1, r1, #1
 80006e6:	0016      	movs	r6, r2
 80006e8:	430c      	orrs	r4, r1
 80006ea:	087f      	lsrs	r7, r7, #1
 80006ec:	e6cf      	b.n	800048e <__aeabi_dadd+0x24a>
 80006ee:	1acc      	subs	r4, r1, r3
 80006f0:	42a1      	cmp	r1, r4
 80006f2:	41bf      	sbcs	r7, r7
 80006f4:	4643      	mov	r3, r8
 80006f6:	427f      	negs	r7, r7
 80006f8:	1a18      	subs	r0, r3, r0
 80006fa:	4655      	mov	r5, sl
 80006fc:	1bc7      	subs	r7, r0, r7
 80006fe:	e5f7      	b.n	80002f0 <__aeabi_dadd+0xac>
 8000700:	08c9      	lsrs	r1, r1, #3
 8000702:	077b      	lsls	r3, r7, #29
 8000704:	4655      	mov	r5, sl
 8000706:	430b      	orrs	r3, r1
 8000708:	08f8      	lsrs	r0, r7, #3
 800070a:	e6c8      	b.n	800049e <__aeabi_dadd+0x25a>
 800070c:	2c00      	cmp	r4, #0
 800070e:	d000      	beq.n	8000712 <__aeabi_dadd+0x4ce>
 8000710:	e081      	b.n	8000816 <__aeabi_dadd+0x5d2>
 8000712:	4643      	mov	r3, r8
 8000714:	430b      	orrs	r3, r1
 8000716:	d115      	bne.n	8000744 <__aeabi_dadd+0x500>
 8000718:	2080      	movs	r0, #128	; 0x80
 800071a:	2500      	movs	r5, #0
 800071c:	0300      	lsls	r0, r0, #12
 800071e:	e6e3      	b.n	80004e8 <__aeabi_dadd+0x2a4>
 8000720:	1a5c      	subs	r4, r3, r1
 8000722:	42a3      	cmp	r3, r4
 8000724:	419b      	sbcs	r3, r3
 8000726:	1bc7      	subs	r7, r0, r7
 8000728:	425b      	negs	r3, r3
 800072a:	2601      	movs	r6, #1
 800072c:	1aff      	subs	r7, r7, r3
 800072e:	e5da      	b.n	80002e6 <__aeabi_dadd+0xa2>
 8000730:	0742      	lsls	r2, r0, #29
 8000732:	08db      	lsrs	r3, r3, #3
 8000734:	4313      	orrs	r3, r2
 8000736:	08c0      	lsrs	r0, r0, #3
 8000738:	e6d2      	b.n	80004e0 <__aeabi_dadd+0x29c>
 800073a:	0742      	lsls	r2, r0, #29
 800073c:	08db      	lsrs	r3, r3, #3
 800073e:	4313      	orrs	r3, r2
 8000740:	08c0      	lsrs	r0, r0, #3
 8000742:	e6ac      	b.n	800049e <__aeabi_dadd+0x25a>
 8000744:	4643      	mov	r3, r8
 8000746:	4642      	mov	r2, r8
 8000748:	08c9      	lsrs	r1, r1, #3
 800074a:	075b      	lsls	r3, r3, #29
 800074c:	4655      	mov	r5, sl
 800074e:	430b      	orrs	r3, r1
 8000750:	08d0      	lsrs	r0, r2, #3
 8000752:	e6c5      	b.n	80004e0 <__aeabi_dadd+0x29c>
 8000754:	4643      	mov	r3, r8
 8000756:	4642      	mov	r2, r8
 8000758:	075b      	lsls	r3, r3, #29
 800075a:	08c9      	lsrs	r1, r1, #3
 800075c:	430b      	orrs	r3, r1
 800075e:	08d0      	lsrs	r0, r2, #3
 8000760:	e6be      	b.n	80004e0 <__aeabi_dadd+0x29c>
 8000762:	4303      	orrs	r3, r0
 8000764:	001c      	movs	r4, r3
 8000766:	1e63      	subs	r3, r4, #1
 8000768:	419c      	sbcs	r4, r3
 800076a:	e6fc      	b.n	8000566 <__aeabi_dadd+0x322>
 800076c:	0002      	movs	r2, r0
 800076e:	3c20      	subs	r4, #32
 8000770:	40e2      	lsrs	r2, r4
 8000772:	0014      	movs	r4, r2
 8000774:	4662      	mov	r2, ip
 8000776:	2a20      	cmp	r2, #32
 8000778:	d003      	beq.n	8000782 <__aeabi_dadd+0x53e>
 800077a:	2540      	movs	r5, #64	; 0x40
 800077c:	1aad      	subs	r5, r5, r2
 800077e:	40a8      	lsls	r0, r5
 8000780:	4303      	orrs	r3, r0
 8000782:	1e58      	subs	r0, r3, #1
 8000784:	4183      	sbcs	r3, r0
 8000786:	4323      	orrs	r3, r4
 8000788:	e775      	b.n	8000676 <__aeabi_dadd+0x432>
 800078a:	2a00      	cmp	r2, #0
 800078c:	d0e2      	beq.n	8000754 <__aeabi_dadd+0x510>
 800078e:	003a      	movs	r2, r7
 8000790:	430a      	orrs	r2, r1
 8000792:	d0cd      	beq.n	8000730 <__aeabi_dadd+0x4ec>
 8000794:	0742      	lsls	r2, r0, #29
 8000796:	08db      	lsrs	r3, r3, #3
 8000798:	4313      	orrs	r3, r2
 800079a:	2280      	movs	r2, #128	; 0x80
 800079c:	08c0      	lsrs	r0, r0, #3
 800079e:	0312      	lsls	r2, r2, #12
 80007a0:	4210      	tst	r0, r2
 80007a2:	d006      	beq.n	80007b2 <__aeabi_dadd+0x56e>
 80007a4:	08fc      	lsrs	r4, r7, #3
 80007a6:	4214      	tst	r4, r2
 80007a8:	d103      	bne.n	80007b2 <__aeabi_dadd+0x56e>
 80007aa:	0020      	movs	r0, r4
 80007ac:	08cb      	lsrs	r3, r1, #3
 80007ae:	077a      	lsls	r2, r7, #29
 80007b0:	4313      	orrs	r3, r2
 80007b2:	0f5a      	lsrs	r2, r3, #29
 80007b4:	00db      	lsls	r3, r3, #3
 80007b6:	0752      	lsls	r2, r2, #29
 80007b8:	08db      	lsrs	r3, r3, #3
 80007ba:	4313      	orrs	r3, r2
 80007bc:	e690      	b.n	80004e0 <__aeabi_dadd+0x29c>
 80007be:	4643      	mov	r3, r8
 80007c0:	430b      	orrs	r3, r1
 80007c2:	d100      	bne.n	80007c6 <__aeabi_dadd+0x582>
 80007c4:	e709      	b.n	80005da <__aeabi_dadd+0x396>
 80007c6:	4643      	mov	r3, r8
 80007c8:	4642      	mov	r2, r8
 80007ca:	08c9      	lsrs	r1, r1, #3
 80007cc:	075b      	lsls	r3, r3, #29
 80007ce:	4655      	mov	r5, sl
 80007d0:	430b      	orrs	r3, r1
 80007d2:	08d0      	lsrs	r0, r2, #3
 80007d4:	e666      	b.n	80004a4 <__aeabi_dadd+0x260>
 80007d6:	1acc      	subs	r4, r1, r3
 80007d8:	42a1      	cmp	r1, r4
 80007da:	4189      	sbcs	r1, r1
 80007dc:	1a3f      	subs	r7, r7, r0
 80007de:	4249      	negs	r1, r1
 80007e0:	4655      	mov	r5, sl
 80007e2:	2601      	movs	r6, #1
 80007e4:	1a7f      	subs	r7, r7, r1
 80007e6:	e57e      	b.n	80002e6 <__aeabi_dadd+0xa2>
 80007e8:	4642      	mov	r2, r8
 80007ea:	1a5c      	subs	r4, r3, r1
 80007ec:	1a87      	subs	r7, r0, r2
 80007ee:	42a3      	cmp	r3, r4
 80007f0:	4192      	sbcs	r2, r2
 80007f2:	4252      	negs	r2, r2
 80007f4:	1abf      	subs	r7, r7, r2
 80007f6:	023a      	lsls	r2, r7, #8
 80007f8:	d53d      	bpl.n	8000876 <__aeabi_dadd+0x632>
 80007fa:	1acc      	subs	r4, r1, r3
 80007fc:	42a1      	cmp	r1, r4
 80007fe:	4189      	sbcs	r1, r1
 8000800:	4643      	mov	r3, r8
 8000802:	4249      	negs	r1, r1
 8000804:	1a1f      	subs	r7, r3, r0
 8000806:	4655      	mov	r5, sl
 8000808:	1a7f      	subs	r7, r7, r1
 800080a:	e595      	b.n	8000338 <__aeabi_dadd+0xf4>
 800080c:	077b      	lsls	r3, r7, #29
 800080e:	08c9      	lsrs	r1, r1, #3
 8000810:	430b      	orrs	r3, r1
 8000812:	08f8      	lsrs	r0, r7, #3
 8000814:	e643      	b.n	800049e <__aeabi_dadd+0x25a>
 8000816:	4644      	mov	r4, r8
 8000818:	08db      	lsrs	r3, r3, #3
 800081a:	430c      	orrs	r4, r1
 800081c:	d130      	bne.n	8000880 <__aeabi_dadd+0x63c>
 800081e:	0742      	lsls	r2, r0, #29
 8000820:	4313      	orrs	r3, r2
 8000822:	08c0      	lsrs	r0, r0, #3
 8000824:	e65c      	b.n	80004e0 <__aeabi_dadd+0x29c>
 8000826:	077b      	lsls	r3, r7, #29
 8000828:	08c9      	lsrs	r1, r1, #3
 800082a:	430b      	orrs	r3, r1
 800082c:	08f8      	lsrs	r0, r7, #3
 800082e:	e639      	b.n	80004a4 <__aeabi_dadd+0x260>
 8000830:	185c      	adds	r4, r3, r1
 8000832:	429c      	cmp	r4, r3
 8000834:	419b      	sbcs	r3, r3
 8000836:	4440      	add	r0, r8
 8000838:	425b      	negs	r3, r3
 800083a:	18c7      	adds	r7, r0, r3
 800083c:	023b      	lsls	r3, r7, #8
 800083e:	d400      	bmi.n	8000842 <__aeabi_dadd+0x5fe>
 8000840:	e625      	b.n	800048e <__aeabi_dadd+0x24a>
 8000842:	4b1d      	ldr	r3, [pc, #116]	; (80008b8 <__aeabi_dadd+0x674>)
 8000844:	2601      	movs	r6, #1
 8000846:	401f      	ands	r7, r3
 8000848:	e621      	b.n	800048e <__aeabi_dadd+0x24a>
 800084a:	0004      	movs	r4, r0
 800084c:	3a20      	subs	r2, #32
 800084e:	40d4      	lsrs	r4, r2
 8000850:	4662      	mov	r2, ip
 8000852:	2a20      	cmp	r2, #32
 8000854:	d004      	beq.n	8000860 <__aeabi_dadd+0x61c>
 8000856:	2240      	movs	r2, #64	; 0x40
 8000858:	4666      	mov	r6, ip
 800085a:	1b92      	subs	r2, r2, r6
 800085c:	4090      	lsls	r0, r2
 800085e:	4303      	orrs	r3, r0
 8000860:	1e5a      	subs	r2, r3, #1
 8000862:	4193      	sbcs	r3, r2
 8000864:	431c      	orrs	r4, r3
 8000866:	e67e      	b.n	8000566 <__aeabi_dadd+0x322>
 8000868:	185c      	adds	r4, r3, r1
 800086a:	428c      	cmp	r4, r1
 800086c:	4189      	sbcs	r1, r1
 800086e:	4440      	add	r0, r8
 8000870:	4249      	negs	r1, r1
 8000872:	1847      	adds	r7, r0, r1
 8000874:	e6dd      	b.n	8000632 <__aeabi_dadd+0x3ee>
 8000876:	0023      	movs	r3, r4
 8000878:	433b      	orrs	r3, r7
 800087a:	d100      	bne.n	800087e <__aeabi_dadd+0x63a>
 800087c:	e6ad      	b.n	80005da <__aeabi_dadd+0x396>
 800087e:	e606      	b.n	800048e <__aeabi_dadd+0x24a>
 8000880:	0744      	lsls	r4, r0, #29
 8000882:	4323      	orrs	r3, r4
 8000884:	2480      	movs	r4, #128	; 0x80
 8000886:	08c0      	lsrs	r0, r0, #3
 8000888:	0324      	lsls	r4, r4, #12
 800088a:	4220      	tst	r0, r4
 800088c:	d008      	beq.n	80008a0 <__aeabi_dadd+0x65c>
 800088e:	4642      	mov	r2, r8
 8000890:	08d6      	lsrs	r6, r2, #3
 8000892:	4226      	tst	r6, r4
 8000894:	d104      	bne.n	80008a0 <__aeabi_dadd+0x65c>
 8000896:	4655      	mov	r5, sl
 8000898:	0030      	movs	r0, r6
 800089a:	08cb      	lsrs	r3, r1, #3
 800089c:	0751      	lsls	r1, r2, #29
 800089e:	430b      	orrs	r3, r1
 80008a0:	0f5a      	lsrs	r2, r3, #29
 80008a2:	00db      	lsls	r3, r3, #3
 80008a4:	08db      	lsrs	r3, r3, #3
 80008a6:	0752      	lsls	r2, r2, #29
 80008a8:	4313      	orrs	r3, r2
 80008aa:	e619      	b.n	80004e0 <__aeabi_dadd+0x29c>
 80008ac:	2300      	movs	r3, #0
 80008ae:	4a01      	ldr	r2, [pc, #4]	; (80008b4 <__aeabi_dadd+0x670>)
 80008b0:	001f      	movs	r7, r3
 80008b2:	e55e      	b.n	8000372 <__aeabi_dadd+0x12e>
 80008b4:	000007ff 	.word	0x000007ff
 80008b8:	ff7fffff 	.word	0xff7fffff

080008bc <__aeabi_ddiv>:
 80008bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80008be:	4657      	mov	r7, sl
 80008c0:	464e      	mov	r6, r9
 80008c2:	4645      	mov	r5, r8
 80008c4:	46de      	mov	lr, fp
 80008c6:	b5e0      	push	{r5, r6, r7, lr}
 80008c8:	4681      	mov	r9, r0
 80008ca:	0005      	movs	r5, r0
 80008cc:	030c      	lsls	r4, r1, #12
 80008ce:	0048      	lsls	r0, r1, #1
 80008d0:	4692      	mov	sl, r2
 80008d2:	001f      	movs	r7, r3
 80008d4:	b085      	sub	sp, #20
 80008d6:	0b24      	lsrs	r4, r4, #12
 80008d8:	0d40      	lsrs	r0, r0, #21
 80008da:	0fce      	lsrs	r6, r1, #31
 80008dc:	2800      	cmp	r0, #0
 80008de:	d100      	bne.n	80008e2 <__aeabi_ddiv+0x26>
 80008e0:	e156      	b.n	8000b90 <__aeabi_ddiv+0x2d4>
 80008e2:	4bd4      	ldr	r3, [pc, #848]	; (8000c34 <__aeabi_ddiv+0x378>)
 80008e4:	4298      	cmp	r0, r3
 80008e6:	d100      	bne.n	80008ea <__aeabi_ddiv+0x2e>
 80008e8:	e172      	b.n	8000bd0 <__aeabi_ddiv+0x314>
 80008ea:	0f6b      	lsrs	r3, r5, #29
 80008ec:	00e4      	lsls	r4, r4, #3
 80008ee:	431c      	orrs	r4, r3
 80008f0:	2380      	movs	r3, #128	; 0x80
 80008f2:	041b      	lsls	r3, r3, #16
 80008f4:	4323      	orrs	r3, r4
 80008f6:	4698      	mov	r8, r3
 80008f8:	4bcf      	ldr	r3, [pc, #828]	; (8000c38 <__aeabi_ddiv+0x37c>)
 80008fa:	00ed      	lsls	r5, r5, #3
 80008fc:	469b      	mov	fp, r3
 80008fe:	2300      	movs	r3, #0
 8000900:	4699      	mov	r9, r3
 8000902:	4483      	add	fp, r0
 8000904:	9300      	str	r3, [sp, #0]
 8000906:	033c      	lsls	r4, r7, #12
 8000908:	007b      	lsls	r3, r7, #1
 800090a:	4650      	mov	r0, sl
 800090c:	0b24      	lsrs	r4, r4, #12
 800090e:	0d5b      	lsrs	r3, r3, #21
 8000910:	0fff      	lsrs	r7, r7, #31
 8000912:	2b00      	cmp	r3, #0
 8000914:	d100      	bne.n	8000918 <__aeabi_ddiv+0x5c>
 8000916:	e11f      	b.n	8000b58 <__aeabi_ddiv+0x29c>
 8000918:	4ac6      	ldr	r2, [pc, #792]	; (8000c34 <__aeabi_ddiv+0x378>)
 800091a:	4293      	cmp	r3, r2
 800091c:	d100      	bne.n	8000920 <__aeabi_ddiv+0x64>
 800091e:	e162      	b.n	8000be6 <__aeabi_ddiv+0x32a>
 8000920:	49c5      	ldr	r1, [pc, #788]	; (8000c38 <__aeabi_ddiv+0x37c>)
 8000922:	0f42      	lsrs	r2, r0, #29
 8000924:	468c      	mov	ip, r1
 8000926:	00e4      	lsls	r4, r4, #3
 8000928:	4659      	mov	r1, fp
 800092a:	4314      	orrs	r4, r2
 800092c:	2280      	movs	r2, #128	; 0x80
 800092e:	4463      	add	r3, ip
 8000930:	0412      	lsls	r2, r2, #16
 8000932:	1acb      	subs	r3, r1, r3
 8000934:	4314      	orrs	r4, r2
 8000936:	469b      	mov	fp, r3
 8000938:	00c2      	lsls	r2, r0, #3
 800093a:	2000      	movs	r0, #0
 800093c:	0033      	movs	r3, r6
 800093e:	407b      	eors	r3, r7
 8000940:	469a      	mov	sl, r3
 8000942:	464b      	mov	r3, r9
 8000944:	2b0f      	cmp	r3, #15
 8000946:	d827      	bhi.n	8000998 <__aeabi_ddiv+0xdc>
 8000948:	49bc      	ldr	r1, [pc, #752]	; (8000c3c <__aeabi_ddiv+0x380>)
 800094a:	009b      	lsls	r3, r3, #2
 800094c:	58cb      	ldr	r3, [r1, r3]
 800094e:	469f      	mov	pc, r3
 8000950:	46b2      	mov	sl, r6
 8000952:	9b00      	ldr	r3, [sp, #0]
 8000954:	2b02      	cmp	r3, #2
 8000956:	d016      	beq.n	8000986 <__aeabi_ddiv+0xca>
 8000958:	2b03      	cmp	r3, #3
 800095a:	d100      	bne.n	800095e <__aeabi_ddiv+0xa2>
 800095c:	e28e      	b.n	8000e7c <__aeabi_ddiv+0x5c0>
 800095e:	2b01      	cmp	r3, #1
 8000960:	d000      	beq.n	8000964 <__aeabi_ddiv+0xa8>
 8000962:	e0d9      	b.n	8000b18 <__aeabi_ddiv+0x25c>
 8000964:	2300      	movs	r3, #0
 8000966:	2400      	movs	r4, #0
 8000968:	2500      	movs	r5, #0
 800096a:	4652      	mov	r2, sl
 800096c:	051b      	lsls	r3, r3, #20
 800096e:	4323      	orrs	r3, r4
 8000970:	07d2      	lsls	r2, r2, #31
 8000972:	4313      	orrs	r3, r2
 8000974:	0028      	movs	r0, r5
 8000976:	0019      	movs	r1, r3
 8000978:	b005      	add	sp, #20
 800097a:	bcf0      	pop	{r4, r5, r6, r7}
 800097c:	46bb      	mov	fp, r7
 800097e:	46b2      	mov	sl, r6
 8000980:	46a9      	mov	r9, r5
 8000982:	46a0      	mov	r8, r4
 8000984:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000986:	2400      	movs	r4, #0
 8000988:	2500      	movs	r5, #0
 800098a:	4baa      	ldr	r3, [pc, #680]	; (8000c34 <__aeabi_ddiv+0x378>)
 800098c:	e7ed      	b.n	800096a <__aeabi_ddiv+0xae>
 800098e:	46ba      	mov	sl, r7
 8000990:	46a0      	mov	r8, r4
 8000992:	0015      	movs	r5, r2
 8000994:	9000      	str	r0, [sp, #0]
 8000996:	e7dc      	b.n	8000952 <__aeabi_ddiv+0x96>
 8000998:	4544      	cmp	r4, r8
 800099a:	d200      	bcs.n	800099e <__aeabi_ddiv+0xe2>
 800099c:	e1c7      	b.n	8000d2e <__aeabi_ddiv+0x472>
 800099e:	d100      	bne.n	80009a2 <__aeabi_ddiv+0xe6>
 80009a0:	e1c2      	b.n	8000d28 <__aeabi_ddiv+0x46c>
 80009a2:	2301      	movs	r3, #1
 80009a4:	425b      	negs	r3, r3
 80009a6:	469c      	mov	ip, r3
 80009a8:	002e      	movs	r6, r5
 80009aa:	4640      	mov	r0, r8
 80009ac:	2500      	movs	r5, #0
 80009ae:	44e3      	add	fp, ip
 80009b0:	0223      	lsls	r3, r4, #8
 80009b2:	0e14      	lsrs	r4, r2, #24
 80009b4:	431c      	orrs	r4, r3
 80009b6:	0c1b      	lsrs	r3, r3, #16
 80009b8:	4699      	mov	r9, r3
 80009ba:	0423      	lsls	r3, r4, #16
 80009bc:	0c1f      	lsrs	r7, r3, #16
 80009be:	0212      	lsls	r2, r2, #8
 80009c0:	4649      	mov	r1, r9
 80009c2:	9200      	str	r2, [sp, #0]
 80009c4:	9701      	str	r7, [sp, #4]
 80009c6:	f7ff fc37 	bl	8000238 <__aeabi_uidivmod>
 80009ca:	0002      	movs	r2, r0
 80009cc:	437a      	muls	r2, r7
 80009ce:	040b      	lsls	r3, r1, #16
 80009d0:	0c31      	lsrs	r1, r6, #16
 80009d2:	4680      	mov	r8, r0
 80009d4:	4319      	orrs	r1, r3
 80009d6:	428a      	cmp	r2, r1
 80009d8:	d907      	bls.n	80009ea <__aeabi_ddiv+0x12e>
 80009da:	2301      	movs	r3, #1
 80009dc:	425b      	negs	r3, r3
 80009de:	469c      	mov	ip, r3
 80009e0:	1909      	adds	r1, r1, r4
 80009e2:	44e0      	add	r8, ip
 80009e4:	428c      	cmp	r4, r1
 80009e6:	d800      	bhi.n	80009ea <__aeabi_ddiv+0x12e>
 80009e8:	e207      	b.n	8000dfa <__aeabi_ddiv+0x53e>
 80009ea:	1a88      	subs	r0, r1, r2
 80009ec:	4649      	mov	r1, r9
 80009ee:	f7ff fc23 	bl	8000238 <__aeabi_uidivmod>
 80009f2:	0409      	lsls	r1, r1, #16
 80009f4:	468c      	mov	ip, r1
 80009f6:	0431      	lsls	r1, r6, #16
 80009f8:	4666      	mov	r6, ip
 80009fa:	9a01      	ldr	r2, [sp, #4]
 80009fc:	0c09      	lsrs	r1, r1, #16
 80009fe:	4342      	muls	r2, r0
 8000a00:	0003      	movs	r3, r0
 8000a02:	4331      	orrs	r1, r6
 8000a04:	428a      	cmp	r2, r1
 8000a06:	d904      	bls.n	8000a12 <__aeabi_ddiv+0x156>
 8000a08:	1909      	adds	r1, r1, r4
 8000a0a:	3b01      	subs	r3, #1
 8000a0c:	428c      	cmp	r4, r1
 8000a0e:	d800      	bhi.n	8000a12 <__aeabi_ddiv+0x156>
 8000a10:	e1ed      	b.n	8000dee <__aeabi_ddiv+0x532>
 8000a12:	1a88      	subs	r0, r1, r2
 8000a14:	4642      	mov	r2, r8
 8000a16:	0412      	lsls	r2, r2, #16
 8000a18:	431a      	orrs	r2, r3
 8000a1a:	4690      	mov	r8, r2
 8000a1c:	4641      	mov	r1, r8
 8000a1e:	9b00      	ldr	r3, [sp, #0]
 8000a20:	040e      	lsls	r6, r1, #16
 8000a22:	0c1b      	lsrs	r3, r3, #16
 8000a24:	001f      	movs	r7, r3
 8000a26:	9302      	str	r3, [sp, #8]
 8000a28:	9b00      	ldr	r3, [sp, #0]
 8000a2a:	0c36      	lsrs	r6, r6, #16
 8000a2c:	041b      	lsls	r3, r3, #16
 8000a2e:	0c19      	lsrs	r1, r3, #16
 8000a30:	000b      	movs	r3, r1
 8000a32:	4373      	muls	r3, r6
 8000a34:	0c12      	lsrs	r2, r2, #16
 8000a36:	437e      	muls	r6, r7
 8000a38:	9103      	str	r1, [sp, #12]
 8000a3a:	4351      	muls	r1, r2
 8000a3c:	437a      	muls	r2, r7
 8000a3e:	0c1f      	lsrs	r7, r3, #16
 8000a40:	46bc      	mov	ip, r7
 8000a42:	1876      	adds	r6, r6, r1
 8000a44:	4466      	add	r6, ip
 8000a46:	42b1      	cmp	r1, r6
 8000a48:	d903      	bls.n	8000a52 <__aeabi_ddiv+0x196>
 8000a4a:	2180      	movs	r1, #128	; 0x80
 8000a4c:	0249      	lsls	r1, r1, #9
 8000a4e:	468c      	mov	ip, r1
 8000a50:	4462      	add	r2, ip
 8000a52:	0c31      	lsrs	r1, r6, #16
 8000a54:	188a      	adds	r2, r1, r2
 8000a56:	0431      	lsls	r1, r6, #16
 8000a58:	041e      	lsls	r6, r3, #16
 8000a5a:	0c36      	lsrs	r6, r6, #16
 8000a5c:	198e      	adds	r6, r1, r6
 8000a5e:	4290      	cmp	r0, r2
 8000a60:	d302      	bcc.n	8000a68 <__aeabi_ddiv+0x1ac>
 8000a62:	d112      	bne.n	8000a8a <__aeabi_ddiv+0x1ce>
 8000a64:	42b5      	cmp	r5, r6
 8000a66:	d210      	bcs.n	8000a8a <__aeabi_ddiv+0x1ce>
 8000a68:	4643      	mov	r3, r8
 8000a6a:	1e59      	subs	r1, r3, #1
 8000a6c:	9b00      	ldr	r3, [sp, #0]
 8000a6e:	469c      	mov	ip, r3
 8000a70:	4465      	add	r5, ip
 8000a72:	001f      	movs	r7, r3
 8000a74:	429d      	cmp	r5, r3
 8000a76:	419b      	sbcs	r3, r3
 8000a78:	425b      	negs	r3, r3
 8000a7a:	191b      	adds	r3, r3, r4
 8000a7c:	18c0      	adds	r0, r0, r3
 8000a7e:	4284      	cmp	r4, r0
 8000a80:	d200      	bcs.n	8000a84 <__aeabi_ddiv+0x1c8>
 8000a82:	e1a0      	b.n	8000dc6 <__aeabi_ddiv+0x50a>
 8000a84:	d100      	bne.n	8000a88 <__aeabi_ddiv+0x1cc>
 8000a86:	e19b      	b.n	8000dc0 <__aeabi_ddiv+0x504>
 8000a88:	4688      	mov	r8, r1
 8000a8a:	1bae      	subs	r6, r5, r6
 8000a8c:	42b5      	cmp	r5, r6
 8000a8e:	41ad      	sbcs	r5, r5
 8000a90:	1a80      	subs	r0, r0, r2
 8000a92:	426d      	negs	r5, r5
 8000a94:	1b40      	subs	r0, r0, r5
 8000a96:	4284      	cmp	r4, r0
 8000a98:	d100      	bne.n	8000a9c <__aeabi_ddiv+0x1e0>
 8000a9a:	e1d5      	b.n	8000e48 <__aeabi_ddiv+0x58c>
 8000a9c:	4649      	mov	r1, r9
 8000a9e:	f7ff fbcb 	bl	8000238 <__aeabi_uidivmod>
 8000aa2:	9a01      	ldr	r2, [sp, #4]
 8000aa4:	040b      	lsls	r3, r1, #16
 8000aa6:	4342      	muls	r2, r0
 8000aa8:	0c31      	lsrs	r1, r6, #16
 8000aaa:	0005      	movs	r5, r0
 8000aac:	4319      	orrs	r1, r3
 8000aae:	428a      	cmp	r2, r1
 8000ab0:	d900      	bls.n	8000ab4 <__aeabi_ddiv+0x1f8>
 8000ab2:	e16c      	b.n	8000d8e <__aeabi_ddiv+0x4d2>
 8000ab4:	1a88      	subs	r0, r1, r2
 8000ab6:	4649      	mov	r1, r9
 8000ab8:	f7ff fbbe 	bl	8000238 <__aeabi_uidivmod>
 8000abc:	9a01      	ldr	r2, [sp, #4]
 8000abe:	0436      	lsls	r6, r6, #16
 8000ac0:	4342      	muls	r2, r0
 8000ac2:	0409      	lsls	r1, r1, #16
 8000ac4:	0c36      	lsrs	r6, r6, #16
 8000ac6:	0003      	movs	r3, r0
 8000ac8:	430e      	orrs	r6, r1
 8000aca:	42b2      	cmp	r2, r6
 8000acc:	d900      	bls.n	8000ad0 <__aeabi_ddiv+0x214>
 8000ace:	e153      	b.n	8000d78 <__aeabi_ddiv+0x4bc>
 8000ad0:	9803      	ldr	r0, [sp, #12]
 8000ad2:	1ab6      	subs	r6, r6, r2
 8000ad4:	0002      	movs	r2, r0
 8000ad6:	042d      	lsls	r5, r5, #16
 8000ad8:	431d      	orrs	r5, r3
 8000ada:	9f02      	ldr	r7, [sp, #8]
 8000adc:	042b      	lsls	r3, r5, #16
 8000ade:	0c1b      	lsrs	r3, r3, #16
 8000ae0:	435a      	muls	r2, r3
 8000ae2:	437b      	muls	r3, r7
 8000ae4:	469c      	mov	ip, r3
 8000ae6:	0c29      	lsrs	r1, r5, #16
 8000ae8:	4348      	muls	r0, r1
 8000aea:	0c13      	lsrs	r3, r2, #16
 8000aec:	4484      	add	ip, r0
 8000aee:	4463      	add	r3, ip
 8000af0:	4379      	muls	r1, r7
 8000af2:	4298      	cmp	r0, r3
 8000af4:	d903      	bls.n	8000afe <__aeabi_ddiv+0x242>
 8000af6:	2080      	movs	r0, #128	; 0x80
 8000af8:	0240      	lsls	r0, r0, #9
 8000afa:	4684      	mov	ip, r0
 8000afc:	4461      	add	r1, ip
 8000afe:	0c18      	lsrs	r0, r3, #16
 8000b00:	0412      	lsls	r2, r2, #16
 8000b02:	041b      	lsls	r3, r3, #16
 8000b04:	0c12      	lsrs	r2, r2, #16
 8000b06:	1841      	adds	r1, r0, r1
 8000b08:	189b      	adds	r3, r3, r2
 8000b0a:	428e      	cmp	r6, r1
 8000b0c:	d200      	bcs.n	8000b10 <__aeabi_ddiv+0x254>
 8000b0e:	e0ff      	b.n	8000d10 <__aeabi_ddiv+0x454>
 8000b10:	d100      	bne.n	8000b14 <__aeabi_ddiv+0x258>
 8000b12:	e0fa      	b.n	8000d0a <__aeabi_ddiv+0x44e>
 8000b14:	2301      	movs	r3, #1
 8000b16:	431d      	orrs	r5, r3
 8000b18:	4a49      	ldr	r2, [pc, #292]	; (8000c40 <__aeabi_ddiv+0x384>)
 8000b1a:	445a      	add	r2, fp
 8000b1c:	2a00      	cmp	r2, #0
 8000b1e:	dc00      	bgt.n	8000b22 <__aeabi_ddiv+0x266>
 8000b20:	e0aa      	b.n	8000c78 <__aeabi_ddiv+0x3bc>
 8000b22:	076b      	lsls	r3, r5, #29
 8000b24:	d000      	beq.n	8000b28 <__aeabi_ddiv+0x26c>
 8000b26:	e13d      	b.n	8000da4 <__aeabi_ddiv+0x4e8>
 8000b28:	08ed      	lsrs	r5, r5, #3
 8000b2a:	4643      	mov	r3, r8
 8000b2c:	01db      	lsls	r3, r3, #7
 8000b2e:	d506      	bpl.n	8000b3e <__aeabi_ddiv+0x282>
 8000b30:	4642      	mov	r2, r8
 8000b32:	4b44      	ldr	r3, [pc, #272]	; (8000c44 <__aeabi_ddiv+0x388>)
 8000b34:	401a      	ands	r2, r3
 8000b36:	4690      	mov	r8, r2
 8000b38:	2280      	movs	r2, #128	; 0x80
 8000b3a:	00d2      	lsls	r2, r2, #3
 8000b3c:	445a      	add	r2, fp
 8000b3e:	4b42      	ldr	r3, [pc, #264]	; (8000c48 <__aeabi_ddiv+0x38c>)
 8000b40:	429a      	cmp	r2, r3
 8000b42:	dd00      	ble.n	8000b46 <__aeabi_ddiv+0x28a>
 8000b44:	e71f      	b.n	8000986 <__aeabi_ddiv+0xca>
 8000b46:	4643      	mov	r3, r8
 8000b48:	075b      	lsls	r3, r3, #29
 8000b4a:	431d      	orrs	r5, r3
 8000b4c:	4643      	mov	r3, r8
 8000b4e:	0552      	lsls	r2, r2, #21
 8000b50:	025c      	lsls	r4, r3, #9
 8000b52:	0b24      	lsrs	r4, r4, #12
 8000b54:	0d53      	lsrs	r3, r2, #21
 8000b56:	e708      	b.n	800096a <__aeabi_ddiv+0xae>
 8000b58:	4652      	mov	r2, sl
 8000b5a:	4322      	orrs	r2, r4
 8000b5c:	d100      	bne.n	8000b60 <__aeabi_ddiv+0x2a4>
 8000b5e:	e07b      	b.n	8000c58 <__aeabi_ddiv+0x39c>
 8000b60:	2c00      	cmp	r4, #0
 8000b62:	d100      	bne.n	8000b66 <__aeabi_ddiv+0x2aa>
 8000b64:	e0fa      	b.n	8000d5c <__aeabi_ddiv+0x4a0>
 8000b66:	0020      	movs	r0, r4
 8000b68:	f000 fc70 	bl	800144c <__clzsi2>
 8000b6c:	0002      	movs	r2, r0
 8000b6e:	3a0b      	subs	r2, #11
 8000b70:	231d      	movs	r3, #29
 8000b72:	0001      	movs	r1, r0
 8000b74:	1a9b      	subs	r3, r3, r2
 8000b76:	4652      	mov	r2, sl
 8000b78:	3908      	subs	r1, #8
 8000b7a:	40da      	lsrs	r2, r3
 8000b7c:	408c      	lsls	r4, r1
 8000b7e:	4314      	orrs	r4, r2
 8000b80:	4652      	mov	r2, sl
 8000b82:	408a      	lsls	r2, r1
 8000b84:	4b31      	ldr	r3, [pc, #196]	; (8000c4c <__aeabi_ddiv+0x390>)
 8000b86:	4458      	add	r0, fp
 8000b88:	469b      	mov	fp, r3
 8000b8a:	4483      	add	fp, r0
 8000b8c:	2000      	movs	r0, #0
 8000b8e:	e6d5      	b.n	800093c <__aeabi_ddiv+0x80>
 8000b90:	464b      	mov	r3, r9
 8000b92:	4323      	orrs	r3, r4
 8000b94:	4698      	mov	r8, r3
 8000b96:	d044      	beq.n	8000c22 <__aeabi_ddiv+0x366>
 8000b98:	2c00      	cmp	r4, #0
 8000b9a:	d100      	bne.n	8000b9e <__aeabi_ddiv+0x2e2>
 8000b9c:	e0ce      	b.n	8000d3c <__aeabi_ddiv+0x480>
 8000b9e:	0020      	movs	r0, r4
 8000ba0:	f000 fc54 	bl	800144c <__clzsi2>
 8000ba4:	0001      	movs	r1, r0
 8000ba6:	0002      	movs	r2, r0
 8000ba8:	390b      	subs	r1, #11
 8000baa:	231d      	movs	r3, #29
 8000bac:	1a5b      	subs	r3, r3, r1
 8000bae:	4649      	mov	r1, r9
 8000bb0:	0010      	movs	r0, r2
 8000bb2:	40d9      	lsrs	r1, r3
 8000bb4:	3808      	subs	r0, #8
 8000bb6:	4084      	lsls	r4, r0
 8000bb8:	000b      	movs	r3, r1
 8000bba:	464d      	mov	r5, r9
 8000bbc:	4323      	orrs	r3, r4
 8000bbe:	4698      	mov	r8, r3
 8000bc0:	4085      	lsls	r5, r0
 8000bc2:	4823      	ldr	r0, [pc, #140]	; (8000c50 <__aeabi_ddiv+0x394>)
 8000bc4:	1a83      	subs	r3, r0, r2
 8000bc6:	469b      	mov	fp, r3
 8000bc8:	2300      	movs	r3, #0
 8000bca:	4699      	mov	r9, r3
 8000bcc:	9300      	str	r3, [sp, #0]
 8000bce:	e69a      	b.n	8000906 <__aeabi_ddiv+0x4a>
 8000bd0:	464b      	mov	r3, r9
 8000bd2:	4323      	orrs	r3, r4
 8000bd4:	4698      	mov	r8, r3
 8000bd6:	d11d      	bne.n	8000c14 <__aeabi_ddiv+0x358>
 8000bd8:	2308      	movs	r3, #8
 8000bda:	4699      	mov	r9, r3
 8000bdc:	3b06      	subs	r3, #6
 8000bde:	2500      	movs	r5, #0
 8000be0:	4683      	mov	fp, r0
 8000be2:	9300      	str	r3, [sp, #0]
 8000be4:	e68f      	b.n	8000906 <__aeabi_ddiv+0x4a>
 8000be6:	4652      	mov	r2, sl
 8000be8:	4322      	orrs	r2, r4
 8000bea:	d109      	bne.n	8000c00 <__aeabi_ddiv+0x344>
 8000bec:	2302      	movs	r3, #2
 8000bee:	4649      	mov	r1, r9
 8000bf0:	4319      	orrs	r1, r3
 8000bf2:	4b18      	ldr	r3, [pc, #96]	; (8000c54 <__aeabi_ddiv+0x398>)
 8000bf4:	4689      	mov	r9, r1
 8000bf6:	469c      	mov	ip, r3
 8000bf8:	2400      	movs	r4, #0
 8000bfa:	2002      	movs	r0, #2
 8000bfc:	44e3      	add	fp, ip
 8000bfe:	e69d      	b.n	800093c <__aeabi_ddiv+0x80>
 8000c00:	2303      	movs	r3, #3
 8000c02:	464a      	mov	r2, r9
 8000c04:	431a      	orrs	r2, r3
 8000c06:	4b13      	ldr	r3, [pc, #76]	; (8000c54 <__aeabi_ddiv+0x398>)
 8000c08:	4691      	mov	r9, r2
 8000c0a:	469c      	mov	ip, r3
 8000c0c:	4652      	mov	r2, sl
 8000c0e:	2003      	movs	r0, #3
 8000c10:	44e3      	add	fp, ip
 8000c12:	e693      	b.n	800093c <__aeabi_ddiv+0x80>
 8000c14:	230c      	movs	r3, #12
 8000c16:	4699      	mov	r9, r3
 8000c18:	3b09      	subs	r3, #9
 8000c1a:	46a0      	mov	r8, r4
 8000c1c:	4683      	mov	fp, r0
 8000c1e:	9300      	str	r3, [sp, #0]
 8000c20:	e671      	b.n	8000906 <__aeabi_ddiv+0x4a>
 8000c22:	2304      	movs	r3, #4
 8000c24:	4699      	mov	r9, r3
 8000c26:	2300      	movs	r3, #0
 8000c28:	469b      	mov	fp, r3
 8000c2a:	3301      	adds	r3, #1
 8000c2c:	2500      	movs	r5, #0
 8000c2e:	9300      	str	r3, [sp, #0]
 8000c30:	e669      	b.n	8000906 <__aeabi_ddiv+0x4a>
 8000c32:	46c0      	nop			; (mov r8, r8)
 8000c34:	000007ff 	.word	0x000007ff
 8000c38:	fffffc01 	.word	0xfffffc01
 8000c3c:	0800568c 	.word	0x0800568c
 8000c40:	000003ff 	.word	0x000003ff
 8000c44:	feffffff 	.word	0xfeffffff
 8000c48:	000007fe 	.word	0x000007fe
 8000c4c:	000003f3 	.word	0x000003f3
 8000c50:	fffffc0d 	.word	0xfffffc0d
 8000c54:	fffff801 	.word	0xfffff801
 8000c58:	4649      	mov	r1, r9
 8000c5a:	2301      	movs	r3, #1
 8000c5c:	4319      	orrs	r1, r3
 8000c5e:	4689      	mov	r9, r1
 8000c60:	2400      	movs	r4, #0
 8000c62:	2001      	movs	r0, #1
 8000c64:	e66a      	b.n	800093c <__aeabi_ddiv+0x80>
 8000c66:	2300      	movs	r3, #0
 8000c68:	2480      	movs	r4, #128	; 0x80
 8000c6a:	469a      	mov	sl, r3
 8000c6c:	2500      	movs	r5, #0
 8000c6e:	4b8a      	ldr	r3, [pc, #552]	; (8000e98 <__aeabi_ddiv+0x5dc>)
 8000c70:	0324      	lsls	r4, r4, #12
 8000c72:	e67a      	b.n	800096a <__aeabi_ddiv+0xae>
 8000c74:	2501      	movs	r5, #1
 8000c76:	426d      	negs	r5, r5
 8000c78:	2301      	movs	r3, #1
 8000c7a:	1a9b      	subs	r3, r3, r2
 8000c7c:	2b38      	cmp	r3, #56	; 0x38
 8000c7e:	dd00      	ble.n	8000c82 <__aeabi_ddiv+0x3c6>
 8000c80:	e670      	b.n	8000964 <__aeabi_ddiv+0xa8>
 8000c82:	2b1f      	cmp	r3, #31
 8000c84:	dc00      	bgt.n	8000c88 <__aeabi_ddiv+0x3cc>
 8000c86:	e0bf      	b.n	8000e08 <__aeabi_ddiv+0x54c>
 8000c88:	211f      	movs	r1, #31
 8000c8a:	4249      	negs	r1, r1
 8000c8c:	1a8a      	subs	r2, r1, r2
 8000c8e:	4641      	mov	r1, r8
 8000c90:	40d1      	lsrs	r1, r2
 8000c92:	000a      	movs	r2, r1
 8000c94:	2b20      	cmp	r3, #32
 8000c96:	d004      	beq.n	8000ca2 <__aeabi_ddiv+0x3e6>
 8000c98:	4641      	mov	r1, r8
 8000c9a:	4b80      	ldr	r3, [pc, #512]	; (8000e9c <__aeabi_ddiv+0x5e0>)
 8000c9c:	445b      	add	r3, fp
 8000c9e:	4099      	lsls	r1, r3
 8000ca0:	430d      	orrs	r5, r1
 8000ca2:	1e6b      	subs	r3, r5, #1
 8000ca4:	419d      	sbcs	r5, r3
 8000ca6:	2307      	movs	r3, #7
 8000ca8:	432a      	orrs	r2, r5
 8000caa:	001d      	movs	r5, r3
 8000cac:	2400      	movs	r4, #0
 8000cae:	4015      	ands	r5, r2
 8000cb0:	4213      	tst	r3, r2
 8000cb2:	d100      	bne.n	8000cb6 <__aeabi_ddiv+0x3fa>
 8000cb4:	e0d4      	b.n	8000e60 <__aeabi_ddiv+0x5a4>
 8000cb6:	210f      	movs	r1, #15
 8000cb8:	2300      	movs	r3, #0
 8000cba:	4011      	ands	r1, r2
 8000cbc:	2904      	cmp	r1, #4
 8000cbe:	d100      	bne.n	8000cc2 <__aeabi_ddiv+0x406>
 8000cc0:	e0cb      	b.n	8000e5a <__aeabi_ddiv+0x59e>
 8000cc2:	1d11      	adds	r1, r2, #4
 8000cc4:	4291      	cmp	r1, r2
 8000cc6:	4192      	sbcs	r2, r2
 8000cc8:	4252      	negs	r2, r2
 8000cca:	189b      	adds	r3, r3, r2
 8000ccc:	000a      	movs	r2, r1
 8000cce:	0219      	lsls	r1, r3, #8
 8000cd0:	d400      	bmi.n	8000cd4 <__aeabi_ddiv+0x418>
 8000cd2:	e0c2      	b.n	8000e5a <__aeabi_ddiv+0x59e>
 8000cd4:	2301      	movs	r3, #1
 8000cd6:	2400      	movs	r4, #0
 8000cd8:	2500      	movs	r5, #0
 8000cda:	e646      	b.n	800096a <__aeabi_ddiv+0xae>
 8000cdc:	2380      	movs	r3, #128	; 0x80
 8000cde:	4641      	mov	r1, r8
 8000ce0:	031b      	lsls	r3, r3, #12
 8000ce2:	4219      	tst	r1, r3
 8000ce4:	d008      	beq.n	8000cf8 <__aeabi_ddiv+0x43c>
 8000ce6:	421c      	tst	r4, r3
 8000ce8:	d106      	bne.n	8000cf8 <__aeabi_ddiv+0x43c>
 8000cea:	431c      	orrs	r4, r3
 8000cec:	0324      	lsls	r4, r4, #12
 8000cee:	46ba      	mov	sl, r7
 8000cf0:	0015      	movs	r5, r2
 8000cf2:	4b69      	ldr	r3, [pc, #420]	; (8000e98 <__aeabi_ddiv+0x5dc>)
 8000cf4:	0b24      	lsrs	r4, r4, #12
 8000cf6:	e638      	b.n	800096a <__aeabi_ddiv+0xae>
 8000cf8:	2480      	movs	r4, #128	; 0x80
 8000cfa:	4643      	mov	r3, r8
 8000cfc:	0324      	lsls	r4, r4, #12
 8000cfe:	431c      	orrs	r4, r3
 8000d00:	0324      	lsls	r4, r4, #12
 8000d02:	46b2      	mov	sl, r6
 8000d04:	4b64      	ldr	r3, [pc, #400]	; (8000e98 <__aeabi_ddiv+0x5dc>)
 8000d06:	0b24      	lsrs	r4, r4, #12
 8000d08:	e62f      	b.n	800096a <__aeabi_ddiv+0xae>
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d100      	bne.n	8000d10 <__aeabi_ddiv+0x454>
 8000d0e:	e703      	b.n	8000b18 <__aeabi_ddiv+0x25c>
 8000d10:	19a6      	adds	r6, r4, r6
 8000d12:	1e68      	subs	r0, r5, #1
 8000d14:	42a6      	cmp	r6, r4
 8000d16:	d200      	bcs.n	8000d1a <__aeabi_ddiv+0x45e>
 8000d18:	e08d      	b.n	8000e36 <__aeabi_ddiv+0x57a>
 8000d1a:	428e      	cmp	r6, r1
 8000d1c:	d200      	bcs.n	8000d20 <__aeabi_ddiv+0x464>
 8000d1e:	e0a3      	b.n	8000e68 <__aeabi_ddiv+0x5ac>
 8000d20:	d100      	bne.n	8000d24 <__aeabi_ddiv+0x468>
 8000d22:	e0b3      	b.n	8000e8c <__aeabi_ddiv+0x5d0>
 8000d24:	0005      	movs	r5, r0
 8000d26:	e6f5      	b.n	8000b14 <__aeabi_ddiv+0x258>
 8000d28:	42aa      	cmp	r2, r5
 8000d2a:	d900      	bls.n	8000d2e <__aeabi_ddiv+0x472>
 8000d2c:	e639      	b.n	80009a2 <__aeabi_ddiv+0xe6>
 8000d2e:	4643      	mov	r3, r8
 8000d30:	07de      	lsls	r6, r3, #31
 8000d32:	0858      	lsrs	r0, r3, #1
 8000d34:	086b      	lsrs	r3, r5, #1
 8000d36:	431e      	orrs	r6, r3
 8000d38:	07ed      	lsls	r5, r5, #31
 8000d3a:	e639      	b.n	80009b0 <__aeabi_ddiv+0xf4>
 8000d3c:	4648      	mov	r0, r9
 8000d3e:	f000 fb85 	bl	800144c <__clzsi2>
 8000d42:	0001      	movs	r1, r0
 8000d44:	0002      	movs	r2, r0
 8000d46:	3115      	adds	r1, #21
 8000d48:	3220      	adds	r2, #32
 8000d4a:	291c      	cmp	r1, #28
 8000d4c:	dc00      	bgt.n	8000d50 <__aeabi_ddiv+0x494>
 8000d4e:	e72c      	b.n	8000baa <__aeabi_ddiv+0x2ee>
 8000d50:	464b      	mov	r3, r9
 8000d52:	3808      	subs	r0, #8
 8000d54:	4083      	lsls	r3, r0
 8000d56:	2500      	movs	r5, #0
 8000d58:	4698      	mov	r8, r3
 8000d5a:	e732      	b.n	8000bc2 <__aeabi_ddiv+0x306>
 8000d5c:	f000 fb76 	bl	800144c <__clzsi2>
 8000d60:	0003      	movs	r3, r0
 8000d62:	001a      	movs	r2, r3
 8000d64:	3215      	adds	r2, #21
 8000d66:	3020      	adds	r0, #32
 8000d68:	2a1c      	cmp	r2, #28
 8000d6a:	dc00      	bgt.n	8000d6e <__aeabi_ddiv+0x4b2>
 8000d6c:	e700      	b.n	8000b70 <__aeabi_ddiv+0x2b4>
 8000d6e:	4654      	mov	r4, sl
 8000d70:	3b08      	subs	r3, #8
 8000d72:	2200      	movs	r2, #0
 8000d74:	409c      	lsls	r4, r3
 8000d76:	e705      	b.n	8000b84 <__aeabi_ddiv+0x2c8>
 8000d78:	1936      	adds	r6, r6, r4
 8000d7a:	3b01      	subs	r3, #1
 8000d7c:	42b4      	cmp	r4, r6
 8000d7e:	d900      	bls.n	8000d82 <__aeabi_ddiv+0x4c6>
 8000d80:	e6a6      	b.n	8000ad0 <__aeabi_ddiv+0x214>
 8000d82:	42b2      	cmp	r2, r6
 8000d84:	d800      	bhi.n	8000d88 <__aeabi_ddiv+0x4cc>
 8000d86:	e6a3      	b.n	8000ad0 <__aeabi_ddiv+0x214>
 8000d88:	1e83      	subs	r3, r0, #2
 8000d8a:	1936      	adds	r6, r6, r4
 8000d8c:	e6a0      	b.n	8000ad0 <__aeabi_ddiv+0x214>
 8000d8e:	1909      	adds	r1, r1, r4
 8000d90:	3d01      	subs	r5, #1
 8000d92:	428c      	cmp	r4, r1
 8000d94:	d900      	bls.n	8000d98 <__aeabi_ddiv+0x4dc>
 8000d96:	e68d      	b.n	8000ab4 <__aeabi_ddiv+0x1f8>
 8000d98:	428a      	cmp	r2, r1
 8000d9a:	d800      	bhi.n	8000d9e <__aeabi_ddiv+0x4e2>
 8000d9c:	e68a      	b.n	8000ab4 <__aeabi_ddiv+0x1f8>
 8000d9e:	1e85      	subs	r5, r0, #2
 8000da0:	1909      	adds	r1, r1, r4
 8000da2:	e687      	b.n	8000ab4 <__aeabi_ddiv+0x1f8>
 8000da4:	230f      	movs	r3, #15
 8000da6:	402b      	ands	r3, r5
 8000da8:	2b04      	cmp	r3, #4
 8000daa:	d100      	bne.n	8000dae <__aeabi_ddiv+0x4f2>
 8000dac:	e6bc      	b.n	8000b28 <__aeabi_ddiv+0x26c>
 8000dae:	2305      	movs	r3, #5
 8000db0:	425b      	negs	r3, r3
 8000db2:	42ab      	cmp	r3, r5
 8000db4:	419b      	sbcs	r3, r3
 8000db6:	3504      	adds	r5, #4
 8000db8:	425b      	negs	r3, r3
 8000dba:	08ed      	lsrs	r5, r5, #3
 8000dbc:	4498      	add	r8, r3
 8000dbe:	e6b4      	b.n	8000b2a <__aeabi_ddiv+0x26e>
 8000dc0:	42af      	cmp	r7, r5
 8000dc2:	d900      	bls.n	8000dc6 <__aeabi_ddiv+0x50a>
 8000dc4:	e660      	b.n	8000a88 <__aeabi_ddiv+0x1cc>
 8000dc6:	4282      	cmp	r2, r0
 8000dc8:	d804      	bhi.n	8000dd4 <__aeabi_ddiv+0x518>
 8000dca:	d000      	beq.n	8000dce <__aeabi_ddiv+0x512>
 8000dcc:	e65c      	b.n	8000a88 <__aeabi_ddiv+0x1cc>
 8000dce:	42ae      	cmp	r6, r5
 8000dd0:	d800      	bhi.n	8000dd4 <__aeabi_ddiv+0x518>
 8000dd2:	e659      	b.n	8000a88 <__aeabi_ddiv+0x1cc>
 8000dd4:	2302      	movs	r3, #2
 8000dd6:	425b      	negs	r3, r3
 8000dd8:	469c      	mov	ip, r3
 8000dda:	9b00      	ldr	r3, [sp, #0]
 8000ddc:	44e0      	add	r8, ip
 8000dde:	469c      	mov	ip, r3
 8000de0:	4465      	add	r5, ip
 8000de2:	429d      	cmp	r5, r3
 8000de4:	419b      	sbcs	r3, r3
 8000de6:	425b      	negs	r3, r3
 8000de8:	191b      	adds	r3, r3, r4
 8000dea:	18c0      	adds	r0, r0, r3
 8000dec:	e64d      	b.n	8000a8a <__aeabi_ddiv+0x1ce>
 8000dee:	428a      	cmp	r2, r1
 8000df0:	d800      	bhi.n	8000df4 <__aeabi_ddiv+0x538>
 8000df2:	e60e      	b.n	8000a12 <__aeabi_ddiv+0x156>
 8000df4:	1e83      	subs	r3, r0, #2
 8000df6:	1909      	adds	r1, r1, r4
 8000df8:	e60b      	b.n	8000a12 <__aeabi_ddiv+0x156>
 8000dfa:	428a      	cmp	r2, r1
 8000dfc:	d800      	bhi.n	8000e00 <__aeabi_ddiv+0x544>
 8000dfe:	e5f4      	b.n	80009ea <__aeabi_ddiv+0x12e>
 8000e00:	1e83      	subs	r3, r0, #2
 8000e02:	4698      	mov	r8, r3
 8000e04:	1909      	adds	r1, r1, r4
 8000e06:	e5f0      	b.n	80009ea <__aeabi_ddiv+0x12e>
 8000e08:	4925      	ldr	r1, [pc, #148]	; (8000ea0 <__aeabi_ddiv+0x5e4>)
 8000e0a:	0028      	movs	r0, r5
 8000e0c:	4459      	add	r1, fp
 8000e0e:	408d      	lsls	r5, r1
 8000e10:	4642      	mov	r2, r8
 8000e12:	408a      	lsls	r2, r1
 8000e14:	1e69      	subs	r1, r5, #1
 8000e16:	418d      	sbcs	r5, r1
 8000e18:	4641      	mov	r1, r8
 8000e1a:	40d8      	lsrs	r0, r3
 8000e1c:	40d9      	lsrs	r1, r3
 8000e1e:	4302      	orrs	r2, r0
 8000e20:	432a      	orrs	r2, r5
 8000e22:	000b      	movs	r3, r1
 8000e24:	0751      	lsls	r1, r2, #29
 8000e26:	d100      	bne.n	8000e2a <__aeabi_ddiv+0x56e>
 8000e28:	e751      	b.n	8000cce <__aeabi_ddiv+0x412>
 8000e2a:	210f      	movs	r1, #15
 8000e2c:	4011      	ands	r1, r2
 8000e2e:	2904      	cmp	r1, #4
 8000e30:	d000      	beq.n	8000e34 <__aeabi_ddiv+0x578>
 8000e32:	e746      	b.n	8000cc2 <__aeabi_ddiv+0x406>
 8000e34:	e74b      	b.n	8000cce <__aeabi_ddiv+0x412>
 8000e36:	0005      	movs	r5, r0
 8000e38:	428e      	cmp	r6, r1
 8000e3a:	d000      	beq.n	8000e3e <__aeabi_ddiv+0x582>
 8000e3c:	e66a      	b.n	8000b14 <__aeabi_ddiv+0x258>
 8000e3e:	9a00      	ldr	r2, [sp, #0]
 8000e40:	4293      	cmp	r3, r2
 8000e42:	d000      	beq.n	8000e46 <__aeabi_ddiv+0x58a>
 8000e44:	e666      	b.n	8000b14 <__aeabi_ddiv+0x258>
 8000e46:	e667      	b.n	8000b18 <__aeabi_ddiv+0x25c>
 8000e48:	4a16      	ldr	r2, [pc, #88]	; (8000ea4 <__aeabi_ddiv+0x5e8>)
 8000e4a:	445a      	add	r2, fp
 8000e4c:	2a00      	cmp	r2, #0
 8000e4e:	dc00      	bgt.n	8000e52 <__aeabi_ddiv+0x596>
 8000e50:	e710      	b.n	8000c74 <__aeabi_ddiv+0x3b8>
 8000e52:	2301      	movs	r3, #1
 8000e54:	2500      	movs	r5, #0
 8000e56:	4498      	add	r8, r3
 8000e58:	e667      	b.n	8000b2a <__aeabi_ddiv+0x26e>
 8000e5a:	075d      	lsls	r5, r3, #29
 8000e5c:	025b      	lsls	r3, r3, #9
 8000e5e:	0b1c      	lsrs	r4, r3, #12
 8000e60:	08d2      	lsrs	r2, r2, #3
 8000e62:	2300      	movs	r3, #0
 8000e64:	4315      	orrs	r5, r2
 8000e66:	e580      	b.n	800096a <__aeabi_ddiv+0xae>
 8000e68:	9800      	ldr	r0, [sp, #0]
 8000e6a:	3d02      	subs	r5, #2
 8000e6c:	0042      	lsls	r2, r0, #1
 8000e6e:	4282      	cmp	r2, r0
 8000e70:	41bf      	sbcs	r7, r7
 8000e72:	427f      	negs	r7, r7
 8000e74:	193c      	adds	r4, r7, r4
 8000e76:	1936      	adds	r6, r6, r4
 8000e78:	9200      	str	r2, [sp, #0]
 8000e7a:	e7dd      	b.n	8000e38 <__aeabi_ddiv+0x57c>
 8000e7c:	2480      	movs	r4, #128	; 0x80
 8000e7e:	4643      	mov	r3, r8
 8000e80:	0324      	lsls	r4, r4, #12
 8000e82:	431c      	orrs	r4, r3
 8000e84:	0324      	lsls	r4, r4, #12
 8000e86:	4b04      	ldr	r3, [pc, #16]	; (8000e98 <__aeabi_ddiv+0x5dc>)
 8000e88:	0b24      	lsrs	r4, r4, #12
 8000e8a:	e56e      	b.n	800096a <__aeabi_ddiv+0xae>
 8000e8c:	9a00      	ldr	r2, [sp, #0]
 8000e8e:	429a      	cmp	r2, r3
 8000e90:	d3ea      	bcc.n	8000e68 <__aeabi_ddiv+0x5ac>
 8000e92:	0005      	movs	r5, r0
 8000e94:	e7d3      	b.n	8000e3e <__aeabi_ddiv+0x582>
 8000e96:	46c0      	nop			; (mov r8, r8)
 8000e98:	000007ff 	.word	0x000007ff
 8000e9c:	0000043e 	.word	0x0000043e
 8000ea0:	0000041e 	.word	0x0000041e
 8000ea4:	000003ff 	.word	0x000003ff

08000ea8 <__aeabi_dmul>:
 8000ea8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000eaa:	4657      	mov	r7, sl
 8000eac:	464e      	mov	r6, r9
 8000eae:	4645      	mov	r5, r8
 8000eb0:	46de      	mov	lr, fp
 8000eb2:	b5e0      	push	{r5, r6, r7, lr}
 8000eb4:	4698      	mov	r8, r3
 8000eb6:	030c      	lsls	r4, r1, #12
 8000eb8:	004b      	lsls	r3, r1, #1
 8000eba:	0006      	movs	r6, r0
 8000ebc:	4692      	mov	sl, r2
 8000ebe:	b087      	sub	sp, #28
 8000ec0:	0b24      	lsrs	r4, r4, #12
 8000ec2:	0d5b      	lsrs	r3, r3, #21
 8000ec4:	0fcf      	lsrs	r7, r1, #31
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d100      	bne.n	8000ecc <__aeabi_dmul+0x24>
 8000eca:	e15c      	b.n	8001186 <__aeabi_dmul+0x2de>
 8000ecc:	4ad9      	ldr	r2, [pc, #868]	; (8001234 <__aeabi_dmul+0x38c>)
 8000ece:	4293      	cmp	r3, r2
 8000ed0:	d100      	bne.n	8000ed4 <__aeabi_dmul+0x2c>
 8000ed2:	e175      	b.n	80011c0 <__aeabi_dmul+0x318>
 8000ed4:	0f42      	lsrs	r2, r0, #29
 8000ed6:	00e4      	lsls	r4, r4, #3
 8000ed8:	4314      	orrs	r4, r2
 8000eda:	2280      	movs	r2, #128	; 0x80
 8000edc:	0412      	lsls	r2, r2, #16
 8000ede:	4314      	orrs	r4, r2
 8000ee0:	4ad5      	ldr	r2, [pc, #852]	; (8001238 <__aeabi_dmul+0x390>)
 8000ee2:	00c5      	lsls	r5, r0, #3
 8000ee4:	4694      	mov	ip, r2
 8000ee6:	4463      	add	r3, ip
 8000ee8:	9300      	str	r3, [sp, #0]
 8000eea:	2300      	movs	r3, #0
 8000eec:	4699      	mov	r9, r3
 8000eee:	469b      	mov	fp, r3
 8000ef0:	4643      	mov	r3, r8
 8000ef2:	4642      	mov	r2, r8
 8000ef4:	031e      	lsls	r6, r3, #12
 8000ef6:	0fd2      	lsrs	r2, r2, #31
 8000ef8:	005b      	lsls	r3, r3, #1
 8000efa:	4650      	mov	r0, sl
 8000efc:	4690      	mov	r8, r2
 8000efe:	0b36      	lsrs	r6, r6, #12
 8000f00:	0d5b      	lsrs	r3, r3, #21
 8000f02:	d100      	bne.n	8000f06 <__aeabi_dmul+0x5e>
 8000f04:	e120      	b.n	8001148 <__aeabi_dmul+0x2a0>
 8000f06:	4acb      	ldr	r2, [pc, #812]	; (8001234 <__aeabi_dmul+0x38c>)
 8000f08:	4293      	cmp	r3, r2
 8000f0a:	d100      	bne.n	8000f0e <__aeabi_dmul+0x66>
 8000f0c:	e162      	b.n	80011d4 <__aeabi_dmul+0x32c>
 8000f0e:	49ca      	ldr	r1, [pc, #808]	; (8001238 <__aeabi_dmul+0x390>)
 8000f10:	0f42      	lsrs	r2, r0, #29
 8000f12:	468c      	mov	ip, r1
 8000f14:	9900      	ldr	r1, [sp, #0]
 8000f16:	4463      	add	r3, ip
 8000f18:	00f6      	lsls	r6, r6, #3
 8000f1a:	468c      	mov	ip, r1
 8000f1c:	4316      	orrs	r6, r2
 8000f1e:	2280      	movs	r2, #128	; 0x80
 8000f20:	449c      	add	ip, r3
 8000f22:	0412      	lsls	r2, r2, #16
 8000f24:	4663      	mov	r3, ip
 8000f26:	4316      	orrs	r6, r2
 8000f28:	00c2      	lsls	r2, r0, #3
 8000f2a:	2000      	movs	r0, #0
 8000f2c:	9300      	str	r3, [sp, #0]
 8000f2e:	9900      	ldr	r1, [sp, #0]
 8000f30:	4643      	mov	r3, r8
 8000f32:	3101      	adds	r1, #1
 8000f34:	468c      	mov	ip, r1
 8000f36:	4649      	mov	r1, r9
 8000f38:	407b      	eors	r3, r7
 8000f3a:	9301      	str	r3, [sp, #4]
 8000f3c:	290f      	cmp	r1, #15
 8000f3e:	d826      	bhi.n	8000f8e <__aeabi_dmul+0xe6>
 8000f40:	4bbe      	ldr	r3, [pc, #760]	; (800123c <__aeabi_dmul+0x394>)
 8000f42:	0089      	lsls	r1, r1, #2
 8000f44:	5859      	ldr	r1, [r3, r1]
 8000f46:	468f      	mov	pc, r1
 8000f48:	4643      	mov	r3, r8
 8000f4a:	9301      	str	r3, [sp, #4]
 8000f4c:	0034      	movs	r4, r6
 8000f4e:	0015      	movs	r5, r2
 8000f50:	4683      	mov	fp, r0
 8000f52:	465b      	mov	r3, fp
 8000f54:	2b02      	cmp	r3, #2
 8000f56:	d016      	beq.n	8000f86 <__aeabi_dmul+0xde>
 8000f58:	2b03      	cmp	r3, #3
 8000f5a:	d100      	bne.n	8000f5e <__aeabi_dmul+0xb6>
 8000f5c:	e203      	b.n	8001366 <__aeabi_dmul+0x4be>
 8000f5e:	2b01      	cmp	r3, #1
 8000f60:	d000      	beq.n	8000f64 <__aeabi_dmul+0xbc>
 8000f62:	e0cd      	b.n	8001100 <__aeabi_dmul+0x258>
 8000f64:	2200      	movs	r2, #0
 8000f66:	2400      	movs	r4, #0
 8000f68:	2500      	movs	r5, #0
 8000f6a:	9b01      	ldr	r3, [sp, #4]
 8000f6c:	0512      	lsls	r2, r2, #20
 8000f6e:	4322      	orrs	r2, r4
 8000f70:	07db      	lsls	r3, r3, #31
 8000f72:	431a      	orrs	r2, r3
 8000f74:	0028      	movs	r0, r5
 8000f76:	0011      	movs	r1, r2
 8000f78:	b007      	add	sp, #28
 8000f7a:	bcf0      	pop	{r4, r5, r6, r7}
 8000f7c:	46bb      	mov	fp, r7
 8000f7e:	46b2      	mov	sl, r6
 8000f80:	46a9      	mov	r9, r5
 8000f82:	46a0      	mov	r8, r4
 8000f84:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000f86:	2400      	movs	r4, #0
 8000f88:	2500      	movs	r5, #0
 8000f8a:	4aaa      	ldr	r2, [pc, #680]	; (8001234 <__aeabi_dmul+0x38c>)
 8000f8c:	e7ed      	b.n	8000f6a <__aeabi_dmul+0xc2>
 8000f8e:	0c28      	lsrs	r0, r5, #16
 8000f90:	042d      	lsls	r5, r5, #16
 8000f92:	0c2d      	lsrs	r5, r5, #16
 8000f94:	002b      	movs	r3, r5
 8000f96:	0c11      	lsrs	r1, r2, #16
 8000f98:	0412      	lsls	r2, r2, #16
 8000f9a:	0c12      	lsrs	r2, r2, #16
 8000f9c:	4353      	muls	r3, r2
 8000f9e:	4698      	mov	r8, r3
 8000fa0:	0013      	movs	r3, r2
 8000fa2:	002f      	movs	r7, r5
 8000fa4:	4343      	muls	r3, r0
 8000fa6:	4699      	mov	r9, r3
 8000fa8:	434f      	muls	r7, r1
 8000faa:	444f      	add	r7, r9
 8000fac:	46bb      	mov	fp, r7
 8000fae:	4647      	mov	r7, r8
 8000fb0:	000b      	movs	r3, r1
 8000fb2:	0c3f      	lsrs	r7, r7, #16
 8000fb4:	46ba      	mov	sl, r7
 8000fb6:	4343      	muls	r3, r0
 8000fb8:	44da      	add	sl, fp
 8000fba:	9302      	str	r3, [sp, #8]
 8000fbc:	45d1      	cmp	r9, sl
 8000fbe:	d904      	bls.n	8000fca <__aeabi_dmul+0x122>
 8000fc0:	2780      	movs	r7, #128	; 0x80
 8000fc2:	027f      	lsls	r7, r7, #9
 8000fc4:	46b9      	mov	r9, r7
 8000fc6:	444b      	add	r3, r9
 8000fc8:	9302      	str	r3, [sp, #8]
 8000fca:	4653      	mov	r3, sl
 8000fcc:	0c1b      	lsrs	r3, r3, #16
 8000fce:	469b      	mov	fp, r3
 8000fd0:	4653      	mov	r3, sl
 8000fd2:	041f      	lsls	r7, r3, #16
 8000fd4:	4643      	mov	r3, r8
 8000fd6:	041b      	lsls	r3, r3, #16
 8000fd8:	0c1b      	lsrs	r3, r3, #16
 8000fda:	4698      	mov	r8, r3
 8000fdc:	003b      	movs	r3, r7
 8000fde:	4443      	add	r3, r8
 8000fe0:	9304      	str	r3, [sp, #16]
 8000fe2:	0c33      	lsrs	r3, r6, #16
 8000fe4:	0436      	lsls	r6, r6, #16
 8000fe6:	0c36      	lsrs	r6, r6, #16
 8000fe8:	4698      	mov	r8, r3
 8000fea:	0033      	movs	r3, r6
 8000fec:	4343      	muls	r3, r0
 8000fee:	4699      	mov	r9, r3
 8000ff0:	4643      	mov	r3, r8
 8000ff2:	4343      	muls	r3, r0
 8000ff4:	002f      	movs	r7, r5
 8000ff6:	469a      	mov	sl, r3
 8000ff8:	4643      	mov	r3, r8
 8000ffa:	4377      	muls	r7, r6
 8000ffc:	435d      	muls	r5, r3
 8000ffe:	0c38      	lsrs	r0, r7, #16
 8001000:	444d      	add	r5, r9
 8001002:	1945      	adds	r5, r0, r5
 8001004:	45a9      	cmp	r9, r5
 8001006:	d903      	bls.n	8001010 <__aeabi_dmul+0x168>
 8001008:	2380      	movs	r3, #128	; 0x80
 800100a:	025b      	lsls	r3, r3, #9
 800100c:	4699      	mov	r9, r3
 800100e:	44ca      	add	sl, r9
 8001010:	043f      	lsls	r7, r7, #16
 8001012:	0c28      	lsrs	r0, r5, #16
 8001014:	0c3f      	lsrs	r7, r7, #16
 8001016:	042d      	lsls	r5, r5, #16
 8001018:	19ed      	adds	r5, r5, r7
 800101a:	0c27      	lsrs	r7, r4, #16
 800101c:	0424      	lsls	r4, r4, #16
 800101e:	0c24      	lsrs	r4, r4, #16
 8001020:	0003      	movs	r3, r0
 8001022:	0020      	movs	r0, r4
 8001024:	4350      	muls	r0, r2
 8001026:	437a      	muls	r2, r7
 8001028:	4691      	mov	r9, r2
 800102a:	003a      	movs	r2, r7
 800102c:	4453      	add	r3, sl
 800102e:	9305      	str	r3, [sp, #20]
 8001030:	0c03      	lsrs	r3, r0, #16
 8001032:	469a      	mov	sl, r3
 8001034:	434a      	muls	r2, r1
 8001036:	4361      	muls	r1, r4
 8001038:	4449      	add	r1, r9
 800103a:	4451      	add	r1, sl
 800103c:	44ab      	add	fp, r5
 800103e:	4589      	cmp	r9, r1
 8001040:	d903      	bls.n	800104a <__aeabi_dmul+0x1a2>
 8001042:	2380      	movs	r3, #128	; 0x80
 8001044:	025b      	lsls	r3, r3, #9
 8001046:	4699      	mov	r9, r3
 8001048:	444a      	add	r2, r9
 800104a:	0400      	lsls	r0, r0, #16
 800104c:	0c0b      	lsrs	r3, r1, #16
 800104e:	0c00      	lsrs	r0, r0, #16
 8001050:	0409      	lsls	r1, r1, #16
 8001052:	1809      	adds	r1, r1, r0
 8001054:	0020      	movs	r0, r4
 8001056:	4699      	mov	r9, r3
 8001058:	4643      	mov	r3, r8
 800105a:	4370      	muls	r0, r6
 800105c:	435c      	muls	r4, r3
 800105e:	437e      	muls	r6, r7
 8001060:	435f      	muls	r7, r3
 8001062:	0c03      	lsrs	r3, r0, #16
 8001064:	4698      	mov	r8, r3
 8001066:	19a4      	adds	r4, r4, r6
 8001068:	4444      	add	r4, r8
 800106a:	444a      	add	r2, r9
 800106c:	9703      	str	r7, [sp, #12]
 800106e:	42a6      	cmp	r6, r4
 8001070:	d904      	bls.n	800107c <__aeabi_dmul+0x1d4>
 8001072:	2380      	movs	r3, #128	; 0x80
 8001074:	025b      	lsls	r3, r3, #9
 8001076:	4698      	mov	r8, r3
 8001078:	4447      	add	r7, r8
 800107a:	9703      	str	r7, [sp, #12]
 800107c:	0423      	lsls	r3, r4, #16
 800107e:	9e02      	ldr	r6, [sp, #8]
 8001080:	469a      	mov	sl, r3
 8001082:	9b05      	ldr	r3, [sp, #20]
 8001084:	445e      	add	r6, fp
 8001086:	4698      	mov	r8, r3
 8001088:	42ae      	cmp	r6, r5
 800108a:	41ad      	sbcs	r5, r5
 800108c:	1876      	adds	r6, r6, r1
 800108e:	428e      	cmp	r6, r1
 8001090:	4189      	sbcs	r1, r1
 8001092:	0400      	lsls	r0, r0, #16
 8001094:	0c00      	lsrs	r0, r0, #16
 8001096:	4450      	add	r0, sl
 8001098:	4440      	add	r0, r8
 800109a:	426d      	negs	r5, r5
 800109c:	1947      	adds	r7, r0, r5
 800109e:	46b8      	mov	r8, r7
 80010a0:	4693      	mov	fp, r2
 80010a2:	4249      	negs	r1, r1
 80010a4:	4689      	mov	r9, r1
 80010a6:	44c3      	add	fp, r8
 80010a8:	44d9      	add	r9, fp
 80010aa:	4298      	cmp	r0, r3
 80010ac:	4180      	sbcs	r0, r0
 80010ae:	45a8      	cmp	r8, r5
 80010b0:	41ad      	sbcs	r5, r5
 80010b2:	4593      	cmp	fp, r2
 80010b4:	4192      	sbcs	r2, r2
 80010b6:	4589      	cmp	r9, r1
 80010b8:	4189      	sbcs	r1, r1
 80010ba:	426d      	negs	r5, r5
 80010bc:	4240      	negs	r0, r0
 80010be:	4328      	orrs	r0, r5
 80010c0:	0c24      	lsrs	r4, r4, #16
 80010c2:	4252      	negs	r2, r2
 80010c4:	4249      	negs	r1, r1
 80010c6:	430a      	orrs	r2, r1
 80010c8:	9b03      	ldr	r3, [sp, #12]
 80010ca:	1900      	adds	r0, r0, r4
 80010cc:	1880      	adds	r0, r0, r2
 80010ce:	18c7      	adds	r7, r0, r3
 80010d0:	464b      	mov	r3, r9
 80010d2:	0ddc      	lsrs	r4, r3, #23
 80010d4:	9b04      	ldr	r3, [sp, #16]
 80010d6:	0275      	lsls	r5, r6, #9
 80010d8:	431d      	orrs	r5, r3
 80010da:	1e6a      	subs	r2, r5, #1
 80010dc:	4195      	sbcs	r5, r2
 80010de:	464b      	mov	r3, r9
 80010e0:	0df6      	lsrs	r6, r6, #23
 80010e2:	027f      	lsls	r7, r7, #9
 80010e4:	4335      	orrs	r5, r6
 80010e6:	025a      	lsls	r2, r3, #9
 80010e8:	433c      	orrs	r4, r7
 80010ea:	4315      	orrs	r5, r2
 80010ec:	01fb      	lsls	r3, r7, #7
 80010ee:	d400      	bmi.n	80010f2 <__aeabi_dmul+0x24a>
 80010f0:	e11c      	b.n	800132c <__aeabi_dmul+0x484>
 80010f2:	2101      	movs	r1, #1
 80010f4:	086a      	lsrs	r2, r5, #1
 80010f6:	400d      	ands	r5, r1
 80010f8:	4315      	orrs	r5, r2
 80010fa:	07e2      	lsls	r2, r4, #31
 80010fc:	4315      	orrs	r5, r2
 80010fe:	0864      	lsrs	r4, r4, #1
 8001100:	494f      	ldr	r1, [pc, #316]	; (8001240 <__aeabi_dmul+0x398>)
 8001102:	4461      	add	r1, ip
 8001104:	2900      	cmp	r1, #0
 8001106:	dc00      	bgt.n	800110a <__aeabi_dmul+0x262>
 8001108:	e0b0      	b.n	800126c <__aeabi_dmul+0x3c4>
 800110a:	076b      	lsls	r3, r5, #29
 800110c:	d009      	beq.n	8001122 <__aeabi_dmul+0x27a>
 800110e:	220f      	movs	r2, #15
 8001110:	402a      	ands	r2, r5
 8001112:	2a04      	cmp	r2, #4
 8001114:	d005      	beq.n	8001122 <__aeabi_dmul+0x27a>
 8001116:	1d2a      	adds	r2, r5, #4
 8001118:	42aa      	cmp	r2, r5
 800111a:	41ad      	sbcs	r5, r5
 800111c:	426d      	negs	r5, r5
 800111e:	1964      	adds	r4, r4, r5
 8001120:	0015      	movs	r5, r2
 8001122:	01e3      	lsls	r3, r4, #7
 8001124:	d504      	bpl.n	8001130 <__aeabi_dmul+0x288>
 8001126:	2180      	movs	r1, #128	; 0x80
 8001128:	4a46      	ldr	r2, [pc, #280]	; (8001244 <__aeabi_dmul+0x39c>)
 800112a:	00c9      	lsls	r1, r1, #3
 800112c:	4014      	ands	r4, r2
 800112e:	4461      	add	r1, ip
 8001130:	4a45      	ldr	r2, [pc, #276]	; (8001248 <__aeabi_dmul+0x3a0>)
 8001132:	4291      	cmp	r1, r2
 8001134:	dd00      	ble.n	8001138 <__aeabi_dmul+0x290>
 8001136:	e726      	b.n	8000f86 <__aeabi_dmul+0xde>
 8001138:	0762      	lsls	r2, r4, #29
 800113a:	08ed      	lsrs	r5, r5, #3
 800113c:	0264      	lsls	r4, r4, #9
 800113e:	0549      	lsls	r1, r1, #21
 8001140:	4315      	orrs	r5, r2
 8001142:	0b24      	lsrs	r4, r4, #12
 8001144:	0d4a      	lsrs	r2, r1, #21
 8001146:	e710      	b.n	8000f6a <__aeabi_dmul+0xc2>
 8001148:	4652      	mov	r2, sl
 800114a:	4332      	orrs	r2, r6
 800114c:	d100      	bne.n	8001150 <__aeabi_dmul+0x2a8>
 800114e:	e07f      	b.n	8001250 <__aeabi_dmul+0x3a8>
 8001150:	2e00      	cmp	r6, #0
 8001152:	d100      	bne.n	8001156 <__aeabi_dmul+0x2ae>
 8001154:	e0dc      	b.n	8001310 <__aeabi_dmul+0x468>
 8001156:	0030      	movs	r0, r6
 8001158:	f000 f978 	bl	800144c <__clzsi2>
 800115c:	0002      	movs	r2, r0
 800115e:	3a0b      	subs	r2, #11
 8001160:	231d      	movs	r3, #29
 8001162:	0001      	movs	r1, r0
 8001164:	1a9b      	subs	r3, r3, r2
 8001166:	4652      	mov	r2, sl
 8001168:	3908      	subs	r1, #8
 800116a:	40da      	lsrs	r2, r3
 800116c:	408e      	lsls	r6, r1
 800116e:	4316      	orrs	r6, r2
 8001170:	4652      	mov	r2, sl
 8001172:	408a      	lsls	r2, r1
 8001174:	9b00      	ldr	r3, [sp, #0]
 8001176:	4935      	ldr	r1, [pc, #212]	; (800124c <__aeabi_dmul+0x3a4>)
 8001178:	1a18      	subs	r0, r3, r0
 800117a:	0003      	movs	r3, r0
 800117c:	468c      	mov	ip, r1
 800117e:	4463      	add	r3, ip
 8001180:	2000      	movs	r0, #0
 8001182:	9300      	str	r3, [sp, #0]
 8001184:	e6d3      	b.n	8000f2e <__aeabi_dmul+0x86>
 8001186:	0025      	movs	r5, r4
 8001188:	4305      	orrs	r5, r0
 800118a:	d04a      	beq.n	8001222 <__aeabi_dmul+0x37a>
 800118c:	2c00      	cmp	r4, #0
 800118e:	d100      	bne.n	8001192 <__aeabi_dmul+0x2ea>
 8001190:	e0b0      	b.n	80012f4 <__aeabi_dmul+0x44c>
 8001192:	0020      	movs	r0, r4
 8001194:	f000 f95a 	bl	800144c <__clzsi2>
 8001198:	0001      	movs	r1, r0
 800119a:	0002      	movs	r2, r0
 800119c:	390b      	subs	r1, #11
 800119e:	231d      	movs	r3, #29
 80011a0:	0010      	movs	r0, r2
 80011a2:	1a5b      	subs	r3, r3, r1
 80011a4:	0031      	movs	r1, r6
 80011a6:	0035      	movs	r5, r6
 80011a8:	3808      	subs	r0, #8
 80011aa:	4084      	lsls	r4, r0
 80011ac:	40d9      	lsrs	r1, r3
 80011ae:	4085      	lsls	r5, r0
 80011b0:	430c      	orrs	r4, r1
 80011b2:	4826      	ldr	r0, [pc, #152]	; (800124c <__aeabi_dmul+0x3a4>)
 80011b4:	1a83      	subs	r3, r0, r2
 80011b6:	9300      	str	r3, [sp, #0]
 80011b8:	2300      	movs	r3, #0
 80011ba:	4699      	mov	r9, r3
 80011bc:	469b      	mov	fp, r3
 80011be:	e697      	b.n	8000ef0 <__aeabi_dmul+0x48>
 80011c0:	0005      	movs	r5, r0
 80011c2:	4325      	orrs	r5, r4
 80011c4:	d126      	bne.n	8001214 <__aeabi_dmul+0x36c>
 80011c6:	2208      	movs	r2, #8
 80011c8:	9300      	str	r3, [sp, #0]
 80011ca:	2302      	movs	r3, #2
 80011cc:	2400      	movs	r4, #0
 80011ce:	4691      	mov	r9, r2
 80011d0:	469b      	mov	fp, r3
 80011d2:	e68d      	b.n	8000ef0 <__aeabi_dmul+0x48>
 80011d4:	4652      	mov	r2, sl
 80011d6:	9b00      	ldr	r3, [sp, #0]
 80011d8:	4332      	orrs	r2, r6
 80011da:	d110      	bne.n	80011fe <__aeabi_dmul+0x356>
 80011dc:	4915      	ldr	r1, [pc, #84]	; (8001234 <__aeabi_dmul+0x38c>)
 80011de:	2600      	movs	r6, #0
 80011e0:	468c      	mov	ip, r1
 80011e2:	4463      	add	r3, ip
 80011e4:	4649      	mov	r1, r9
 80011e6:	9300      	str	r3, [sp, #0]
 80011e8:	2302      	movs	r3, #2
 80011ea:	4319      	orrs	r1, r3
 80011ec:	4689      	mov	r9, r1
 80011ee:	2002      	movs	r0, #2
 80011f0:	e69d      	b.n	8000f2e <__aeabi_dmul+0x86>
 80011f2:	465b      	mov	r3, fp
 80011f4:	9701      	str	r7, [sp, #4]
 80011f6:	2b02      	cmp	r3, #2
 80011f8:	d000      	beq.n	80011fc <__aeabi_dmul+0x354>
 80011fa:	e6ad      	b.n	8000f58 <__aeabi_dmul+0xb0>
 80011fc:	e6c3      	b.n	8000f86 <__aeabi_dmul+0xde>
 80011fe:	4a0d      	ldr	r2, [pc, #52]	; (8001234 <__aeabi_dmul+0x38c>)
 8001200:	2003      	movs	r0, #3
 8001202:	4694      	mov	ip, r2
 8001204:	4463      	add	r3, ip
 8001206:	464a      	mov	r2, r9
 8001208:	9300      	str	r3, [sp, #0]
 800120a:	2303      	movs	r3, #3
 800120c:	431a      	orrs	r2, r3
 800120e:	4691      	mov	r9, r2
 8001210:	4652      	mov	r2, sl
 8001212:	e68c      	b.n	8000f2e <__aeabi_dmul+0x86>
 8001214:	220c      	movs	r2, #12
 8001216:	9300      	str	r3, [sp, #0]
 8001218:	2303      	movs	r3, #3
 800121a:	0005      	movs	r5, r0
 800121c:	4691      	mov	r9, r2
 800121e:	469b      	mov	fp, r3
 8001220:	e666      	b.n	8000ef0 <__aeabi_dmul+0x48>
 8001222:	2304      	movs	r3, #4
 8001224:	4699      	mov	r9, r3
 8001226:	2300      	movs	r3, #0
 8001228:	9300      	str	r3, [sp, #0]
 800122a:	3301      	adds	r3, #1
 800122c:	2400      	movs	r4, #0
 800122e:	469b      	mov	fp, r3
 8001230:	e65e      	b.n	8000ef0 <__aeabi_dmul+0x48>
 8001232:	46c0      	nop			; (mov r8, r8)
 8001234:	000007ff 	.word	0x000007ff
 8001238:	fffffc01 	.word	0xfffffc01
 800123c:	080056cc 	.word	0x080056cc
 8001240:	000003ff 	.word	0x000003ff
 8001244:	feffffff 	.word	0xfeffffff
 8001248:	000007fe 	.word	0x000007fe
 800124c:	fffffc0d 	.word	0xfffffc0d
 8001250:	4649      	mov	r1, r9
 8001252:	2301      	movs	r3, #1
 8001254:	4319      	orrs	r1, r3
 8001256:	4689      	mov	r9, r1
 8001258:	2600      	movs	r6, #0
 800125a:	2001      	movs	r0, #1
 800125c:	e667      	b.n	8000f2e <__aeabi_dmul+0x86>
 800125e:	2300      	movs	r3, #0
 8001260:	2480      	movs	r4, #128	; 0x80
 8001262:	2500      	movs	r5, #0
 8001264:	4a43      	ldr	r2, [pc, #268]	; (8001374 <__aeabi_dmul+0x4cc>)
 8001266:	9301      	str	r3, [sp, #4]
 8001268:	0324      	lsls	r4, r4, #12
 800126a:	e67e      	b.n	8000f6a <__aeabi_dmul+0xc2>
 800126c:	2001      	movs	r0, #1
 800126e:	1a40      	subs	r0, r0, r1
 8001270:	2838      	cmp	r0, #56	; 0x38
 8001272:	dd00      	ble.n	8001276 <__aeabi_dmul+0x3ce>
 8001274:	e676      	b.n	8000f64 <__aeabi_dmul+0xbc>
 8001276:	281f      	cmp	r0, #31
 8001278:	dd5b      	ble.n	8001332 <__aeabi_dmul+0x48a>
 800127a:	221f      	movs	r2, #31
 800127c:	0023      	movs	r3, r4
 800127e:	4252      	negs	r2, r2
 8001280:	1a51      	subs	r1, r2, r1
 8001282:	40cb      	lsrs	r3, r1
 8001284:	0019      	movs	r1, r3
 8001286:	2820      	cmp	r0, #32
 8001288:	d003      	beq.n	8001292 <__aeabi_dmul+0x3ea>
 800128a:	4a3b      	ldr	r2, [pc, #236]	; (8001378 <__aeabi_dmul+0x4d0>)
 800128c:	4462      	add	r2, ip
 800128e:	4094      	lsls	r4, r2
 8001290:	4325      	orrs	r5, r4
 8001292:	1e6a      	subs	r2, r5, #1
 8001294:	4195      	sbcs	r5, r2
 8001296:	002a      	movs	r2, r5
 8001298:	430a      	orrs	r2, r1
 800129a:	2107      	movs	r1, #7
 800129c:	000d      	movs	r5, r1
 800129e:	2400      	movs	r4, #0
 80012a0:	4015      	ands	r5, r2
 80012a2:	4211      	tst	r1, r2
 80012a4:	d05b      	beq.n	800135e <__aeabi_dmul+0x4b6>
 80012a6:	210f      	movs	r1, #15
 80012a8:	2400      	movs	r4, #0
 80012aa:	4011      	ands	r1, r2
 80012ac:	2904      	cmp	r1, #4
 80012ae:	d053      	beq.n	8001358 <__aeabi_dmul+0x4b0>
 80012b0:	1d11      	adds	r1, r2, #4
 80012b2:	4291      	cmp	r1, r2
 80012b4:	4192      	sbcs	r2, r2
 80012b6:	4252      	negs	r2, r2
 80012b8:	18a4      	adds	r4, r4, r2
 80012ba:	000a      	movs	r2, r1
 80012bc:	0223      	lsls	r3, r4, #8
 80012be:	d54b      	bpl.n	8001358 <__aeabi_dmul+0x4b0>
 80012c0:	2201      	movs	r2, #1
 80012c2:	2400      	movs	r4, #0
 80012c4:	2500      	movs	r5, #0
 80012c6:	e650      	b.n	8000f6a <__aeabi_dmul+0xc2>
 80012c8:	2380      	movs	r3, #128	; 0x80
 80012ca:	031b      	lsls	r3, r3, #12
 80012cc:	421c      	tst	r4, r3
 80012ce:	d009      	beq.n	80012e4 <__aeabi_dmul+0x43c>
 80012d0:	421e      	tst	r6, r3
 80012d2:	d107      	bne.n	80012e4 <__aeabi_dmul+0x43c>
 80012d4:	4333      	orrs	r3, r6
 80012d6:	031c      	lsls	r4, r3, #12
 80012d8:	4643      	mov	r3, r8
 80012da:	0015      	movs	r5, r2
 80012dc:	0b24      	lsrs	r4, r4, #12
 80012de:	4a25      	ldr	r2, [pc, #148]	; (8001374 <__aeabi_dmul+0x4cc>)
 80012e0:	9301      	str	r3, [sp, #4]
 80012e2:	e642      	b.n	8000f6a <__aeabi_dmul+0xc2>
 80012e4:	2280      	movs	r2, #128	; 0x80
 80012e6:	0312      	lsls	r2, r2, #12
 80012e8:	4314      	orrs	r4, r2
 80012ea:	0324      	lsls	r4, r4, #12
 80012ec:	4a21      	ldr	r2, [pc, #132]	; (8001374 <__aeabi_dmul+0x4cc>)
 80012ee:	0b24      	lsrs	r4, r4, #12
 80012f0:	9701      	str	r7, [sp, #4]
 80012f2:	e63a      	b.n	8000f6a <__aeabi_dmul+0xc2>
 80012f4:	f000 f8aa 	bl	800144c <__clzsi2>
 80012f8:	0001      	movs	r1, r0
 80012fa:	0002      	movs	r2, r0
 80012fc:	3115      	adds	r1, #21
 80012fe:	3220      	adds	r2, #32
 8001300:	291c      	cmp	r1, #28
 8001302:	dc00      	bgt.n	8001306 <__aeabi_dmul+0x45e>
 8001304:	e74b      	b.n	800119e <__aeabi_dmul+0x2f6>
 8001306:	0034      	movs	r4, r6
 8001308:	3808      	subs	r0, #8
 800130a:	2500      	movs	r5, #0
 800130c:	4084      	lsls	r4, r0
 800130e:	e750      	b.n	80011b2 <__aeabi_dmul+0x30a>
 8001310:	f000 f89c 	bl	800144c <__clzsi2>
 8001314:	0003      	movs	r3, r0
 8001316:	001a      	movs	r2, r3
 8001318:	3215      	adds	r2, #21
 800131a:	3020      	adds	r0, #32
 800131c:	2a1c      	cmp	r2, #28
 800131e:	dc00      	bgt.n	8001322 <__aeabi_dmul+0x47a>
 8001320:	e71e      	b.n	8001160 <__aeabi_dmul+0x2b8>
 8001322:	4656      	mov	r6, sl
 8001324:	3b08      	subs	r3, #8
 8001326:	2200      	movs	r2, #0
 8001328:	409e      	lsls	r6, r3
 800132a:	e723      	b.n	8001174 <__aeabi_dmul+0x2cc>
 800132c:	9b00      	ldr	r3, [sp, #0]
 800132e:	469c      	mov	ip, r3
 8001330:	e6e6      	b.n	8001100 <__aeabi_dmul+0x258>
 8001332:	4912      	ldr	r1, [pc, #72]	; (800137c <__aeabi_dmul+0x4d4>)
 8001334:	0022      	movs	r2, r4
 8001336:	4461      	add	r1, ip
 8001338:	002e      	movs	r6, r5
 800133a:	408d      	lsls	r5, r1
 800133c:	408a      	lsls	r2, r1
 800133e:	40c6      	lsrs	r6, r0
 8001340:	1e69      	subs	r1, r5, #1
 8001342:	418d      	sbcs	r5, r1
 8001344:	4332      	orrs	r2, r6
 8001346:	432a      	orrs	r2, r5
 8001348:	40c4      	lsrs	r4, r0
 800134a:	0753      	lsls	r3, r2, #29
 800134c:	d0b6      	beq.n	80012bc <__aeabi_dmul+0x414>
 800134e:	210f      	movs	r1, #15
 8001350:	4011      	ands	r1, r2
 8001352:	2904      	cmp	r1, #4
 8001354:	d1ac      	bne.n	80012b0 <__aeabi_dmul+0x408>
 8001356:	e7b1      	b.n	80012bc <__aeabi_dmul+0x414>
 8001358:	0765      	lsls	r5, r4, #29
 800135a:	0264      	lsls	r4, r4, #9
 800135c:	0b24      	lsrs	r4, r4, #12
 800135e:	08d2      	lsrs	r2, r2, #3
 8001360:	4315      	orrs	r5, r2
 8001362:	2200      	movs	r2, #0
 8001364:	e601      	b.n	8000f6a <__aeabi_dmul+0xc2>
 8001366:	2280      	movs	r2, #128	; 0x80
 8001368:	0312      	lsls	r2, r2, #12
 800136a:	4314      	orrs	r4, r2
 800136c:	0324      	lsls	r4, r4, #12
 800136e:	4a01      	ldr	r2, [pc, #4]	; (8001374 <__aeabi_dmul+0x4cc>)
 8001370:	0b24      	lsrs	r4, r4, #12
 8001372:	e5fa      	b.n	8000f6a <__aeabi_dmul+0xc2>
 8001374:	000007ff 	.word	0x000007ff
 8001378:	0000043e 	.word	0x0000043e
 800137c:	0000041e 	.word	0x0000041e

08001380 <__aeabi_d2iz>:
 8001380:	000a      	movs	r2, r1
 8001382:	b530      	push	{r4, r5, lr}
 8001384:	4c13      	ldr	r4, [pc, #76]	; (80013d4 <__aeabi_d2iz+0x54>)
 8001386:	0053      	lsls	r3, r2, #1
 8001388:	0309      	lsls	r1, r1, #12
 800138a:	0005      	movs	r5, r0
 800138c:	0b09      	lsrs	r1, r1, #12
 800138e:	2000      	movs	r0, #0
 8001390:	0d5b      	lsrs	r3, r3, #21
 8001392:	0fd2      	lsrs	r2, r2, #31
 8001394:	42a3      	cmp	r3, r4
 8001396:	dd04      	ble.n	80013a2 <__aeabi_d2iz+0x22>
 8001398:	480f      	ldr	r0, [pc, #60]	; (80013d8 <__aeabi_d2iz+0x58>)
 800139a:	4283      	cmp	r3, r0
 800139c:	dd02      	ble.n	80013a4 <__aeabi_d2iz+0x24>
 800139e:	4b0f      	ldr	r3, [pc, #60]	; (80013dc <__aeabi_d2iz+0x5c>)
 80013a0:	18d0      	adds	r0, r2, r3
 80013a2:	bd30      	pop	{r4, r5, pc}
 80013a4:	2080      	movs	r0, #128	; 0x80
 80013a6:	0340      	lsls	r0, r0, #13
 80013a8:	4301      	orrs	r1, r0
 80013aa:	480d      	ldr	r0, [pc, #52]	; (80013e0 <__aeabi_d2iz+0x60>)
 80013ac:	1ac0      	subs	r0, r0, r3
 80013ae:	281f      	cmp	r0, #31
 80013b0:	dd08      	ble.n	80013c4 <__aeabi_d2iz+0x44>
 80013b2:	480c      	ldr	r0, [pc, #48]	; (80013e4 <__aeabi_d2iz+0x64>)
 80013b4:	1ac3      	subs	r3, r0, r3
 80013b6:	40d9      	lsrs	r1, r3
 80013b8:	000b      	movs	r3, r1
 80013ba:	4258      	negs	r0, r3
 80013bc:	2a00      	cmp	r2, #0
 80013be:	d1f0      	bne.n	80013a2 <__aeabi_d2iz+0x22>
 80013c0:	0018      	movs	r0, r3
 80013c2:	e7ee      	b.n	80013a2 <__aeabi_d2iz+0x22>
 80013c4:	4c08      	ldr	r4, [pc, #32]	; (80013e8 <__aeabi_d2iz+0x68>)
 80013c6:	40c5      	lsrs	r5, r0
 80013c8:	46a4      	mov	ip, r4
 80013ca:	4463      	add	r3, ip
 80013cc:	4099      	lsls	r1, r3
 80013ce:	000b      	movs	r3, r1
 80013d0:	432b      	orrs	r3, r5
 80013d2:	e7f2      	b.n	80013ba <__aeabi_d2iz+0x3a>
 80013d4:	000003fe 	.word	0x000003fe
 80013d8:	0000041d 	.word	0x0000041d
 80013dc:	7fffffff 	.word	0x7fffffff
 80013e0:	00000433 	.word	0x00000433
 80013e4:	00000413 	.word	0x00000413
 80013e8:	fffffbed 	.word	0xfffffbed

080013ec <__aeabi_i2d>:
 80013ec:	b570      	push	{r4, r5, r6, lr}
 80013ee:	2800      	cmp	r0, #0
 80013f0:	d016      	beq.n	8001420 <__aeabi_i2d+0x34>
 80013f2:	17c3      	asrs	r3, r0, #31
 80013f4:	18c5      	adds	r5, r0, r3
 80013f6:	405d      	eors	r5, r3
 80013f8:	0fc4      	lsrs	r4, r0, #31
 80013fa:	0028      	movs	r0, r5
 80013fc:	f000 f826 	bl	800144c <__clzsi2>
 8001400:	4a11      	ldr	r2, [pc, #68]	; (8001448 <__aeabi_i2d+0x5c>)
 8001402:	1a12      	subs	r2, r2, r0
 8001404:	280a      	cmp	r0, #10
 8001406:	dc16      	bgt.n	8001436 <__aeabi_i2d+0x4a>
 8001408:	0003      	movs	r3, r0
 800140a:	002e      	movs	r6, r5
 800140c:	3315      	adds	r3, #21
 800140e:	409e      	lsls	r6, r3
 8001410:	230b      	movs	r3, #11
 8001412:	1a18      	subs	r0, r3, r0
 8001414:	40c5      	lsrs	r5, r0
 8001416:	0552      	lsls	r2, r2, #21
 8001418:	032d      	lsls	r5, r5, #12
 800141a:	0b2d      	lsrs	r5, r5, #12
 800141c:	0d53      	lsrs	r3, r2, #21
 800141e:	e003      	b.n	8001428 <__aeabi_i2d+0x3c>
 8001420:	2400      	movs	r4, #0
 8001422:	2300      	movs	r3, #0
 8001424:	2500      	movs	r5, #0
 8001426:	2600      	movs	r6, #0
 8001428:	051b      	lsls	r3, r3, #20
 800142a:	432b      	orrs	r3, r5
 800142c:	07e4      	lsls	r4, r4, #31
 800142e:	4323      	orrs	r3, r4
 8001430:	0030      	movs	r0, r6
 8001432:	0019      	movs	r1, r3
 8001434:	bd70      	pop	{r4, r5, r6, pc}
 8001436:	380b      	subs	r0, #11
 8001438:	4085      	lsls	r5, r0
 800143a:	0552      	lsls	r2, r2, #21
 800143c:	032d      	lsls	r5, r5, #12
 800143e:	2600      	movs	r6, #0
 8001440:	0b2d      	lsrs	r5, r5, #12
 8001442:	0d53      	lsrs	r3, r2, #21
 8001444:	e7f0      	b.n	8001428 <__aeabi_i2d+0x3c>
 8001446:	46c0      	nop			; (mov r8, r8)
 8001448:	0000041e 	.word	0x0000041e

0800144c <__clzsi2>:
 800144c:	211c      	movs	r1, #28
 800144e:	2301      	movs	r3, #1
 8001450:	041b      	lsls	r3, r3, #16
 8001452:	4298      	cmp	r0, r3
 8001454:	d301      	bcc.n	800145a <__clzsi2+0xe>
 8001456:	0c00      	lsrs	r0, r0, #16
 8001458:	3910      	subs	r1, #16
 800145a:	0a1b      	lsrs	r3, r3, #8
 800145c:	4298      	cmp	r0, r3
 800145e:	d301      	bcc.n	8001464 <__clzsi2+0x18>
 8001460:	0a00      	lsrs	r0, r0, #8
 8001462:	3908      	subs	r1, #8
 8001464:	091b      	lsrs	r3, r3, #4
 8001466:	4298      	cmp	r0, r3
 8001468:	d301      	bcc.n	800146e <__clzsi2+0x22>
 800146a:	0900      	lsrs	r0, r0, #4
 800146c:	3904      	subs	r1, #4
 800146e:	a202      	add	r2, pc, #8	; (adr r2, 8001478 <__clzsi2+0x2c>)
 8001470:	5c10      	ldrb	r0, [r2, r0]
 8001472:	1840      	adds	r0, r0, r1
 8001474:	4770      	bx	lr
 8001476:	46c0      	nop			; (mov r8, r8)
 8001478:	02020304 	.word	0x02020304
 800147c:	01010101 	.word	0x01010101
	...

08001488 <debugPrintln>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void debugPrintln(char _out[]){
 8001488:	b580      	push	{r7, lr}
 800148a:	b084      	sub	sp, #16
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t *) _out, strlen(_out), 10);
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	0018      	movs	r0, r3
 8001494:	f7fe fe38 	bl	8000108 <strlen>
 8001498:	0003      	movs	r3, r0
 800149a:	b29a      	uxth	r2, r3
 800149c:	6879      	ldr	r1, [r7, #4]
 800149e:	4809      	ldr	r0, [pc, #36]	; (80014c4 <debugPrintln+0x3c>)
 80014a0:	230a      	movs	r3, #10
 80014a2:	f003 f88f 	bl	80045c4 <HAL_UART_Transmit>
	char newline[2] = "\r\n";
 80014a6:	210c      	movs	r1, #12
 80014a8:	187b      	adds	r3, r7, r1
 80014aa:	4a07      	ldr	r2, [pc, #28]	; (80014c8 <debugPrintln+0x40>)
 80014ac:	801a      	strh	r2, [r3, #0]
	HAL_UART_Transmit(&huart2, (uint8_t *) newline, 2, 10);
 80014ae:	1879      	adds	r1, r7, r1
 80014b0:	4804      	ldr	r0, [pc, #16]	; (80014c4 <debugPrintln+0x3c>)
 80014b2:	230a      	movs	r3, #10
 80014b4:	2202      	movs	r2, #2
 80014b6:	f003 f885 	bl	80045c4 <HAL_UART_Transmit>
}
 80014ba:	46c0      	nop			; (mov r8, r8)
 80014bc:	46bd      	mov	sp, r7
 80014be:	b004      	add	sp, #16
 80014c0:	bd80      	pop	{r7, pc}
 80014c2:	46c0      	nop			; (mov r8, r8)
 80014c4:	20000158 	.word	0x20000158
 80014c8:	00000a0d 	.word	0x00000a0d

080014cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80014cc:	b5b0      	push	{r4, r5, r7, lr}
 80014ce:	b08c      	sub	sp, #48	; 0x30
 80014d0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80014d2:	f000 fc37 	bl	8001d44 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80014d6:	f000 f871 	bl	80015bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80014da:	f000 f9e9 	bl	80018b0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80014de:	f000 f999 	bl	8001814 <MX_USART2_UART_Init>
  MX_DMA_Init();
 80014e2:	f000 f9c7 	bl	8001874 <MX_DMA_Init>
  MX_TIM3_Init();
 80014e6:	f000 f915 	bl	8001714 <MX_TIM3_Init>
  MX_ADC_Init();
 80014ea:	f000 f8b7 	bl	800165c <MX_ADC_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80014ee:	4b2e      	ldr	r3, [pc, #184]	; (80015a8 <main+0xdc>)
 80014f0:	2100      	movs	r1, #0
 80014f2:	0018      	movs	r0, r3
 80014f4:	f002 fa3e 	bl	8003974 <HAL_TIM_PWM_Start>
  // Calibrate The ADC On Power-Up For Better Accuracy
  HAL_ADCEx_Calibration_Start(&hadc);
 80014f8:	4b2c      	ldr	r3, [pc, #176]	; (80015ac <main+0xe0>)
 80014fa:	0018      	movs	r0, r3
 80014fc:	f001 f87a 	bl	80025f4 <HAL_ADCEx_Calibration_Start>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	HAL_ADC_Start_DMA(&hadc, &AD_RES, 1);
 8001500:	492b      	ldr	r1, [pc, #172]	; (80015b0 <main+0xe4>)
 8001502:	4b2a      	ldr	r3, [pc, #168]	; (80015ac <main+0xe0>)
 8001504:	2201      	movs	r2, #1
 8001506:	0018      	movs	r0, r3
 8001508:	f000 fde4 	bl	80020d4 <HAL_ADC_Start_DMA>

	// Input and output for value mapping
	int input_start = 0;
 800150c:	2300      	movs	r3, #0
 800150e:	62fb      	str	r3, [r7, #44]	; 0x2c
	int input_end = 4095;
 8001510:	4b28      	ldr	r3, [pc, #160]	; (80015b4 <main+0xe8>)
 8001512:	62bb      	str	r3, [r7, #40]	; 0x28
	int output_start = 0;
 8001514:	2300      	movs	r3, #0
 8001516:	627b      	str	r3, [r7, #36]	; 0x24
	int output_end = 255;
 8001518:	23ff      	movs	r3, #255	; 0xff
 800151a:	623b      	str	r3, [r7, #32]
	int input = AD_RES;
 800151c:	4b24      	ldr	r3, [pc, #144]	; (80015b0 <main+0xe4>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	61fb      	str	r3, [r7, #28]
	int output;

	// Map value from 0 - 4095 to 0 - 255
	double slope = 1.0 * (output_end - output_start) / (input_end - input_start);
 8001522:	6a3a      	ldr	r2, [r7, #32]
 8001524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001526:	1ad3      	subs	r3, r2, r3
 8001528:	0018      	movs	r0, r3
 800152a:	f7ff ff5f 	bl	80013ec <__aeabi_i2d>
 800152e:	0004      	movs	r4, r0
 8001530:	000d      	movs	r5, r1
 8001532:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001534:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001536:	1ad3      	subs	r3, r2, r3
 8001538:	0018      	movs	r0, r3
 800153a:	f7ff ff57 	bl	80013ec <__aeabi_i2d>
 800153e:	0002      	movs	r2, r0
 8001540:	000b      	movs	r3, r1
 8001542:	0020      	movs	r0, r4
 8001544:	0029      	movs	r1, r5
 8001546:	f7ff f9b9 	bl	80008bc <__aeabi_ddiv>
 800154a:	0002      	movs	r2, r0
 800154c:	000b      	movs	r3, r1
 800154e:	613a      	str	r2, [r7, #16]
 8001550:	617b      	str	r3, [r7, #20]
	output = output_start + slope * (input - input_start);
 8001552:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001554:	f7ff ff4a 	bl	80013ec <__aeabi_i2d>
 8001558:	0004      	movs	r4, r0
 800155a:	000d      	movs	r5, r1
 800155c:	69fa      	ldr	r2, [r7, #28]
 800155e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001560:	1ad3      	subs	r3, r2, r3
 8001562:	0018      	movs	r0, r3
 8001564:	f7ff ff42 	bl	80013ec <__aeabi_i2d>
 8001568:	693a      	ldr	r2, [r7, #16]
 800156a:	697b      	ldr	r3, [r7, #20]
 800156c:	f7ff fc9c 	bl	8000ea8 <__aeabi_dmul>
 8001570:	0002      	movs	r2, r0
 8001572:	000b      	movs	r3, r1
 8001574:	0020      	movs	r0, r4
 8001576:	0029      	movs	r1, r5
 8001578:	f7fe fe64 	bl	8000244 <__aeabi_dadd>
 800157c:	0002      	movs	r2, r0
 800157e:	000b      	movs	r3, r1
 8001580:	0010      	movs	r0, r2
 8001582:	0019      	movs	r1, r3
 8001584:	f7ff fefc 	bl	8001380 <__aeabi_d2iz>
 8001588:	0003      	movs	r3, r0
 800158a:	60fb      	str	r3, [r7, #12]

	// Convert to character array to print via UART
	char sOutput[8];
	sprintf(sOutput,"%d", output);
 800158c:	68fa      	ldr	r2, [r7, #12]
 800158e:	490a      	ldr	r1, [pc, #40]	; (80015b8 <main+0xec>)
 8001590:	1d3b      	adds	r3, r7, #4
 8001592:	0018      	movs	r0, r3
 8001594:	f003 fbf2 	bl	8004d7c <siprintf>
	debugPrintln(sOutput);
 8001598:	1d3b      	adds	r3, r7, #4
 800159a:	0018      	movs	r0, r3
 800159c:	f7ff ff74 	bl	8001488 <debugPrintln>
	HAL_Delay(100);
 80015a0:	2064      	movs	r0, #100	; 0x64
 80015a2:	f000 fc33 	bl	8001e0c <HAL_Delay>
  {
 80015a6:	e7ab      	b.n	8001500 <main+0x34>
 80015a8:	20000110 	.word	0x20000110
 80015ac:	2000008c 	.word	0x2000008c
 80015b0:	200001dc 	.word	0x200001dc
 80015b4:	00000fff 	.word	0x00000fff
 80015b8:	08005668 	.word	0x08005668

080015bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80015bc:	b590      	push	{r4, r7, lr}
 80015be:	b091      	sub	sp, #68	; 0x44
 80015c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80015c2:	2410      	movs	r4, #16
 80015c4:	193b      	adds	r3, r7, r4
 80015c6:	0018      	movs	r0, r3
 80015c8:	2330      	movs	r3, #48	; 0x30
 80015ca:	001a      	movs	r2, r3
 80015cc:	2100      	movs	r1, #0
 80015ce:	f003 fbcd 	bl	8004d6c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80015d2:	003b      	movs	r3, r7
 80015d4:	0018      	movs	r0, r3
 80015d6:	2310      	movs	r3, #16
 80015d8:	001a      	movs	r2, r3
 80015da:	2100      	movs	r1, #0
 80015dc:	f003 fbc6 	bl	8004d6c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14;
 80015e0:	0021      	movs	r1, r4
 80015e2:	187b      	adds	r3, r7, r1
 80015e4:	2212      	movs	r2, #18
 80015e6:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80015e8:	187b      	adds	r3, r7, r1
 80015ea:	2201      	movs	r2, #1
 80015ec:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 80015ee:	187b      	adds	r3, r7, r1
 80015f0:	2201      	movs	r2, #1
 80015f2:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80015f4:	187b      	adds	r3, r7, r1
 80015f6:	2210      	movs	r2, #16
 80015f8:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 80015fa:	187b      	adds	r3, r7, r1
 80015fc:	2210      	movs	r2, #16
 80015fe:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001600:	187b      	adds	r3, r7, r1
 8001602:	2202      	movs	r2, #2
 8001604:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001606:	187b      	adds	r3, r7, r1
 8001608:	2200      	movs	r2, #0
 800160a:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 800160c:	187b      	adds	r3, r7, r1
 800160e:	22a0      	movs	r2, #160	; 0xa0
 8001610:	0392      	lsls	r2, r2, #14
 8001612:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8001614:	187b      	adds	r3, r7, r1
 8001616:	2200      	movs	r2, #0
 8001618:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800161a:	187b      	adds	r3, r7, r1
 800161c:	0018      	movs	r0, r3
 800161e:	f001 fc95 	bl	8002f4c <HAL_RCC_OscConfig>
 8001622:	1e03      	subs	r3, r0, #0
 8001624:	d001      	beq.n	800162a <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8001626:	f000 f9bf 	bl	80019a8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800162a:	003b      	movs	r3, r7
 800162c:	2207      	movs	r2, #7
 800162e:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001630:	003b      	movs	r3, r7
 8001632:	2202      	movs	r2, #2
 8001634:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001636:	003b      	movs	r3, r7
 8001638:	2200      	movs	r2, #0
 800163a:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800163c:	003b      	movs	r3, r7
 800163e:	2200      	movs	r2, #0
 8001640:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001642:	003b      	movs	r3, r7
 8001644:	2101      	movs	r1, #1
 8001646:	0018      	movs	r0, r3
 8001648:	f001 ff9a 	bl	8003580 <HAL_RCC_ClockConfig>
 800164c:	1e03      	subs	r3, r0, #0
 800164e:	d001      	beq.n	8001654 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001650:	f000 f9aa 	bl	80019a8 <Error_Handler>
  }
}
 8001654:	46c0      	nop			; (mov r8, r8)
 8001656:	46bd      	mov	sp, r7
 8001658:	b011      	add	sp, #68	; 0x44
 800165a:	bd90      	pop	{r4, r7, pc}

0800165c <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b084      	sub	sp, #16
 8001660:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001662:	1d3b      	adds	r3, r7, #4
 8001664:	0018      	movs	r0, r3
 8001666:	230c      	movs	r3, #12
 8001668:	001a      	movs	r2, r3
 800166a:	2100      	movs	r1, #0
 800166c:	f003 fb7e 	bl	8004d6c <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8001670:	4b26      	ldr	r3, [pc, #152]	; (800170c <MX_ADC_Init+0xb0>)
 8001672:	4a27      	ldr	r2, [pc, #156]	; (8001710 <MX_ADC_Init+0xb4>)
 8001674:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001676:	4b25      	ldr	r3, [pc, #148]	; (800170c <MX_ADC_Init+0xb0>)
 8001678:	2200      	movs	r2, #0
 800167a:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 800167c:	4b23      	ldr	r3, [pc, #140]	; (800170c <MX_ADC_Init+0xb0>)
 800167e:	2200      	movs	r2, #0
 8001680:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001682:	4b22      	ldr	r3, [pc, #136]	; (800170c <MX_ADC_Init+0xb0>)
 8001684:	2200      	movs	r2, #0
 8001686:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8001688:	4b20      	ldr	r3, [pc, #128]	; (800170c <MX_ADC_Init+0xb0>)
 800168a:	2201      	movs	r2, #1
 800168c:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800168e:	4b1f      	ldr	r3, [pc, #124]	; (800170c <MX_ADC_Init+0xb0>)
 8001690:	2204      	movs	r2, #4
 8001692:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 8001694:	4b1d      	ldr	r3, [pc, #116]	; (800170c <MX_ADC_Init+0xb0>)
 8001696:	2200      	movs	r2, #0
 8001698:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 800169a:	4b1c      	ldr	r3, [pc, #112]	; (800170c <MX_ADC_Init+0xb0>)
 800169c:	2200      	movs	r2, #0
 800169e:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 80016a0:	4b1a      	ldr	r3, [pc, #104]	; (800170c <MX_ADC_Init+0xb0>)
 80016a2:	2200      	movs	r2, #0
 80016a4:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 80016a6:	4b19      	ldr	r3, [pc, #100]	; (800170c <MX_ADC_Init+0xb0>)
 80016a8:	2200      	movs	r2, #0
 80016aa:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80016ac:	4b17      	ldr	r3, [pc, #92]	; (800170c <MX_ADC_Init+0xb0>)
 80016ae:	22c2      	movs	r2, #194	; 0xc2
 80016b0:	32ff      	adds	r2, #255	; 0xff
 80016b2:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80016b4:	4b15      	ldr	r3, [pc, #84]	; (800170c <MX_ADC_Init+0xb0>)
 80016b6:	2200      	movs	r2, #0
 80016b8:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = DISABLE;
 80016ba:	4b14      	ldr	r3, [pc, #80]	; (800170c <MX_ADC_Init+0xb0>)
 80016bc:	2224      	movs	r2, #36	; 0x24
 80016be:	2100      	movs	r1, #0
 80016c0:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80016c2:	4b12      	ldr	r3, [pc, #72]	; (800170c <MX_ADC_Init+0xb0>)
 80016c4:	2201      	movs	r2, #1
 80016c6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 80016c8:	4b10      	ldr	r3, [pc, #64]	; (800170c <MX_ADC_Init+0xb0>)
 80016ca:	0018      	movs	r0, r3
 80016cc:	f000 fbc2 	bl	8001e54 <HAL_ADC_Init>
 80016d0:	1e03      	subs	r3, r0, #0
 80016d2:	d001      	beq.n	80016d8 <MX_ADC_Init+0x7c>
  {
    Error_Handler();
 80016d4:	f000 f968 	bl	80019a8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80016d8:	1d3b      	adds	r3, r7, #4
 80016da:	2200      	movs	r2, #0
 80016dc:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 80016de:	1d3b      	adds	r3, r7, #4
 80016e0:	2280      	movs	r2, #128	; 0x80
 80016e2:	0152      	lsls	r2, r2, #5
 80016e4:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80016e6:	1d3b      	adds	r3, r7, #4
 80016e8:	2280      	movs	r2, #128	; 0x80
 80016ea:	0552      	lsls	r2, r2, #21
 80016ec:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80016ee:	1d3a      	adds	r2, r7, #4
 80016f0:	4b06      	ldr	r3, [pc, #24]	; (800170c <MX_ADC_Init+0xb0>)
 80016f2:	0011      	movs	r1, r2
 80016f4:	0018      	movs	r0, r3
 80016f6:	f000 fd7f 	bl	80021f8 <HAL_ADC_ConfigChannel>
 80016fa:	1e03      	subs	r3, r0, #0
 80016fc:	d001      	beq.n	8001702 <MX_ADC_Init+0xa6>
  {
    Error_Handler();
 80016fe:	f000 f953 	bl	80019a8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8001702:	46c0      	nop			; (mov r8, r8)
 8001704:	46bd      	mov	sp, r7
 8001706:	b004      	add	sp, #16
 8001708:	bd80      	pop	{r7, pc}
 800170a:	46c0      	nop			; (mov r8, r8)
 800170c:	2000008c 	.word	0x2000008c
 8001710:	40012400 	.word	0x40012400

08001714 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b08e      	sub	sp, #56	; 0x38
 8001718:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800171a:	2328      	movs	r3, #40	; 0x28
 800171c:	18fb      	adds	r3, r7, r3
 800171e:	0018      	movs	r0, r3
 8001720:	2310      	movs	r3, #16
 8001722:	001a      	movs	r2, r3
 8001724:	2100      	movs	r1, #0
 8001726:	f003 fb21 	bl	8004d6c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800172a:	2320      	movs	r3, #32
 800172c:	18fb      	adds	r3, r7, r3
 800172e:	0018      	movs	r0, r3
 8001730:	2308      	movs	r3, #8
 8001732:	001a      	movs	r2, r3
 8001734:	2100      	movs	r1, #0
 8001736:	f003 fb19 	bl	8004d6c <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800173a:	1d3b      	adds	r3, r7, #4
 800173c:	0018      	movs	r0, r3
 800173e:	231c      	movs	r3, #28
 8001740:	001a      	movs	r2, r3
 8001742:	2100      	movs	r1, #0
 8001744:	f003 fb12 	bl	8004d6c <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001748:	4b2f      	ldr	r3, [pc, #188]	; (8001808 <MX_TIM3_Init+0xf4>)
 800174a:	4a30      	ldr	r2, [pc, #192]	; (800180c <MX_TIM3_Init+0xf8>)
 800174c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800174e:	4b2e      	ldr	r3, [pc, #184]	; (8001808 <MX_TIM3_Init+0xf4>)
 8001750:	2200      	movs	r2, #0
 8001752:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001754:	4b2c      	ldr	r3, [pc, #176]	; (8001808 <MX_TIM3_Init+0xf4>)
 8001756:	2200      	movs	r2, #0
 8001758:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800175a:	4b2b      	ldr	r3, [pc, #172]	; (8001808 <MX_TIM3_Init+0xf4>)
 800175c:	4a2c      	ldr	r2, [pc, #176]	; (8001810 <MX_TIM3_Init+0xfc>)
 800175e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001760:	4b29      	ldr	r3, [pc, #164]	; (8001808 <MX_TIM3_Init+0xf4>)
 8001762:	2200      	movs	r2, #0
 8001764:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001766:	4b28      	ldr	r3, [pc, #160]	; (8001808 <MX_TIM3_Init+0xf4>)
 8001768:	2280      	movs	r2, #128	; 0x80
 800176a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800176c:	4b26      	ldr	r3, [pc, #152]	; (8001808 <MX_TIM3_Init+0xf4>)
 800176e:	0018      	movs	r0, r3
 8001770:	f002 f858 	bl	8003824 <HAL_TIM_Base_Init>
 8001774:	1e03      	subs	r3, r0, #0
 8001776:	d001      	beq.n	800177c <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8001778:	f000 f916 	bl	80019a8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800177c:	2128      	movs	r1, #40	; 0x28
 800177e:	187b      	adds	r3, r7, r1
 8001780:	2280      	movs	r2, #128	; 0x80
 8001782:	0152      	lsls	r2, r2, #5
 8001784:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001786:	187a      	adds	r2, r7, r1
 8001788:	4b1f      	ldr	r3, [pc, #124]	; (8001808 <MX_TIM3_Init+0xf4>)
 800178a:	0011      	movs	r1, r2
 800178c:	0018      	movs	r0, r3
 800178e:	f002 fa69 	bl	8003c64 <HAL_TIM_ConfigClockSource>
 8001792:	1e03      	subs	r3, r0, #0
 8001794:	d001      	beq.n	800179a <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 8001796:	f000 f907 	bl	80019a8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800179a:	4b1b      	ldr	r3, [pc, #108]	; (8001808 <MX_TIM3_Init+0xf4>)
 800179c:	0018      	movs	r0, r3
 800179e:	f002 f891 	bl	80038c4 <HAL_TIM_PWM_Init>
 80017a2:	1e03      	subs	r3, r0, #0
 80017a4:	d001      	beq.n	80017aa <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 80017a6:	f000 f8ff 	bl	80019a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017aa:	2120      	movs	r1, #32
 80017ac:	187b      	adds	r3, r7, r1
 80017ae:	2200      	movs	r2, #0
 80017b0:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017b2:	187b      	adds	r3, r7, r1
 80017b4:	2200      	movs	r2, #0
 80017b6:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80017b8:	187a      	adds	r2, r7, r1
 80017ba:	4b13      	ldr	r3, [pc, #76]	; (8001808 <MX_TIM3_Init+0xf4>)
 80017bc:	0011      	movs	r1, r2
 80017be:	0018      	movs	r0, r3
 80017c0:	f002 fe54 	bl	800446c <HAL_TIMEx_MasterConfigSynchronization>
 80017c4:	1e03      	subs	r3, r0, #0
 80017c6:	d001      	beq.n	80017cc <MX_TIM3_Init+0xb8>
  {
    Error_Handler();
 80017c8:	f000 f8ee 	bl	80019a8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80017cc:	1d3b      	adds	r3, r7, #4
 80017ce:	2260      	movs	r2, #96	; 0x60
 80017d0:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 80017d2:	1d3b      	adds	r3, r7, #4
 80017d4:	2200      	movs	r2, #0
 80017d6:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80017d8:	1d3b      	adds	r3, r7, #4
 80017da:	2200      	movs	r2, #0
 80017dc:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80017de:	1d3b      	adds	r3, r7, #4
 80017e0:	2200      	movs	r2, #0
 80017e2:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80017e4:	1d39      	adds	r1, r7, #4
 80017e6:	4b08      	ldr	r3, [pc, #32]	; (8001808 <MX_TIM3_Init+0xf4>)
 80017e8:	2200      	movs	r2, #0
 80017ea:	0018      	movs	r0, r3
 80017ec:	f002 f974 	bl	8003ad8 <HAL_TIM_PWM_ConfigChannel>
 80017f0:	1e03      	subs	r3, r0, #0
 80017f2:	d001      	beq.n	80017f8 <MX_TIM3_Init+0xe4>
  {
    Error_Handler();
 80017f4:	f000 f8d8 	bl	80019a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80017f8:	4b03      	ldr	r3, [pc, #12]	; (8001808 <MX_TIM3_Init+0xf4>)
 80017fa:	0018      	movs	r0, r3
 80017fc:	f000 f98e 	bl	8001b1c <HAL_TIM_MspPostInit>

}
 8001800:	46c0      	nop			; (mov r8, r8)
 8001802:	46bd      	mov	sp, r7
 8001804:	b00e      	add	sp, #56	; 0x38
 8001806:	bd80      	pop	{r7, pc}
 8001808:	20000110 	.word	0x20000110
 800180c:	40000400 	.word	0x40000400
 8001810:	0000ffff 	.word	0x0000ffff

08001814 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001818:	4b14      	ldr	r3, [pc, #80]	; (800186c <MX_USART2_UART_Init+0x58>)
 800181a:	4a15      	ldr	r2, [pc, #84]	; (8001870 <MX_USART2_UART_Init+0x5c>)
 800181c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 800181e:	4b13      	ldr	r3, [pc, #76]	; (800186c <MX_USART2_UART_Init+0x58>)
 8001820:	2296      	movs	r2, #150	; 0x96
 8001822:	0212      	lsls	r2, r2, #8
 8001824:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001826:	4b11      	ldr	r3, [pc, #68]	; (800186c <MX_USART2_UART_Init+0x58>)
 8001828:	2200      	movs	r2, #0
 800182a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800182c:	4b0f      	ldr	r3, [pc, #60]	; (800186c <MX_USART2_UART_Init+0x58>)
 800182e:	2200      	movs	r2, #0
 8001830:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001832:	4b0e      	ldr	r3, [pc, #56]	; (800186c <MX_USART2_UART_Init+0x58>)
 8001834:	2200      	movs	r2, #0
 8001836:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001838:	4b0c      	ldr	r3, [pc, #48]	; (800186c <MX_USART2_UART_Init+0x58>)
 800183a:	220c      	movs	r2, #12
 800183c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800183e:	4b0b      	ldr	r3, [pc, #44]	; (800186c <MX_USART2_UART_Init+0x58>)
 8001840:	2200      	movs	r2, #0
 8001842:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001844:	4b09      	ldr	r3, [pc, #36]	; (800186c <MX_USART2_UART_Init+0x58>)
 8001846:	2200      	movs	r2, #0
 8001848:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800184a:	4b08      	ldr	r3, [pc, #32]	; (800186c <MX_USART2_UART_Init+0x58>)
 800184c:	2200      	movs	r2, #0
 800184e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001850:	4b06      	ldr	r3, [pc, #24]	; (800186c <MX_USART2_UART_Init+0x58>)
 8001852:	2200      	movs	r2, #0
 8001854:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001856:	4b05      	ldr	r3, [pc, #20]	; (800186c <MX_USART2_UART_Init+0x58>)
 8001858:	0018      	movs	r0, r3
 800185a:	f002 fe5f 	bl	800451c <HAL_UART_Init>
 800185e:	1e03      	subs	r3, r0, #0
 8001860:	d001      	beq.n	8001866 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001862:	f000 f8a1 	bl	80019a8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001866:	46c0      	nop			; (mov r8, r8)
 8001868:	46bd      	mov	sp, r7
 800186a:	bd80      	pop	{r7, pc}
 800186c:	20000158 	.word	0x20000158
 8001870:	40004400 	.word	0x40004400

08001874 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	b082      	sub	sp, #8
 8001878:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800187a:	4b0c      	ldr	r3, [pc, #48]	; (80018ac <MX_DMA_Init+0x38>)
 800187c:	695a      	ldr	r2, [r3, #20]
 800187e:	4b0b      	ldr	r3, [pc, #44]	; (80018ac <MX_DMA_Init+0x38>)
 8001880:	2101      	movs	r1, #1
 8001882:	430a      	orrs	r2, r1
 8001884:	615a      	str	r2, [r3, #20]
 8001886:	4b09      	ldr	r3, [pc, #36]	; (80018ac <MX_DMA_Init+0x38>)
 8001888:	695b      	ldr	r3, [r3, #20]
 800188a:	2201      	movs	r2, #1
 800188c:	4013      	ands	r3, r2
 800188e:	607b      	str	r3, [r7, #4]
 8001890:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001892:	2200      	movs	r2, #0
 8001894:	2100      	movs	r1, #0
 8001896:	2009      	movs	r0, #9
 8001898:	f001 f800 	bl	800289c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800189c:	2009      	movs	r0, #9
 800189e:	f001 f812 	bl	80028c6 <HAL_NVIC_EnableIRQ>

}
 80018a2:	46c0      	nop			; (mov r8, r8)
 80018a4:	46bd      	mov	sp, r7
 80018a6:	b002      	add	sp, #8
 80018a8:	bd80      	pop	{r7, pc}
 80018aa:	46c0      	nop			; (mov r8, r8)
 80018ac:	40021000 	.word	0x40021000

080018b0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80018b0:	b590      	push	{r4, r7, lr}
 80018b2:	b089      	sub	sp, #36	; 0x24
 80018b4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018b6:	240c      	movs	r4, #12
 80018b8:	193b      	adds	r3, r7, r4
 80018ba:	0018      	movs	r0, r3
 80018bc:	2314      	movs	r3, #20
 80018be:	001a      	movs	r2, r3
 80018c0:	2100      	movs	r1, #0
 80018c2:	f003 fa53 	bl	8004d6c <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80018c6:	4b2d      	ldr	r3, [pc, #180]	; (800197c <MX_GPIO_Init+0xcc>)
 80018c8:	695a      	ldr	r2, [r3, #20]
 80018ca:	4b2c      	ldr	r3, [pc, #176]	; (800197c <MX_GPIO_Init+0xcc>)
 80018cc:	2180      	movs	r1, #128	; 0x80
 80018ce:	0309      	lsls	r1, r1, #12
 80018d0:	430a      	orrs	r2, r1
 80018d2:	615a      	str	r2, [r3, #20]
 80018d4:	4b29      	ldr	r3, [pc, #164]	; (800197c <MX_GPIO_Init+0xcc>)
 80018d6:	695a      	ldr	r2, [r3, #20]
 80018d8:	2380      	movs	r3, #128	; 0x80
 80018da:	031b      	lsls	r3, r3, #12
 80018dc:	4013      	ands	r3, r2
 80018de:	60bb      	str	r3, [r7, #8]
 80018e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80018e2:	4b26      	ldr	r3, [pc, #152]	; (800197c <MX_GPIO_Init+0xcc>)
 80018e4:	695a      	ldr	r2, [r3, #20]
 80018e6:	4b25      	ldr	r3, [pc, #148]	; (800197c <MX_GPIO_Init+0xcc>)
 80018e8:	2180      	movs	r1, #128	; 0x80
 80018ea:	03c9      	lsls	r1, r1, #15
 80018ec:	430a      	orrs	r2, r1
 80018ee:	615a      	str	r2, [r3, #20]
 80018f0:	4b22      	ldr	r3, [pc, #136]	; (800197c <MX_GPIO_Init+0xcc>)
 80018f2:	695a      	ldr	r2, [r3, #20]
 80018f4:	2380      	movs	r3, #128	; 0x80
 80018f6:	03db      	lsls	r3, r3, #15
 80018f8:	4013      	ands	r3, r2
 80018fa:	607b      	str	r3, [r7, #4]
 80018fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80018fe:	4b1f      	ldr	r3, [pc, #124]	; (800197c <MX_GPIO_Init+0xcc>)
 8001900:	695a      	ldr	r2, [r3, #20]
 8001902:	4b1e      	ldr	r3, [pc, #120]	; (800197c <MX_GPIO_Init+0xcc>)
 8001904:	2180      	movs	r1, #128	; 0x80
 8001906:	0289      	lsls	r1, r1, #10
 8001908:	430a      	orrs	r2, r1
 800190a:	615a      	str	r2, [r3, #20]
 800190c:	4b1b      	ldr	r3, [pc, #108]	; (800197c <MX_GPIO_Init+0xcc>)
 800190e:	695a      	ldr	r2, [r3, #20]
 8001910:	2380      	movs	r3, #128	; 0x80
 8001912:	029b      	lsls	r3, r3, #10
 8001914:	4013      	ands	r3, r2
 8001916:	603b      	str	r3, [r7, #0]
 8001918:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800191a:	2390      	movs	r3, #144	; 0x90
 800191c:	05db      	lsls	r3, r3, #23
 800191e:	2200      	movs	r2, #0
 8001920:	2120      	movs	r1, #32
 8001922:	0018      	movs	r0, r3
 8001924:	f001 faf4 	bl	8002f10 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001928:	193b      	adds	r3, r7, r4
 800192a:	2280      	movs	r2, #128	; 0x80
 800192c:	0192      	lsls	r2, r2, #6
 800192e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001930:	193b      	adds	r3, r7, r4
 8001932:	2284      	movs	r2, #132	; 0x84
 8001934:	0392      	lsls	r2, r2, #14
 8001936:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001938:	193b      	adds	r3, r7, r4
 800193a:	2200      	movs	r2, #0
 800193c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800193e:	193b      	adds	r3, r7, r4
 8001940:	4a0f      	ldr	r2, [pc, #60]	; (8001980 <MX_GPIO_Init+0xd0>)
 8001942:	0019      	movs	r1, r3
 8001944:	0010      	movs	r0, r2
 8001946:	f001 f973 	bl	8002c30 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800194a:	0021      	movs	r1, r4
 800194c:	187b      	adds	r3, r7, r1
 800194e:	2220      	movs	r2, #32
 8001950:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001952:	187b      	adds	r3, r7, r1
 8001954:	2201      	movs	r2, #1
 8001956:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001958:	187b      	adds	r3, r7, r1
 800195a:	2200      	movs	r2, #0
 800195c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800195e:	187b      	adds	r3, r7, r1
 8001960:	2200      	movs	r2, #0
 8001962:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001964:	187a      	adds	r2, r7, r1
 8001966:	2390      	movs	r3, #144	; 0x90
 8001968:	05db      	lsls	r3, r3, #23
 800196a:	0011      	movs	r1, r2
 800196c:	0018      	movs	r0, r3
 800196e:	f001 f95f 	bl	8002c30 <HAL_GPIO_Init>

}
 8001972:	46c0      	nop			; (mov r8, r8)
 8001974:	46bd      	mov	sp, r7
 8001976:	b009      	add	sp, #36	; 0x24
 8001978:	bd90      	pop	{r4, r7, pc}
 800197a:	46c0      	nop			; (mov r8, r8)
 800197c:	40021000 	.word	0x40021000
 8001980:	48000800 	.word	0x48000800

08001984 <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	b082      	sub	sp, #8
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
    // Conversion Complete & DMA Transfer Complete As Well
    // So The AD_RES Is Now Updated & Let's Move IT To The PWM CCR1
    // Update The PWM Duty Cycle With Latest ADC Conversion Result
    TIM3->CCR1 = (AD_RES<<4);
 800198c:	4b04      	ldr	r3, [pc, #16]	; (80019a0 <HAL_ADC_ConvCpltCallback+0x1c>)
 800198e:	681a      	ldr	r2, [r3, #0]
 8001990:	4b04      	ldr	r3, [pc, #16]	; (80019a4 <HAL_ADC_ConvCpltCallback+0x20>)
 8001992:	0112      	lsls	r2, r2, #4
 8001994:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001996:	46c0      	nop			; (mov r8, r8)
 8001998:	46bd      	mov	sp, r7
 800199a:	b002      	add	sp, #8
 800199c:	bd80      	pop	{r7, pc}
 800199e:	46c0      	nop			; (mov r8, r8)
 80019a0:	200001dc 	.word	0x200001dc
 80019a4:	40000400 	.word	0x40000400

080019a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80019ac:	b672      	cpsid	i
}
 80019ae:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80019b0:	e7fe      	b.n	80019b0 <Error_Handler+0x8>
	...

080019b4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b082      	sub	sp, #8
 80019b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019ba:	4b0f      	ldr	r3, [pc, #60]	; (80019f8 <HAL_MspInit+0x44>)
 80019bc:	699a      	ldr	r2, [r3, #24]
 80019be:	4b0e      	ldr	r3, [pc, #56]	; (80019f8 <HAL_MspInit+0x44>)
 80019c0:	2101      	movs	r1, #1
 80019c2:	430a      	orrs	r2, r1
 80019c4:	619a      	str	r2, [r3, #24]
 80019c6:	4b0c      	ldr	r3, [pc, #48]	; (80019f8 <HAL_MspInit+0x44>)
 80019c8:	699b      	ldr	r3, [r3, #24]
 80019ca:	2201      	movs	r2, #1
 80019cc:	4013      	ands	r3, r2
 80019ce:	607b      	str	r3, [r7, #4]
 80019d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80019d2:	4b09      	ldr	r3, [pc, #36]	; (80019f8 <HAL_MspInit+0x44>)
 80019d4:	69da      	ldr	r2, [r3, #28]
 80019d6:	4b08      	ldr	r3, [pc, #32]	; (80019f8 <HAL_MspInit+0x44>)
 80019d8:	2180      	movs	r1, #128	; 0x80
 80019da:	0549      	lsls	r1, r1, #21
 80019dc:	430a      	orrs	r2, r1
 80019de:	61da      	str	r2, [r3, #28]
 80019e0:	4b05      	ldr	r3, [pc, #20]	; (80019f8 <HAL_MspInit+0x44>)
 80019e2:	69da      	ldr	r2, [r3, #28]
 80019e4:	2380      	movs	r3, #128	; 0x80
 80019e6:	055b      	lsls	r3, r3, #21
 80019e8:	4013      	ands	r3, r2
 80019ea:	603b      	str	r3, [r7, #0]
 80019ec:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019ee:	46c0      	nop			; (mov r8, r8)
 80019f0:	46bd      	mov	sp, r7
 80019f2:	b002      	add	sp, #8
 80019f4:	bd80      	pop	{r7, pc}
 80019f6:	46c0      	nop			; (mov r8, r8)
 80019f8:	40021000 	.word	0x40021000

080019fc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80019fc:	b590      	push	{r4, r7, lr}
 80019fe:	b08b      	sub	sp, #44	; 0x2c
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a04:	2414      	movs	r4, #20
 8001a06:	193b      	adds	r3, r7, r4
 8001a08:	0018      	movs	r0, r3
 8001a0a:	2314      	movs	r3, #20
 8001a0c:	001a      	movs	r2, r3
 8001a0e:	2100      	movs	r1, #0
 8001a10:	f003 f9ac 	bl	8004d6c <memset>
  if(hadc->Instance==ADC1)
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	4a2d      	ldr	r2, [pc, #180]	; (8001ad0 <HAL_ADC_MspInit+0xd4>)
 8001a1a:	4293      	cmp	r3, r2
 8001a1c:	d153      	bne.n	8001ac6 <HAL_ADC_MspInit+0xca>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001a1e:	4b2d      	ldr	r3, [pc, #180]	; (8001ad4 <HAL_ADC_MspInit+0xd8>)
 8001a20:	699a      	ldr	r2, [r3, #24]
 8001a22:	4b2c      	ldr	r3, [pc, #176]	; (8001ad4 <HAL_ADC_MspInit+0xd8>)
 8001a24:	2180      	movs	r1, #128	; 0x80
 8001a26:	0089      	lsls	r1, r1, #2
 8001a28:	430a      	orrs	r2, r1
 8001a2a:	619a      	str	r2, [r3, #24]
 8001a2c:	4b29      	ldr	r3, [pc, #164]	; (8001ad4 <HAL_ADC_MspInit+0xd8>)
 8001a2e:	699a      	ldr	r2, [r3, #24]
 8001a30:	2380      	movs	r3, #128	; 0x80
 8001a32:	009b      	lsls	r3, r3, #2
 8001a34:	4013      	ands	r3, r2
 8001a36:	613b      	str	r3, [r7, #16]
 8001a38:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a3a:	4b26      	ldr	r3, [pc, #152]	; (8001ad4 <HAL_ADC_MspInit+0xd8>)
 8001a3c:	695a      	ldr	r2, [r3, #20]
 8001a3e:	4b25      	ldr	r3, [pc, #148]	; (8001ad4 <HAL_ADC_MspInit+0xd8>)
 8001a40:	2180      	movs	r1, #128	; 0x80
 8001a42:	0289      	lsls	r1, r1, #10
 8001a44:	430a      	orrs	r2, r1
 8001a46:	615a      	str	r2, [r3, #20]
 8001a48:	4b22      	ldr	r3, [pc, #136]	; (8001ad4 <HAL_ADC_MspInit+0xd8>)
 8001a4a:	695a      	ldr	r2, [r3, #20]
 8001a4c:	2380      	movs	r3, #128	; 0x80
 8001a4e:	029b      	lsls	r3, r3, #10
 8001a50:	4013      	ands	r3, r2
 8001a52:	60fb      	str	r3, [r7, #12]
 8001a54:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration
    PA0     ------> ADC_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001a56:	193b      	adds	r3, r7, r4
 8001a58:	2201      	movs	r2, #1
 8001a5a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001a5c:	193b      	adds	r3, r7, r4
 8001a5e:	2203      	movs	r2, #3
 8001a60:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a62:	193b      	adds	r3, r7, r4
 8001a64:	2200      	movs	r2, #0
 8001a66:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a68:	193a      	adds	r2, r7, r4
 8001a6a:	2390      	movs	r3, #144	; 0x90
 8001a6c:	05db      	lsls	r3, r3, #23
 8001a6e:	0011      	movs	r1, r2
 8001a70:	0018      	movs	r0, r3
 8001a72:	f001 f8dd 	bl	8002c30 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC Init */
    hdma_adc.Instance = DMA1_Channel1;
 8001a76:	4b18      	ldr	r3, [pc, #96]	; (8001ad8 <HAL_ADC_MspInit+0xdc>)
 8001a78:	4a18      	ldr	r2, [pc, #96]	; (8001adc <HAL_ADC_MspInit+0xe0>)
 8001a7a:	601a      	str	r2, [r3, #0]
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001a7c:	4b16      	ldr	r3, [pc, #88]	; (8001ad8 <HAL_ADC_MspInit+0xdc>)
 8001a7e:	2200      	movs	r2, #0
 8001a80:	605a      	str	r2, [r3, #4]
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 8001a82:	4b15      	ldr	r3, [pc, #84]	; (8001ad8 <HAL_ADC_MspInit+0xdc>)
 8001a84:	2200      	movs	r2, #0
 8001a86:	609a      	str	r2, [r3, #8]
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 8001a88:	4b13      	ldr	r3, [pc, #76]	; (8001ad8 <HAL_ADC_MspInit+0xdc>)
 8001a8a:	2280      	movs	r2, #128	; 0x80
 8001a8c:	60da      	str	r2, [r3, #12]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001a8e:	4b12      	ldr	r3, [pc, #72]	; (8001ad8 <HAL_ADC_MspInit+0xdc>)
 8001a90:	2280      	movs	r2, #128	; 0x80
 8001a92:	0052      	lsls	r2, r2, #1
 8001a94:	611a      	str	r2, [r3, #16]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001a96:	4b10      	ldr	r3, [pc, #64]	; (8001ad8 <HAL_ADC_MspInit+0xdc>)
 8001a98:	2280      	movs	r2, #128	; 0x80
 8001a9a:	00d2      	lsls	r2, r2, #3
 8001a9c:	615a      	str	r2, [r3, #20]
    hdma_adc.Init.Mode = DMA_NORMAL;
 8001a9e:	4b0e      	ldr	r3, [pc, #56]	; (8001ad8 <HAL_ADC_MspInit+0xdc>)
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	619a      	str	r2, [r3, #24]
    hdma_adc.Init.Priority = DMA_PRIORITY_LOW;
 8001aa4:	4b0c      	ldr	r3, [pc, #48]	; (8001ad8 <HAL_ADC_MspInit+0xdc>)
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 8001aaa:	4b0b      	ldr	r3, [pc, #44]	; (8001ad8 <HAL_ADC_MspInit+0xdc>)
 8001aac:	0018      	movs	r0, r3
 8001aae:	f000 ff27 	bl	8002900 <HAL_DMA_Init>
 8001ab2:	1e03      	subs	r3, r0, #0
 8001ab4:	d001      	beq.n	8001aba <HAL_ADC_MspInit+0xbe>
    {
      Error_Handler();
 8001ab6:	f7ff ff77 	bl	80019a8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc);
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	4a06      	ldr	r2, [pc, #24]	; (8001ad8 <HAL_ADC_MspInit+0xdc>)
 8001abe:	631a      	str	r2, [r3, #48]	; 0x30
 8001ac0:	4b05      	ldr	r3, [pc, #20]	; (8001ad8 <HAL_ADC_MspInit+0xdc>)
 8001ac2:	687a      	ldr	r2, [r7, #4]
 8001ac4:	625a      	str	r2, [r3, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001ac6:	46c0      	nop			; (mov r8, r8)
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	b00b      	add	sp, #44	; 0x2c
 8001acc:	bd90      	pop	{r4, r7, pc}
 8001ace:	46c0      	nop			; (mov r8, r8)
 8001ad0:	40012400 	.word	0x40012400
 8001ad4:	40021000 	.word	0x40021000
 8001ad8:	200000cc 	.word	0x200000cc
 8001adc:	40020008 	.word	0x40020008

08001ae0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b084      	sub	sp, #16
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	4a09      	ldr	r2, [pc, #36]	; (8001b14 <HAL_TIM_Base_MspInit+0x34>)
 8001aee:	4293      	cmp	r3, r2
 8001af0:	d10b      	bne.n	8001b0a <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001af2:	4b09      	ldr	r3, [pc, #36]	; (8001b18 <HAL_TIM_Base_MspInit+0x38>)
 8001af4:	69da      	ldr	r2, [r3, #28]
 8001af6:	4b08      	ldr	r3, [pc, #32]	; (8001b18 <HAL_TIM_Base_MspInit+0x38>)
 8001af8:	2102      	movs	r1, #2
 8001afa:	430a      	orrs	r2, r1
 8001afc:	61da      	str	r2, [r3, #28]
 8001afe:	4b06      	ldr	r3, [pc, #24]	; (8001b18 <HAL_TIM_Base_MspInit+0x38>)
 8001b00:	69db      	ldr	r3, [r3, #28]
 8001b02:	2202      	movs	r2, #2
 8001b04:	4013      	ands	r3, r2
 8001b06:	60fb      	str	r3, [r7, #12]
 8001b08:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001b0a:	46c0      	nop			; (mov r8, r8)
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	b004      	add	sp, #16
 8001b10:	bd80      	pop	{r7, pc}
 8001b12:	46c0      	nop			; (mov r8, r8)
 8001b14:	40000400 	.word	0x40000400
 8001b18:	40021000 	.word	0x40021000

08001b1c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001b1c:	b590      	push	{r4, r7, lr}
 8001b1e:	b089      	sub	sp, #36	; 0x24
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b24:	240c      	movs	r4, #12
 8001b26:	193b      	adds	r3, r7, r4
 8001b28:	0018      	movs	r0, r3
 8001b2a:	2314      	movs	r3, #20
 8001b2c:	001a      	movs	r2, r3
 8001b2e:	2100      	movs	r1, #0
 8001b30:	f003 f91c 	bl	8004d6c <memset>
  if(htim->Instance==TIM3)
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	4a15      	ldr	r2, [pc, #84]	; (8001b90 <HAL_TIM_MspPostInit+0x74>)
 8001b3a:	4293      	cmp	r3, r2
 8001b3c:	d124      	bne.n	8001b88 <HAL_TIM_MspPostInit+0x6c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b3e:	4b15      	ldr	r3, [pc, #84]	; (8001b94 <HAL_TIM_MspPostInit+0x78>)
 8001b40:	695a      	ldr	r2, [r3, #20]
 8001b42:	4b14      	ldr	r3, [pc, #80]	; (8001b94 <HAL_TIM_MspPostInit+0x78>)
 8001b44:	2180      	movs	r1, #128	; 0x80
 8001b46:	0289      	lsls	r1, r1, #10
 8001b48:	430a      	orrs	r2, r1
 8001b4a:	615a      	str	r2, [r3, #20]
 8001b4c:	4b11      	ldr	r3, [pc, #68]	; (8001b94 <HAL_TIM_MspPostInit+0x78>)
 8001b4e:	695a      	ldr	r2, [r3, #20]
 8001b50:	2380      	movs	r3, #128	; 0x80
 8001b52:	029b      	lsls	r3, r3, #10
 8001b54:	4013      	ands	r3, r2
 8001b56:	60bb      	str	r3, [r7, #8]
 8001b58:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001b5a:	0021      	movs	r1, r4
 8001b5c:	187b      	adds	r3, r7, r1
 8001b5e:	2240      	movs	r2, #64	; 0x40
 8001b60:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b62:	187b      	adds	r3, r7, r1
 8001b64:	2202      	movs	r2, #2
 8001b66:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b68:	187b      	adds	r3, r7, r1
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b6e:	187b      	adds	r3, r7, r1
 8001b70:	2200      	movs	r2, #0
 8001b72:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 8001b74:	187b      	adds	r3, r7, r1
 8001b76:	2201      	movs	r2, #1
 8001b78:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b7a:	187a      	adds	r2, r7, r1
 8001b7c:	2390      	movs	r3, #144	; 0x90
 8001b7e:	05db      	lsls	r3, r3, #23
 8001b80:	0011      	movs	r1, r2
 8001b82:	0018      	movs	r0, r3
 8001b84:	f001 f854 	bl	8002c30 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001b88:	46c0      	nop			; (mov r8, r8)
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	b009      	add	sp, #36	; 0x24
 8001b8e:	bd90      	pop	{r4, r7, pc}
 8001b90:	40000400 	.word	0x40000400
 8001b94:	40021000 	.word	0x40021000

08001b98 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001b98:	b590      	push	{r4, r7, lr}
 8001b9a:	b08b      	sub	sp, #44	; 0x2c
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ba0:	2414      	movs	r4, #20
 8001ba2:	193b      	adds	r3, r7, r4
 8001ba4:	0018      	movs	r0, r3
 8001ba6:	2314      	movs	r3, #20
 8001ba8:	001a      	movs	r2, r3
 8001baa:	2100      	movs	r1, #0
 8001bac:	f003 f8de 	bl	8004d6c <memset>
  if(huart->Instance==USART2)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	4a1c      	ldr	r2, [pc, #112]	; (8001c28 <HAL_UART_MspInit+0x90>)
 8001bb6:	4293      	cmp	r3, r2
 8001bb8:	d132      	bne.n	8001c20 <HAL_UART_MspInit+0x88>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001bba:	4b1c      	ldr	r3, [pc, #112]	; (8001c2c <HAL_UART_MspInit+0x94>)
 8001bbc:	69da      	ldr	r2, [r3, #28]
 8001bbe:	4b1b      	ldr	r3, [pc, #108]	; (8001c2c <HAL_UART_MspInit+0x94>)
 8001bc0:	2180      	movs	r1, #128	; 0x80
 8001bc2:	0289      	lsls	r1, r1, #10
 8001bc4:	430a      	orrs	r2, r1
 8001bc6:	61da      	str	r2, [r3, #28]
 8001bc8:	4b18      	ldr	r3, [pc, #96]	; (8001c2c <HAL_UART_MspInit+0x94>)
 8001bca:	69da      	ldr	r2, [r3, #28]
 8001bcc:	2380      	movs	r3, #128	; 0x80
 8001bce:	029b      	lsls	r3, r3, #10
 8001bd0:	4013      	ands	r3, r2
 8001bd2:	613b      	str	r3, [r7, #16]
 8001bd4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bd6:	4b15      	ldr	r3, [pc, #84]	; (8001c2c <HAL_UART_MspInit+0x94>)
 8001bd8:	695a      	ldr	r2, [r3, #20]
 8001bda:	4b14      	ldr	r3, [pc, #80]	; (8001c2c <HAL_UART_MspInit+0x94>)
 8001bdc:	2180      	movs	r1, #128	; 0x80
 8001bde:	0289      	lsls	r1, r1, #10
 8001be0:	430a      	orrs	r2, r1
 8001be2:	615a      	str	r2, [r3, #20]
 8001be4:	4b11      	ldr	r3, [pc, #68]	; (8001c2c <HAL_UART_MspInit+0x94>)
 8001be6:	695a      	ldr	r2, [r3, #20]
 8001be8:	2380      	movs	r3, #128	; 0x80
 8001bea:	029b      	lsls	r3, r3, #10
 8001bec:	4013      	ands	r3, r2
 8001bee:	60fb      	str	r3, [r7, #12]
 8001bf0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001bf2:	0021      	movs	r1, r4
 8001bf4:	187b      	adds	r3, r7, r1
 8001bf6:	220c      	movs	r2, #12
 8001bf8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bfa:	187b      	adds	r3, r7, r1
 8001bfc:	2202      	movs	r2, #2
 8001bfe:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c00:	187b      	adds	r3, r7, r1
 8001c02:	2200      	movs	r2, #0
 8001c04:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c06:	187b      	adds	r3, r7, r1
 8001c08:	2200      	movs	r2, #0
 8001c0a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8001c0c:	187b      	adds	r3, r7, r1
 8001c0e:	2201      	movs	r2, #1
 8001c10:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c12:	187a      	adds	r2, r7, r1
 8001c14:	2390      	movs	r3, #144	; 0x90
 8001c16:	05db      	lsls	r3, r3, #23
 8001c18:	0011      	movs	r1, r2
 8001c1a:	0018      	movs	r0, r3
 8001c1c:	f001 f808 	bl	8002c30 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001c20:	46c0      	nop			; (mov r8, r8)
 8001c22:	46bd      	mov	sp, r7
 8001c24:	b00b      	add	sp, #44	; 0x2c
 8001c26:	bd90      	pop	{r4, r7, pc}
 8001c28:	40004400 	.word	0x40004400
 8001c2c:	40021000 	.word	0x40021000

08001c30 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001c34:	e7fe      	b.n	8001c34 <NMI_Handler+0x4>

08001c36 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c36:	b580      	push	{r7, lr}
 8001c38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c3a:	e7fe      	b.n	8001c3a <HardFault_Handler+0x4>

08001c3c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001c40:	46c0      	nop			; (mov r8, r8)
 8001c42:	46bd      	mov	sp, r7
 8001c44:	bd80      	pop	{r7, pc}

08001c46 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c46:	b580      	push	{r7, lr}
 8001c48:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c4a:	46c0      	nop			; (mov r8, r8)
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	bd80      	pop	{r7, pc}

08001c50 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c54:	f000 f8be 	bl	8001dd4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c58:	46c0      	nop			; (mov r8, r8)
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	bd80      	pop	{r7, pc}
	...

08001c60 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc);
 8001c64:	4b03      	ldr	r3, [pc, #12]	; (8001c74 <DMA1_Channel1_IRQHandler+0x14>)
 8001c66:	0018      	movs	r0, r3
 8001c68:	f000 fef8 	bl	8002a5c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001c6c:	46c0      	nop			; (mov r8, r8)
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bd80      	pop	{r7, pc}
 8001c72:	46c0      	nop			; (mov r8, r8)
 8001c74:	200000cc 	.word	0x200000cc

08001c78 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b086      	sub	sp, #24
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c80:	4a14      	ldr	r2, [pc, #80]	; (8001cd4 <_sbrk+0x5c>)
 8001c82:	4b15      	ldr	r3, [pc, #84]	; (8001cd8 <_sbrk+0x60>)
 8001c84:	1ad3      	subs	r3, r2, r3
 8001c86:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c88:	697b      	ldr	r3, [r7, #20]
 8001c8a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c8c:	4b13      	ldr	r3, [pc, #76]	; (8001cdc <_sbrk+0x64>)
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d102      	bne.n	8001c9a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c94:	4b11      	ldr	r3, [pc, #68]	; (8001cdc <_sbrk+0x64>)
 8001c96:	4a12      	ldr	r2, [pc, #72]	; (8001ce0 <_sbrk+0x68>)
 8001c98:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c9a:	4b10      	ldr	r3, [pc, #64]	; (8001cdc <_sbrk+0x64>)
 8001c9c:	681a      	ldr	r2, [r3, #0]
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	18d3      	adds	r3, r2, r3
 8001ca2:	693a      	ldr	r2, [r7, #16]
 8001ca4:	429a      	cmp	r2, r3
 8001ca6:	d207      	bcs.n	8001cb8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ca8:	f003 f836 	bl	8004d18 <__errno>
 8001cac:	0003      	movs	r3, r0
 8001cae:	220c      	movs	r2, #12
 8001cb0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001cb2:	2301      	movs	r3, #1
 8001cb4:	425b      	negs	r3, r3
 8001cb6:	e009      	b.n	8001ccc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001cb8:	4b08      	ldr	r3, [pc, #32]	; (8001cdc <_sbrk+0x64>)
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001cbe:	4b07      	ldr	r3, [pc, #28]	; (8001cdc <_sbrk+0x64>)
 8001cc0:	681a      	ldr	r2, [r3, #0]
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	18d2      	adds	r2, r2, r3
 8001cc6:	4b05      	ldr	r3, [pc, #20]	; (8001cdc <_sbrk+0x64>)
 8001cc8:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8001cca:	68fb      	ldr	r3, [r7, #12]
}
 8001ccc:	0018      	movs	r0, r3
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	b006      	add	sp, #24
 8001cd2:	bd80      	pop	{r7, pc}
 8001cd4:	20002000 	.word	0x20002000
 8001cd8:	00000400 	.word	0x00000400
 8001cdc:	200001e0 	.word	0x200001e0
 8001ce0:	200001f8 	.word	0x200001f8

08001ce4 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8001ce8:	46c0      	nop			; (mov r8, r8)
 8001cea:	46bd      	mov	sp, r7
 8001cec:	bd80      	pop	{r7, pc}
	...

08001cf0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001cf0:	480d      	ldr	r0, [pc, #52]	; (8001d28 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001cf2:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001cf4:	480d      	ldr	r0, [pc, #52]	; (8001d2c <LoopForever+0x6>)
  ldr r1, =_edata
 8001cf6:	490e      	ldr	r1, [pc, #56]	; (8001d30 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001cf8:	4a0e      	ldr	r2, [pc, #56]	; (8001d34 <LoopForever+0xe>)
  movs r3, #0
 8001cfa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001cfc:	e002      	b.n	8001d04 <LoopCopyDataInit>

08001cfe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001cfe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d00:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d02:	3304      	adds	r3, #4

08001d04 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d04:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d06:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d08:	d3f9      	bcc.n	8001cfe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d0a:	4a0b      	ldr	r2, [pc, #44]	; (8001d38 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001d0c:	4c0b      	ldr	r4, [pc, #44]	; (8001d3c <LoopForever+0x16>)
  movs r3, #0
 8001d0e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d10:	e001      	b.n	8001d16 <LoopFillZerobss>

08001d12 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d12:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d14:	3204      	adds	r2, #4

08001d16 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d16:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d18:	d3fb      	bcc.n	8001d12 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001d1a:	f7ff ffe3 	bl	8001ce4 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8001d1e:	f003 f801 	bl	8004d24 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001d22:	f7ff fbd3 	bl	80014cc <main>

08001d26 <LoopForever>:

LoopForever:
    b LoopForever
 8001d26:	e7fe      	b.n	8001d26 <LoopForever>
  ldr   r0, =_estack
 8001d28:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8001d2c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d30:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001d34:	08005760 	.word	0x08005760
  ldr r2, =_sbss
 8001d38:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001d3c:	200001f8 	.word	0x200001f8

08001d40 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001d40:	e7fe      	b.n	8001d40 <ADC1_IRQHandler>
	...

08001d44 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d48:	4b07      	ldr	r3, [pc, #28]	; (8001d68 <HAL_Init+0x24>)
 8001d4a:	681a      	ldr	r2, [r3, #0]
 8001d4c:	4b06      	ldr	r3, [pc, #24]	; (8001d68 <HAL_Init+0x24>)
 8001d4e:	2110      	movs	r1, #16
 8001d50:	430a      	orrs	r2, r1
 8001d52:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8001d54:	2000      	movs	r0, #0
 8001d56:	f000 f809 	bl	8001d6c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001d5a:	f7ff fe2b 	bl	80019b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d5e:	2300      	movs	r3, #0
}
 8001d60:	0018      	movs	r0, r3
 8001d62:	46bd      	mov	sp, r7
 8001d64:	bd80      	pop	{r7, pc}
 8001d66:	46c0      	nop			; (mov r8, r8)
 8001d68:	40022000 	.word	0x40022000

08001d6c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d6c:	b590      	push	{r4, r7, lr}
 8001d6e:	b083      	sub	sp, #12
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001d74:	4b14      	ldr	r3, [pc, #80]	; (8001dc8 <HAL_InitTick+0x5c>)
 8001d76:	681c      	ldr	r4, [r3, #0]
 8001d78:	4b14      	ldr	r3, [pc, #80]	; (8001dcc <HAL_InitTick+0x60>)
 8001d7a:	781b      	ldrb	r3, [r3, #0]
 8001d7c:	0019      	movs	r1, r3
 8001d7e:	23fa      	movs	r3, #250	; 0xfa
 8001d80:	0098      	lsls	r0, r3, #2
 8001d82:	f7fe f9d3 	bl	800012c <__udivsi3>
 8001d86:	0003      	movs	r3, r0
 8001d88:	0019      	movs	r1, r3
 8001d8a:	0020      	movs	r0, r4
 8001d8c:	f7fe f9ce 	bl	800012c <__udivsi3>
 8001d90:	0003      	movs	r3, r0
 8001d92:	0018      	movs	r0, r3
 8001d94:	f000 fda7 	bl	80028e6 <HAL_SYSTICK_Config>
 8001d98:	1e03      	subs	r3, r0, #0
 8001d9a:	d001      	beq.n	8001da0 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8001d9c:	2301      	movs	r3, #1
 8001d9e:	e00f      	b.n	8001dc0 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	2b03      	cmp	r3, #3
 8001da4:	d80b      	bhi.n	8001dbe <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001da6:	6879      	ldr	r1, [r7, #4]
 8001da8:	2301      	movs	r3, #1
 8001daa:	425b      	negs	r3, r3
 8001dac:	2200      	movs	r2, #0
 8001dae:	0018      	movs	r0, r3
 8001db0:	f000 fd74 	bl	800289c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001db4:	4b06      	ldr	r3, [pc, #24]	; (8001dd0 <HAL_InitTick+0x64>)
 8001db6:	687a      	ldr	r2, [r7, #4]
 8001db8:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8001dba:	2300      	movs	r3, #0
 8001dbc:	e000      	b.n	8001dc0 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8001dbe:	2301      	movs	r3, #1
}
 8001dc0:	0018      	movs	r0, r3
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	b003      	add	sp, #12
 8001dc6:	bd90      	pop	{r4, r7, pc}
 8001dc8:	20000000 	.word	0x20000000
 8001dcc:	20000008 	.word	0x20000008
 8001dd0:	20000004 	.word	0x20000004

08001dd4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001dd8:	4b05      	ldr	r3, [pc, #20]	; (8001df0 <HAL_IncTick+0x1c>)
 8001dda:	781b      	ldrb	r3, [r3, #0]
 8001ddc:	001a      	movs	r2, r3
 8001dde:	4b05      	ldr	r3, [pc, #20]	; (8001df4 <HAL_IncTick+0x20>)
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	18d2      	adds	r2, r2, r3
 8001de4:	4b03      	ldr	r3, [pc, #12]	; (8001df4 <HAL_IncTick+0x20>)
 8001de6:	601a      	str	r2, [r3, #0]
}
 8001de8:	46c0      	nop			; (mov r8, r8)
 8001dea:	46bd      	mov	sp, r7
 8001dec:	bd80      	pop	{r7, pc}
 8001dee:	46c0      	nop			; (mov r8, r8)
 8001df0:	20000008 	.word	0x20000008
 8001df4:	200001e4 	.word	0x200001e4

08001df8 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	af00      	add	r7, sp, #0
  return uwTick;
 8001dfc:	4b02      	ldr	r3, [pc, #8]	; (8001e08 <HAL_GetTick+0x10>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
}
 8001e00:	0018      	movs	r0, r3
 8001e02:	46bd      	mov	sp, r7
 8001e04:	bd80      	pop	{r7, pc}
 8001e06:	46c0      	nop			; (mov r8, r8)
 8001e08:	200001e4 	.word	0x200001e4

08001e0c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b084      	sub	sp, #16
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e14:	f7ff fff0 	bl	8001df8 <HAL_GetTick>
 8001e18:	0003      	movs	r3, r0
 8001e1a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	3301      	adds	r3, #1
 8001e24:	d005      	beq.n	8001e32 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001e26:	4b0a      	ldr	r3, [pc, #40]	; (8001e50 <HAL_Delay+0x44>)
 8001e28:	781b      	ldrb	r3, [r3, #0]
 8001e2a:	001a      	movs	r2, r3
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	189b      	adds	r3, r3, r2
 8001e30:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001e32:	46c0      	nop			; (mov r8, r8)
 8001e34:	f7ff ffe0 	bl	8001df8 <HAL_GetTick>
 8001e38:	0002      	movs	r2, r0
 8001e3a:	68bb      	ldr	r3, [r7, #8]
 8001e3c:	1ad3      	subs	r3, r2, r3
 8001e3e:	68fa      	ldr	r2, [r7, #12]
 8001e40:	429a      	cmp	r2, r3
 8001e42:	d8f7      	bhi.n	8001e34 <HAL_Delay+0x28>
  {
  }
}
 8001e44:	46c0      	nop			; (mov r8, r8)
 8001e46:	46c0      	nop			; (mov r8, r8)
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	b004      	add	sp, #16
 8001e4c:	bd80      	pop	{r7, pc}
 8001e4e:	46c0      	nop			; (mov r8, r8)
 8001e50:	20000008 	.word	0x20000008

08001e54 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b084      	sub	sp, #16
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e5c:	230f      	movs	r3, #15
 8001e5e:	18fb      	adds	r3, r7, r3
 8001e60:	2200      	movs	r2, #0
 8001e62:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 8001e64:	2300      	movs	r3, #0
 8001e66:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d101      	bne.n	8001e72 <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 8001e6e:	2301      	movs	r3, #1
 8001e70:	e125      	b.n	80020be <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d10a      	bne.n	8001e90 <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	2234      	movs	r2, #52	; 0x34
 8001e84:	2100      	movs	r1, #0
 8001e86:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	0018      	movs	r0, r3
 8001e8c:	f7ff fdb6 	bl	80019fc <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e94:	2210      	movs	r2, #16
 8001e96:	4013      	ands	r3, r2
 8001e98:	d000      	beq.n	8001e9c <HAL_ADC_Init+0x48>
 8001e9a:	e103      	b.n	80020a4 <HAL_ADC_Init+0x250>
 8001e9c:	230f      	movs	r3, #15
 8001e9e:	18fb      	adds	r3, r7, r3
 8001ea0:	781b      	ldrb	r3, [r3, #0]
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d000      	beq.n	8001ea8 <HAL_ADC_Init+0x54>
 8001ea6:	e0fd      	b.n	80020a4 <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	689b      	ldr	r3, [r3, #8]
 8001eae:	2204      	movs	r2, #4
 8001eb0:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 8001eb2:	d000      	beq.n	8001eb6 <HAL_ADC_Init+0x62>
 8001eb4:	e0f6      	b.n	80020a4 <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001eba:	4a83      	ldr	r2, [pc, #524]	; (80020c8 <HAL_ADC_Init+0x274>)
 8001ebc:	4013      	ands	r3, r2
 8001ebe:	2202      	movs	r2, #2
 8001ec0:	431a      	orrs	r2, r3
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	639a      	str	r2, [r3, #56]	; 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	689b      	ldr	r3, [r3, #8]
 8001ecc:	2203      	movs	r2, #3
 8001ece:	4013      	ands	r3, r2
 8001ed0:	2b01      	cmp	r3, #1
 8001ed2:	d112      	bne.n	8001efa <HAL_ADC_Init+0xa6>
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	2201      	movs	r2, #1
 8001edc:	4013      	ands	r3, r2
 8001ede:	2b01      	cmp	r3, #1
 8001ee0:	d009      	beq.n	8001ef6 <HAL_ADC_Init+0xa2>
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	68da      	ldr	r2, [r3, #12]
 8001ee8:	2380      	movs	r3, #128	; 0x80
 8001eea:	021b      	lsls	r3, r3, #8
 8001eec:	401a      	ands	r2, r3
 8001eee:	2380      	movs	r3, #128	; 0x80
 8001ef0:	021b      	lsls	r3, r3, #8
 8001ef2:	429a      	cmp	r2, r3
 8001ef4:	d101      	bne.n	8001efa <HAL_ADC_Init+0xa6>
 8001ef6:	2301      	movs	r3, #1
 8001ef8:	e000      	b.n	8001efc <HAL_ADC_Init+0xa8>
 8001efa:	2300      	movs	r3, #0
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d116      	bne.n	8001f2e <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	68db      	ldr	r3, [r3, #12]
 8001f06:	2218      	movs	r2, #24
 8001f08:	4393      	bics	r3, r2
 8001f0a:	0019      	movs	r1, r3
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	689a      	ldr	r2, [r3, #8]
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	430a      	orrs	r2, r1
 8001f16:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	691b      	ldr	r3, [r3, #16]
 8001f1e:	009b      	lsls	r3, r3, #2
 8001f20:	0899      	lsrs	r1, r3, #2
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	685a      	ldr	r2, [r3, #4]
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	430a      	orrs	r2, r1
 8001f2c:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	68da      	ldr	r2, [r3, #12]
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	4964      	ldr	r1, [pc, #400]	; (80020cc <HAL_ADC_Init+0x278>)
 8001f3a:	400a      	ands	r2, r1
 8001f3c:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	7e1b      	ldrb	r3, [r3, #24]
 8001f42:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	7e5b      	ldrb	r3, [r3, #25]
 8001f48:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001f4a:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	7e9b      	ldrb	r3, [r3, #26]
 8001f50:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8001f52:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f58:	2b01      	cmp	r3, #1
 8001f5a:	d002      	beq.n	8001f62 <HAL_ADC_Init+0x10e>
 8001f5c:	2380      	movs	r3, #128	; 0x80
 8001f5e:	015b      	lsls	r3, r3, #5
 8001f60:	e000      	b.n	8001f64 <HAL_ADC_Init+0x110>
 8001f62:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8001f64:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8001f6a:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	691b      	ldr	r3, [r3, #16]
 8001f70:	2b02      	cmp	r3, #2
 8001f72:	d101      	bne.n	8001f78 <HAL_ADC_Init+0x124>
 8001f74:	2304      	movs	r3, #4
 8001f76:	e000      	b.n	8001f7a <HAL_ADC_Init+0x126>
 8001f78:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 8001f7a:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	2124      	movs	r1, #36	; 0x24
 8001f80:	5c5b      	ldrb	r3, [r3, r1]
 8001f82:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8001f84:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001f86:	68ba      	ldr	r2, [r7, #8]
 8001f88:	4313      	orrs	r3, r2
 8001f8a:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	7edb      	ldrb	r3, [r3, #27]
 8001f90:	2b01      	cmp	r3, #1
 8001f92:	d115      	bne.n	8001fc0 <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	7e9b      	ldrb	r3, [r3, #26]
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d105      	bne.n	8001fa8 <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8001f9c:	68bb      	ldr	r3, [r7, #8]
 8001f9e:	2280      	movs	r2, #128	; 0x80
 8001fa0:	0252      	lsls	r2, r2, #9
 8001fa2:	4313      	orrs	r3, r2
 8001fa4:	60bb      	str	r3, [r7, #8]
 8001fa6:	e00b      	b.n	8001fc0 <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fac:	2220      	movs	r2, #32
 8001fae:	431a      	orrs	r2, r3
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fb8:	2201      	movs	r2, #1
 8001fba:	431a      	orrs	r2, r3
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	63da      	str	r2, [r3, #60]	; 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	69da      	ldr	r2, [r3, #28]
 8001fc4:	23c2      	movs	r3, #194	; 0xc2
 8001fc6:	33ff      	adds	r3, #255	; 0xff
 8001fc8:	429a      	cmp	r2, r3
 8001fca:	d007      	beq.n	8001fdc <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8001fd4:	4313      	orrs	r3, r2
 8001fd6:	68ba      	ldr	r2, [r7, #8]
 8001fd8:	4313      	orrs	r3, r2
 8001fda:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	68d9      	ldr	r1, [r3, #12]
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	68ba      	ldr	r2, [r7, #8]
 8001fe8:	430a      	orrs	r2, r1
 8001fea:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ff0:	2380      	movs	r3, #128	; 0x80
 8001ff2:	055b      	lsls	r3, r3, #21
 8001ff4:	429a      	cmp	r2, r3
 8001ff6:	d01b      	beq.n	8002030 <HAL_ADC_Init+0x1dc>
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ffc:	2b01      	cmp	r3, #1
 8001ffe:	d017      	beq.n	8002030 <HAL_ADC_Init+0x1dc>
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002004:	2b02      	cmp	r3, #2
 8002006:	d013      	beq.n	8002030 <HAL_ADC_Init+0x1dc>
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800200c:	2b03      	cmp	r3, #3
 800200e:	d00f      	beq.n	8002030 <HAL_ADC_Init+0x1dc>
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002014:	2b04      	cmp	r3, #4
 8002016:	d00b      	beq.n	8002030 <HAL_ADC_Init+0x1dc>
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800201c:	2b05      	cmp	r3, #5
 800201e:	d007      	beq.n	8002030 <HAL_ADC_Init+0x1dc>
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002024:	2b06      	cmp	r3, #6
 8002026:	d003      	beq.n	8002030 <HAL_ADC_Init+0x1dc>
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800202c:	2b07      	cmp	r3, #7
 800202e:	d112      	bne.n	8002056 <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	695a      	ldr	r2, [r3, #20]
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	2107      	movs	r1, #7
 800203c:	438a      	bics	r2, r1
 800203e:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	6959      	ldr	r1, [r3, #20]
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800204a:	2207      	movs	r2, #7
 800204c:	401a      	ands	r2, r3
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	430a      	orrs	r2, r1
 8002054:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	68db      	ldr	r3, [r3, #12]
 800205c:	4a1c      	ldr	r2, [pc, #112]	; (80020d0 <HAL_ADC_Init+0x27c>)
 800205e:	4013      	ands	r3, r2
 8002060:	68ba      	ldr	r2, [r7, #8]
 8002062:	429a      	cmp	r2, r3
 8002064:	d10b      	bne.n	800207e <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	2200      	movs	r2, #0
 800206a:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002070:	2203      	movs	r2, #3
 8002072:	4393      	bics	r3, r2
 8002074:	2201      	movs	r2, #1
 8002076:	431a      	orrs	r2, r3
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	639a      	str	r2, [r3, #56]	; 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 800207c:	e01c      	b.n	80020b8 <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002082:	2212      	movs	r2, #18
 8002084:	4393      	bics	r3, r2
 8002086:	2210      	movs	r2, #16
 8002088:	431a      	orrs	r2, r3
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002092:	2201      	movs	r2, #1
 8002094:	431a      	orrs	r2, r3
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	63da      	str	r2, [r3, #60]	; 0x3c
      
      tmp_hal_status = HAL_ERROR;
 800209a:	230f      	movs	r3, #15
 800209c:	18fb      	adds	r3, r7, r3
 800209e:	2201      	movs	r2, #1
 80020a0:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 80020a2:	e009      	b.n	80020b8 <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020a8:	2210      	movs	r2, #16
 80020aa:	431a      	orrs	r2, r3
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	639a      	str	r2, [r3, #56]	; 0x38
        
    tmp_hal_status = HAL_ERROR;
 80020b0:	230f      	movs	r3, #15
 80020b2:	18fb      	adds	r3, r7, r3
 80020b4:	2201      	movs	r2, #1
 80020b6:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80020b8:	230f      	movs	r3, #15
 80020ba:	18fb      	adds	r3, r7, r3
 80020bc:	781b      	ldrb	r3, [r3, #0]
}
 80020be:	0018      	movs	r0, r3
 80020c0:	46bd      	mov	sp, r7
 80020c2:	b004      	add	sp, #16
 80020c4:	bd80      	pop	{r7, pc}
 80020c6:	46c0      	nop			; (mov r8, r8)
 80020c8:	fffffefd 	.word	0xfffffefd
 80020cc:	fffe0219 	.word	0xfffe0219
 80020d0:	833fffe7 	.word	0x833fffe7

080020d4 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80020d4:	b590      	push	{r4, r7, lr}
 80020d6:	b087      	sub	sp, #28
 80020d8:	af00      	add	r7, sp, #0
 80020da:	60f8      	str	r0, [r7, #12]
 80020dc:	60b9      	str	r1, [r7, #8]
 80020de:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80020e0:	2317      	movs	r3, #23
 80020e2:	18fb      	adds	r3, r7, r3
 80020e4:	2200      	movs	r2, #0
 80020e6:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	689b      	ldr	r3, [r3, #8]
 80020ee:	2204      	movs	r2, #4
 80020f0:	4013      	ands	r3, r2
 80020f2:	d15e      	bne.n	80021b2 <HAL_ADC_Start_DMA+0xde>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	2234      	movs	r2, #52	; 0x34
 80020f8:	5c9b      	ldrb	r3, [r3, r2]
 80020fa:	2b01      	cmp	r3, #1
 80020fc:	d101      	bne.n	8002102 <HAL_ADC_Start_DMA+0x2e>
 80020fe:	2302      	movs	r3, #2
 8002100:	e05e      	b.n	80021c0 <HAL_ADC_Start_DMA+0xec>
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	2234      	movs	r2, #52	; 0x34
 8002106:	2101      	movs	r1, #1
 8002108:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are       */
    /* performed automatically by hardware.                                     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	7e5b      	ldrb	r3, [r3, #25]
 800210e:	2b01      	cmp	r3, #1
 8002110:	d007      	beq.n	8002122 <HAL_ADC_Start_DMA+0x4e>
    {
      tmp_hal_status = ADC_Enable(hadc);
 8002112:	2317      	movs	r3, #23
 8002114:	18fc      	adds	r4, r7, r3
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	0018      	movs	r0, r3
 800211a:	f000 f963 	bl	80023e4 <ADC_Enable>
 800211e:	0003      	movs	r3, r0
 8002120:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002122:	2317      	movs	r3, #23
 8002124:	18fb      	adds	r3, r7, r3
 8002126:	781b      	ldrb	r3, [r3, #0]
 8002128:	2b00      	cmp	r3, #0
 800212a:	d146      	bne.n	80021ba <HAL_ADC_Start_DMA+0xe6>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002130:	4a25      	ldr	r2, [pc, #148]	; (80021c8 <HAL_ADC_Start_DMA+0xf4>)
 8002132:	4013      	ands	r3, r2
 8002134:	2280      	movs	r2, #128	; 0x80
 8002136:	0052      	lsls	r2, r2, #1
 8002138:	431a      	orrs	r2, r3
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	2200      	movs	r2, #0
 8002142:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	2234      	movs	r2, #52	; 0x34
 8002148:	2100      	movs	r1, #0
 800214a:	5499      	strb	r1, [r3, r2]

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002150:	4a1e      	ldr	r2, [pc, #120]	; (80021cc <HAL_ADC_Start_DMA+0xf8>)
 8002152:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002158:	4a1d      	ldr	r2, [pc, #116]	; (80021d0 <HAL_ADC_Start_DMA+0xfc>)
 800215a:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002160:	4a1c      	ldr	r2, [pc, #112]	; (80021d4 <HAL_ADC_Start_DMA+0x100>)
 8002162:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	221c      	movs	r2, #28
 800216a:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	685a      	ldr	r2, [r3, #4]
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	2110      	movs	r1, #16
 8002178:	430a      	orrs	r2, r1
 800217a:	605a      	str	r2, [r3, #4]
      
      /* Enable ADC DMA mode */
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	68da      	ldr	r2, [r3, #12]
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	2101      	movs	r1, #1
 8002188:	430a      	orrs	r2, r1
 800218a:	60da      	str	r2, [r3, #12]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	3340      	adds	r3, #64	; 0x40
 8002196:	0019      	movs	r1, r3
 8002198:	68ba      	ldr	r2, [r7, #8]
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	f000 fbf8 	bl	8002990 <HAL_DMA_Start_IT>
           
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	689a      	ldr	r2, [r3, #8]
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	2104      	movs	r1, #4
 80021ac:	430a      	orrs	r2, r1
 80021ae:	609a      	str	r2, [r3, #8]
 80021b0:	e003      	b.n	80021ba <HAL_ADC_Start_DMA+0xe6>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80021b2:	2317      	movs	r3, #23
 80021b4:	18fb      	adds	r3, r7, r3
 80021b6:	2202      	movs	r2, #2
 80021b8:	701a      	strb	r2, [r3, #0]
  }
    
  /* Return function status */
  return tmp_hal_status;
 80021ba:	2317      	movs	r3, #23
 80021bc:	18fb      	adds	r3, r7, r3
 80021be:	781b      	ldrb	r3, [r3, #0]
}
 80021c0:	0018      	movs	r0, r3
 80021c2:	46bd      	mov	sp, r7
 80021c4:	b007      	add	sp, #28
 80021c6:	bd90      	pop	{r4, r7, pc}
 80021c8:	fffff0fe 	.word	0xfffff0fe
 80021cc:	080024ed 	.word	0x080024ed
 80021d0:	080025a1 	.word	0x080025a1
 80021d4:	080025bf 	.word	0x080025bf

080021d8 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	b082      	sub	sp, #8
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80021e0:	46c0      	nop			; (mov r8, r8)
 80021e2:	46bd      	mov	sp, r7
 80021e4:	b002      	add	sp, #8
 80021e6:	bd80      	pop	{r7, pc}

080021e8 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b082      	sub	sp, #8
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80021f0:	46c0      	nop			; (mov r8, r8)
 80021f2:	46bd      	mov	sp, r7
 80021f4:	b002      	add	sp, #8
 80021f6:	bd80      	pop	{r7, pc}

080021f8 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b084      	sub	sp, #16
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
 8002200:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002202:	230f      	movs	r3, #15
 8002204:	18fb      	adds	r3, r7, r3
 8002206:	2200      	movs	r2, #0
 8002208:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 800220a:	2300      	movs	r3, #0
 800220c:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002212:	2380      	movs	r3, #128	; 0x80
 8002214:	055b      	lsls	r3, r3, #21
 8002216:	429a      	cmp	r2, r3
 8002218:	d011      	beq.n	800223e <HAL_ADC_ConfigChannel+0x46>
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800221e:	2b01      	cmp	r3, #1
 8002220:	d00d      	beq.n	800223e <HAL_ADC_ConfigChannel+0x46>
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002226:	2b02      	cmp	r3, #2
 8002228:	d009      	beq.n	800223e <HAL_ADC_ConfigChannel+0x46>
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800222e:	2b03      	cmp	r3, #3
 8002230:	d005      	beq.n	800223e <HAL_ADC_ConfigChannel+0x46>
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002236:	2b04      	cmp	r3, #4
 8002238:	d001      	beq.n	800223e <HAL_ADC_ConfigChannel+0x46>
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	2234      	movs	r2, #52	; 0x34
 8002242:	5c9b      	ldrb	r3, [r3, r2]
 8002244:	2b01      	cmp	r3, #1
 8002246:	d101      	bne.n	800224c <HAL_ADC_ConfigChannel+0x54>
 8002248:	2302      	movs	r3, #2
 800224a:	e0bb      	b.n	80023c4 <HAL_ADC_ConfigChannel+0x1cc>
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	2234      	movs	r2, #52	; 0x34
 8002250:	2101      	movs	r1, #1
 8002252:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	689b      	ldr	r3, [r3, #8]
 800225a:	2204      	movs	r2, #4
 800225c:	4013      	ands	r3, r2
 800225e:	d000      	beq.n	8002262 <HAL_ADC_ConfigChannel+0x6a>
 8002260:	e09f      	b.n	80023a2 <HAL_ADC_ConfigChannel+0x1aa>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 8002262:	683b      	ldr	r3, [r7, #0]
 8002264:	685b      	ldr	r3, [r3, #4]
 8002266:	4a59      	ldr	r2, [pc, #356]	; (80023cc <HAL_ADC_ConfigChannel+0x1d4>)
 8002268:	4293      	cmp	r3, r2
 800226a:	d100      	bne.n	800226e <HAL_ADC_ConfigChannel+0x76>
 800226c:	e077      	b.n	800235e <HAL_ADC_ConfigChannel+0x166>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	2201      	movs	r2, #1
 800227a:	409a      	lsls	r2, r3
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	430a      	orrs	r2, r1
 8002282:	629a      	str	r2, [r3, #40]	; 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002288:	2380      	movs	r3, #128	; 0x80
 800228a:	055b      	lsls	r3, r3, #21
 800228c:	429a      	cmp	r2, r3
 800228e:	d037      	beq.n	8002300 <HAL_ADC_ConfigChannel+0x108>
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002294:	2b01      	cmp	r3, #1
 8002296:	d033      	beq.n	8002300 <HAL_ADC_ConfigChannel+0x108>
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800229c:	2b02      	cmp	r3, #2
 800229e:	d02f      	beq.n	8002300 <HAL_ADC_ConfigChannel+0x108>
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022a4:	2b03      	cmp	r3, #3
 80022a6:	d02b      	beq.n	8002300 <HAL_ADC_ConfigChannel+0x108>
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022ac:	2b04      	cmp	r3, #4
 80022ae:	d027      	beq.n	8002300 <HAL_ADC_ConfigChannel+0x108>
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022b4:	2b05      	cmp	r3, #5
 80022b6:	d023      	beq.n	8002300 <HAL_ADC_ConfigChannel+0x108>
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022bc:	2b06      	cmp	r3, #6
 80022be:	d01f      	beq.n	8002300 <HAL_ADC_ConfigChannel+0x108>
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022c4:	2b07      	cmp	r3, #7
 80022c6:	d01b      	beq.n	8002300 <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of reoccurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 80022c8:	683b      	ldr	r3, [r7, #0]
 80022ca:	689a      	ldr	r2, [r3, #8]
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	695b      	ldr	r3, [r3, #20]
 80022d2:	2107      	movs	r1, #7
 80022d4:	400b      	ands	r3, r1
 80022d6:	429a      	cmp	r2, r3
 80022d8:	d012      	beq.n	8002300 <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	695a      	ldr	r2, [r3, #20]
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	2107      	movs	r1, #7
 80022e6:	438a      	bics	r2, r1
 80022e8:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	6959      	ldr	r1, [r3, #20]
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	689b      	ldr	r3, [r3, #8]
 80022f4:	2207      	movs	r2, #7
 80022f6:	401a      	ands	r2, r3
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	430a      	orrs	r2, r1
 80022fe:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	2b10      	cmp	r3, #16
 8002306:	d003      	beq.n	8002310 <HAL_ADC_ConfigChannel+0x118>
 8002308:	683b      	ldr	r3, [r7, #0]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	2b11      	cmp	r3, #17
 800230e:	d152      	bne.n	80023b6 <HAL_ADC_ConfigChannel+0x1be>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8002310:	4b2f      	ldr	r3, [pc, #188]	; (80023d0 <HAL_ADC_ConfigChannel+0x1d8>)
 8002312:	6819      	ldr	r1, [r3, #0]
 8002314:	683b      	ldr	r3, [r7, #0]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	2b10      	cmp	r3, #16
 800231a:	d102      	bne.n	8002322 <HAL_ADC_ConfigChannel+0x12a>
 800231c:	2380      	movs	r3, #128	; 0x80
 800231e:	041b      	lsls	r3, r3, #16
 8002320:	e001      	b.n	8002326 <HAL_ADC_ConfigChannel+0x12e>
 8002322:	2380      	movs	r3, #128	; 0x80
 8002324:	03db      	lsls	r3, r3, #15
 8002326:	4a2a      	ldr	r2, [pc, #168]	; (80023d0 <HAL_ADC_ConfigChannel+0x1d8>)
 8002328:	430b      	orrs	r3, r1
 800232a:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800232c:	683b      	ldr	r3, [r7, #0]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	2b10      	cmp	r3, #16
 8002332:	d140      	bne.n	80023b6 <HAL_ADC_ConfigChannel+0x1be>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002334:	4b27      	ldr	r3, [pc, #156]	; (80023d4 <HAL_ADC_ConfigChannel+0x1dc>)
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	4927      	ldr	r1, [pc, #156]	; (80023d8 <HAL_ADC_ConfigChannel+0x1e0>)
 800233a:	0018      	movs	r0, r3
 800233c:	f7fd fef6 	bl	800012c <__udivsi3>
 8002340:	0003      	movs	r3, r0
 8002342:	001a      	movs	r2, r3
 8002344:	0013      	movs	r3, r2
 8002346:	009b      	lsls	r3, r3, #2
 8002348:	189b      	adds	r3, r3, r2
 800234a:	005b      	lsls	r3, r3, #1
 800234c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800234e:	e002      	b.n	8002356 <HAL_ADC_ConfigChannel+0x15e>
          {
            wait_loop_index--;
 8002350:	68bb      	ldr	r3, [r7, #8]
 8002352:	3b01      	subs	r3, #1
 8002354:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002356:	68bb      	ldr	r3, [r7, #8]
 8002358:	2b00      	cmp	r3, #0
 800235a:	d1f9      	bne.n	8002350 <HAL_ADC_ConfigChannel+0x158>
 800235c:	e02b      	b.n	80023b6 <HAL_ADC_ConfigChannel+0x1be>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	2101      	movs	r1, #1
 800236a:	4099      	lsls	r1, r3
 800236c:	000b      	movs	r3, r1
 800236e:	43d9      	mvns	r1, r3
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	400a      	ands	r2, r1
 8002376:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	2b10      	cmp	r3, #16
 800237e:	d003      	beq.n	8002388 <HAL_ADC_ConfigChannel+0x190>
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	2b11      	cmp	r3, #17
 8002386:	d116      	bne.n	80023b6 <HAL_ADC_ConfigChannel+0x1be>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8002388:	4b11      	ldr	r3, [pc, #68]	; (80023d0 <HAL_ADC_ConfigChannel+0x1d8>)
 800238a:	6819      	ldr	r1, [r3, #0]
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	2b10      	cmp	r3, #16
 8002392:	d101      	bne.n	8002398 <HAL_ADC_ConfigChannel+0x1a0>
 8002394:	4a11      	ldr	r2, [pc, #68]	; (80023dc <HAL_ADC_ConfigChannel+0x1e4>)
 8002396:	e000      	b.n	800239a <HAL_ADC_ConfigChannel+0x1a2>
 8002398:	4a11      	ldr	r2, [pc, #68]	; (80023e0 <HAL_ADC_ConfigChannel+0x1e8>)
 800239a:	4b0d      	ldr	r3, [pc, #52]	; (80023d0 <HAL_ADC_ConfigChannel+0x1d8>)
 800239c:	400a      	ands	r2, r1
 800239e:	601a      	str	r2, [r3, #0]
 80023a0:	e009      	b.n	80023b6 <HAL_ADC_ConfigChannel+0x1be>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023a6:	2220      	movs	r2, #32
 80023a8:	431a      	orrs	r2, r3
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 80023ae:	230f      	movs	r3, #15
 80023b0:	18fb      	adds	r3, r7, r3
 80023b2:	2201      	movs	r2, #1
 80023b4:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	2234      	movs	r2, #52	; 0x34
 80023ba:	2100      	movs	r1, #0
 80023bc:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 80023be:	230f      	movs	r3, #15
 80023c0:	18fb      	adds	r3, r7, r3
 80023c2:	781b      	ldrb	r3, [r3, #0]
}
 80023c4:	0018      	movs	r0, r3
 80023c6:	46bd      	mov	sp, r7
 80023c8:	b004      	add	sp, #16
 80023ca:	bd80      	pop	{r7, pc}
 80023cc:	00001001 	.word	0x00001001
 80023d0:	40012708 	.word	0x40012708
 80023d4:	20000000 	.word	0x20000000
 80023d8:	000f4240 	.word	0x000f4240
 80023dc:	ff7fffff 	.word	0xff7fffff
 80023e0:	ffbfffff 	.word	0xffbfffff

080023e4 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b084      	sub	sp, #16
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80023ec:	2300      	movs	r3, #0
 80023ee:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80023f0:	2300      	movs	r3, #0
 80023f2:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	689b      	ldr	r3, [r3, #8]
 80023fa:	2203      	movs	r2, #3
 80023fc:	4013      	ands	r3, r2
 80023fe:	2b01      	cmp	r3, #1
 8002400:	d112      	bne.n	8002428 <ADC_Enable+0x44>
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	2201      	movs	r2, #1
 800240a:	4013      	ands	r3, r2
 800240c:	2b01      	cmp	r3, #1
 800240e:	d009      	beq.n	8002424 <ADC_Enable+0x40>
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	68da      	ldr	r2, [r3, #12]
 8002416:	2380      	movs	r3, #128	; 0x80
 8002418:	021b      	lsls	r3, r3, #8
 800241a:	401a      	ands	r2, r3
 800241c:	2380      	movs	r3, #128	; 0x80
 800241e:	021b      	lsls	r3, r3, #8
 8002420:	429a      	cmp	r2, r3
 8002422:	d101      	bne.n	8002428 <ADC_Enable+0x44>
 8002424:	2301      	movs	r3, #1
 8002426:	e000      	b.n	800242a <ADC_Enable+0x46>
 8002428:	2300      	movs	r3, #0
 800242a:	2b00      	cmp	r3, #0
 800242c:	d152      	bne.n	80024d4 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	689b      	ldr	r3, [r3, #8]
 8002434:	4a2a      	ldr	r2, [pc, #168]	; (80024e0 <ADC_Enable+0xfc>)
 8002436:	4013      	ands	r3, r2
 8002438:	d00d      	beq.n	8002456 <ADC_Enable+0x72>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800243e:	2210      	movs	r2, #16
 8002440:	431a      	orrs	r2, r3
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	639a      	str	r2, [r3, #56]	; 0x38
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800244a:	2201      	movs	r2, #1
 800244c:	431a      	orrs	r2, r3
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	63da      	str	r2, [r3, #60]	; 0x3c
      
      return HAL_ERROR;
 8002452:	2301      	movs	r3, #1
 8002454:	e03f      	b.n	80024d6 <ADC_Enable+0xf2>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	689a      	ldr	r2, [r3, #8]
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	2101      	movs	r1, #1
 8002462:	430a      	orrs	r2, r1
 8002464:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002466:	4b1f      	ldr	r3, [pc, #124]	; (80024e4 <ADC_Enable+0x100>)
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	491f      	ldr	r1, [pc, #124]	; (80024e8 <ADC_Enable+0x104>)
 800246c:	0018      	movs	r0, r3
 800246e:	f7fd fe5d 	bl	800012c <__udivsi3>
 8002472:	0003      	movs	r3, r0
 8002474:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002476:	e002      	b.n	800247e <ADC_Enable+0x9a>
    {
      wait_loop_index--;
 8002478:	68bb      	ldr	r3, [r7, #8]
 800247a:	3b01      	subs	r3, #1
 800247c:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800247e:	68bb      	ldr	r3, [r7, #8]
 8002480:	2b00      	cmp	r3, #0
 8002482:	d1f9      	bne.n	8002478 <ADC_Enable+0x94>
    }

    /* Get tick count */
    tickstart = HAL_GetTick();
 8002484:	f7ff fcb8 	bl	8001df8 <HAL_GetTick>
 8002488:	0003      	movs	r3, r0
 800248a:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800248c:	e01b      	b.n	80024c6 <ADC_Enable+0xe2>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800248e:	f7ff fcb3 	bl	8001df8 <HAL_GetTick>
 8002492:	0002      	movs	r2, r0
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	1ad3      	subs	r3, r2, r3
 8002498:	2b02      	cmp	r3, #2
 800249a:	d914      	bls.n	80024c6 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	2201      	movs	r2, #1
 80024a4:	4013      	ands	r3, r2
 80024a6:	2b01      	cmp	r3, #1
 80024a8:	d00d      	beq.n	80024c6 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024ae:	2210      	movs	r2, #16
 80024b0:	431a      	orrs	r2, r3
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	639a      	str	r2, [r3, #56]	; 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024ba:	2201      	movs	r2, #1
 80024bc:	431a      	orrs	r2, r3
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	63da      	str	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80024c2:	2301      	movs	r3, #1
 80024c4:	e007      	b.n	80024d6 <ADC_Enable+0xf2>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	2201      	movs	r2, #1
 80024ce:	4013      	ands	r3, r2
 80024d0:	2b01      	cmp	r3, #1
 80024d2:	d1dc      	bne.n	800248e <ADC_Enable+0xaa>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80024d4:	2300      	movs	r3, #0
}
 80024d6:	0018      	movs	r0, r3
 80024d8:	46bd      	mov	sp, r7
 80024da:	b004      	add	sp, #16
 80024dc:	bd80      	pop	{r7, pc}
 80024de:	46c0      	nop			; (mov r8, r8)
 80024e0:	80000017 	.word	0x80000017
 80024e4:	20000000 	.word	0x20000000
 80024e8:	000f4240 	.word	0x000f4240

080024ec <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b084      	sub	sp, #16
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024f8:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024fe:	2250      	movs	r2, #80	; 0x50
 8002500:	4013      	ands	r3, r2
 8002502:	d140      	bne.n	8002586 <ADC_DMAConvCplt+0x9a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002508:	2280      	movs	r2, #128	; 0x80
 800250a:	0092      	lsls	r2, r2, #2
 800250c:	431a      	orrs	r2, r3
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	68da      	ldr	r2, [r3, #12]
 8002518:	23c0      	movs	r3, #192	; 0xc0
 800251a:	011b      	lsls	r3, r3, #4
 800251c:	4013      	ands	r3, r2
 800251e:	d12d      	bne.n	800257c <ADC_DMAConvCplt+0x90>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	7e9b      	ldrb	r3, [r3, #26]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002524:	2b00      	cmp	r3, #0
 8002526:	d129      	bne.n	800257c <ADC_DMAConvCplt+0x90>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	2208      	movs	r2, #8
 8002530:	4013      	ands	r3, r2
 8002532:	2b08      	cmp	r3, #8
 8002534:	d122      	bne.n	800257c <ADC_DMAConvCplt+0x90>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	689b      	ldr	r3, [r3, #8]
 800253c:	2204      	movs	r2, #4
 800253e:	4013      	ands	r3, r2
 8002540:	d110      	bne.n	8002564 <ADC_DMAConvCplt+0x78>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	685a      	ldr	r2, [r3, #4]
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	210c      	movs	r1, #12
 800254e:	438a      	bics	r2, r1
 8002550:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002556:	4a11      	ldr	r2, [pc, #68]	; (800259c <ADC_DMAConvCplt+0xb0>)
 8002558:	4013      	ands	r3, r2
 800255a:	2201      	movs	r2, #1
 800255c:	431a      	orrs	r2, r3
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	639a      	str	r2, [r3, #56]	; 0x38
 8002562:	e00b      	b.n	800257c <ADC_DMAConvCplt+0x90>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002568:	2220      	movs	r2, #32
 800256a:	431a      	orrs	r2, r3
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	639a      	str	r2, [r3, #56]	; 0x38
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002574:	2201      	movs	r2, #1
 8002576:	431a      	orrs	r2, r3
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	0018      	movs	r0, r3
 8002580:	f7ff fa00 	bl	8001984 <HAL_ADC_ConvCpltCallback>
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }

}
 8002584:	e005      	b.n	8002592 <ADC_DMAConvCplt+0xa6>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800258a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800258c:	687a      	ldr	r2, [r7, #4]
 800258e:	0010      	movs	r0, r2
 8002590:	4798      	blx	r3
}
 8002592:	46c0      	nop			; (mov r8, r8)
 8002594:	46bd      	mov	sp, r7
 8002596:	b004      	add	sp, #16
 8002598:	bd80      	pop	{r7, pc}
 800259a:	46c0      	nop			; (mov r8, r8)
 800259c:	fffffefe 	.word	0xfffffefe

080025a0 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	b084      	sub	sp, #16
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025ac:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc); 
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	0018      	movs	r0, r3
 80025b2:	f7ff fe11 	bl	80021d8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80025b6:	46c0      	nop			; (mov r8, r8)
 80025b8:	46bd      	mov	sp, r7
 80025ba:	b004      	add	sp, #16
 80025bc:	bd80      	pop	{r7, pc}

080025be <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80025be:	b580      	push	{r7, lr}
 80025c0:	b084      	sub	sp, #16
 80025c2:	af00      	add	r7, sp, #0
 80025c4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025ca:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025d0:	2240      	movs	r2, #64	; 0x40
 80025d2:	431a      	orrs	r2, r3
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025dc:	2204      	movs	r2, #4
 80025de:	431a      	orrs	r2, r3
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	63da      	str	r2, [r3, #60]	; 0x3c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc); 
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	0018      	movs	r0, r3
 80025e8:	f7ff fdfe 	bl	80021e8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80025ec:	46c0      	nop			; (mov r8, r8)
 80025ee:	46bd      	mov	sp, r7
 80025f0:	b004      	add	sp, #16
 80025f2:	bd80      	pop	{r7, pc}

080025f4 <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b086      	sub	sp, #24
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80025fc:	2317      	movs	r3, #23
 80025fe:	18fb      	adds	r3, r7, r3
 8002600:	2200      	movs	r2, #0
 8002602:	701a      	strb	r2, [r3, #0]
  uint32_t tickstart = 0U;
 8002604:	2300      	movs	r3, #0
 8002606:	613b      	str	r3, [r7, #16]
  uint32_t backup_setting_adc_dma_transfer = 0; /* Note: Variable not declared as volatile because register read is already declared as volatile */
 8002608:	2300      	movs	r3, #0
 800260a:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	2234      	movs	r2, #52	; 0x34
 8002610:	5c9b      	ldrb	r3, [r3, r2]
 8002612:	2b01      	cmp	r3, #1
 8002614:	d101      	bne.n	800261a <HAL_ADCEx_Calibration_Start+0x26>
 8002616:	2302      	movs	r3, #2
 8002618:	e08d      	b.n	8002736 <HAL_ADCEx_Calibration_Start+0x142>
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	2234      	movs	r2, #52	; 0x34
 800261e:	2101      	movs	r1, #1
 8002620:	5499      	strb	r1, [r3, r2]
  
  /* Calibration prerequisite: ADC must be disabled. */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	689b      	ldr	r3, [r3, #8]
 8002628:	2203      	movs	r2, #3
 800262a:	4013      	ands	r3, r2
 800262c:	2b01      	cmp	r3, #1
 800262e:	d112      	bne.n	8002656 <HAL_ADCEx_Calibration_Start+0x62>
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	2201      	movs	r2, #1
 8002638:	4013      	ands	r3, r2
 800263a:	2b01      	cmp	r3, #1
 800263c:	d009      	beq.n	8002652 <HAL_ADCEx_Calibration_Start+0x5e>
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	68da      	ldr	r2, [r3, #12]
 8002644:	2380      	movs	r3, #128	; 0x80
 8002646:	021b      	lsls	r3, r3, #8
 8002648:	401a      	ands	r2, r3
 800264a:	2380      	movs	r3, #128	; 0x80
 800264c:	021b      	lsls	r3, r3, #8
 800264e:	429a      	cmp	r2, r3
 8002650:	d101      	bne.n	8002656 <HAL_ADCEx_Calibration_Start+0x62>
 8002652:	2301      	movs	r3, #1
 8002654:	e000      	b.n	8002658 <HAL_ADCEx_Calibration_Start+0x64>
 8002656:	2300      	movs	r3, #0
 8002658:	2b00      	cmp	r3, #0
 800265a:	d15b      	bne.n	8002714 <HAL_ADCEx_Calibration_Start+0x120>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State, 
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002660:	4a37      	ldr	r2, [pc, #220]	; (8002740 <HAL_ADCEx_Calibration_Start+0x14c>)
 8002662:	4013      	ands	r3, r2
 8002664:	2202      	movs	r2, #2
 8002666:	431a      	orrs	r2, r3
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	639a      	str	r2, [r3, #56]	; 0x38
    /* Note: Specificity of this STM32 serie: Calibration factor is           */
    /*       available in data register and also transfered by DMA.           */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	68db      	ldr	r3, [r3, #12]
 8002672:	2203      	movs	r2, #3
 8002674:	4013      	ands	r3, r2
 8002676:	60fb      	str	r3, [r7, #12]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	68da      	ldr	r2, [r3, #12]
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	2103      	movs	r1, #3
 8002684:	438a      	bics	r2, r1
 8002686:	60da      	str	r2, [r3, #12]

    /* Start ADC calibration */
    hadc->Instance->CR |= ADC_CR_ADCAL;
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	689a      	ldr	r2, [r3, #8]
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	2180      	movs	r1, #128	; 0x80
 8002694:	0609      	lsls	r1, r1, #24
 8002696:	430a      	orrs	r2, r1
 8002698:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();  
 800269a:	f7ff fbad 	bl	8001df8 <HAL_GetTick>
 800269e:	0003      	movs	r3, r0
 80026a0:	613b      	str	r3, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 80026a2:	e01d      	b.n	80026e0 <HAL_ADCEx_Calibration_Start+0xec>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 80026a4:	f7ff fba8 	bl	8001df8 <HAL_GetTick>
 80026a8:	0002      	movs	r2, r0
 80026aa:	693b      	ldr	r3, [r7, #16]
 80026ac:	1ad3      	subs	r3, r2, r3
 80026ae:	2b02      	cmp	r3, #2
 80026b0:	d916      	bls.n	80026e0 <HAL_ADCEx_Calibration_Start+0xec>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	689b      	ldr	r3, [r3, #8]
 80026b8:	0fdb      	lsrs	r3, r3, #31
 80026ba:	07da      	lsls	r2, r3, #31
 80026bc:	2380      	movs	r3, #128	; 0x80
 80026be:	061b      	lsls	r3, r3, #24
 80026c0:	429a      	cmp	r2, r3
 80026c2:	d10d      	bne.n	80026e0 <HAL_ADCEx_Calibration_Start+0xec>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026c8:	2212      	movs	r2, #18
 80026ca:	4393      	bics	r3, r2
 80026cc:	2210      	movs	r2, #16
 80026ce:	431a      	orrs	r2, r3
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	639a      	str	r2, [r3, #56]	; 0x38
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	2234      	movs	r2, #52	; 0x34
 80026d8:	2100      	movs	r1, #0
 80026da:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80026dc:	2301      	movs	r3, #1
 80026de:	e02a      	b.n	8002736 <HAL_ADCEx_Calibration_Start+0x142>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	689b      	ldr	r3, [r3, #8]
 80026e6:	0fdb      	lsrs	r3, r3, #31
 80026e8:	07da      	lsls	r2, r3, #31
 80026ea:	2380      	movs	r3, #128	; 0x80
 80026ec:	061b      	lsls	r3, r3, #24
 80026ee:	429a      	cmp	r2, r3
 80026f0:	d0d8      	beq.n	80026a4 <HAL_ADCEx_Calibration_Start+0xb0>
        }
      }
    }
    
    /* Restore ADC DMA transfer request after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_adc_dma_transfer);
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	68d9      	ldr	r1, [r3, #12]
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	68fa      	ldr	r2, [r7, #12]
 80026fe:	430a      	orrs	r2, r1
 8002700:	60da      	str	r2, [r3, #12]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002706:	2203      	movs	r2, #3
 8002708:	4393      	bics	r3, r2
 800270a:	2201      	movs	r2, #1
 800270c:	431a      	orrs	r2, r3
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	639a      	str	r2, [r3, #56]	; 0x38
 8002712:	e009      	b.n	8002728 <HAL_ADCEx_Calibration_Start+0x134>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002718:	2220      	movs	r2, #32
 800271a:	431a      	orrs	r2, r3
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 8002720:	2317      	movs	r3, #23
 8002722:	18fb      	adds	r3, r7, r3
 8002724:	2201      	movs	r2, #1
 8002726:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	2234      	movs	r2, #52	; 0x34
 800272c:	2100      	movs	r1, #0
 800272e:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8002730:	2317      	movs	r3, #23
 8002732:	18fb      	adds	r3, r7, r3
 8002734:	781b      	ldrb	r3, [r3, #0]
}
 8002736:	0018      	movs	r0, r3
 8002738:	46bd      	mov	sp, r7
 800273a:	b006      	add	sp, #24
 800273c:	bd80      	pop	{r7, pc}
 800273e:	46c0      	nop			; (mov r8, r8)
 8002740:	fffffefd 	.word	0xfffffefd

08002744 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	b082      	sub	sp, #8
 8002748:	af00      	add	r7, sp, #0
 800274a:	0002      	movs	r2, r0
 800274c:	1dfb      	adds	r3, r7, #7
 800274e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002750:	1dfb      	adds	r3, r7, #7
 8002752:	781b      	ldrb	r3, [r3, #0]
 8002754:	2b7f      	cmp	r3, #127	; 0x7f
 8002756:	d809      	bhi.n	800276c <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002758:	1dfb      	adds	r3, r7, #7
 800275a:	781b      	ldrb	r3, [r3, #0]
 800275c:	001a      	movs	r2, r3
 800275e:	231f      	movs	r3, #31
 8002760:	401a      	ands	r2, r3
 8002762:	4b04      	ldr	r3, [pc, #16]	; (8002774 <__NVIC_EnableIRQ+0x30>)
 8002764:	2101      	movs	r1, #1
 8002766:	4091      	lsls	r1, r2
 8002768:	000a      	movs	r2, r1
 800276a:	601a      	str	r2, [r3, #0]
  }
}
 800276c:	46c0      	nop			; (mov r8, r8)
 800276e:	46bd      	mov	sp, r7
 8002770:	b002      	add	sp, #8
 8002772:	bd80      	pop	{r7, pc}
 8002774:	e000e100 	.word	0xe000e100

08002778 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002778:	b590      	push	{r4, r7, lr}
 800277a:	b083      	sub	sp, #12
 800277c:	af00      	add	r7, sp, #0
 800277e:	0002      	movs	r2, r0
 8002780:	6039      	str	r1, [r7, #0]
 8002782:	1dfb      	adds	r3, r7, #7
 8002784:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002786:	1dfb      	adds	r3, r7, #7
 8002788:	781b      	ldrb	r3, [r3, #0]
 800278a:	2b7f      	cmp	r3, #127	; 0x7f
 800278c:	d828      	bhi.n	80027e0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800278e:	4a2f      	ldr	r2, [pc, #188]	; (800284c <__NVIC_SetPriority+0xd4>)
 8002790:	1dfb      	adds	r3, r7, #7
 8002792:	781b      	ldrb	r3, [r3, #0]
 8002794:	b25b      	sxtb	r3, r3
 8002796:	089b      	lsrs	r3, r3, #2
 8002798:	33c0      	adds	r3, #192	; 0xc0
 800279a:	009b      	lsls	r3, r3, #2
 800279c:	589b      	ldr	r3, [r3, r2]
 800279e:	1dfa      	adds	r2, r7, #7
 80027a0:	7812      	ldrb	r2, [r2, #0]
 80027a2:	0011      	movs	r1, r2
 80027a4:	2203      	movs	r2, #3
 80027a6:	400a      	ands	r2, r1
 80027a8:	00d2      	lsls	r2, r2, #3
 80027aa:	21ff      	movs	r1, #255	; 0xff
 80027ac:	4091      	lsls	r1, r2
 80027ae:	000a      	movs	r2, r1
 80027b0:	43d2      	mvns	r2, r2
 80027b2:	401a      	ands	r2, r3
 80027b4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80027b6:	683b      	ldr	r3, [r7, #0]
 80027b8:	019b      	lsls	r3, r3, #6
 80027ba:	22ff      	movs	r2, #255	; 0xff
 80027bc:	401a      	ands	r2, r3
 80027be:	1dfb      	adds	r3, r7, #7
 80027c0:	781b      	ldrb	r3, [r3, #0]
 80027c2:	0018      	movs	r0, r3
 80027c4:	2303      	movs	r3, #3
 80027c6:	4003      	ands	r3, r0
 80027c8:	00db      	lsls	r3, r3, #3
 80027ca:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80027cc:	481f      	ldr	r0, [pc, #124]	; (800284c <__NVIC_SetPriority+0xd4>)
 80027ce:	1dfb      	adds	r3, r7, #7
 80027d0:	781b      	ldrb	r3, [r3, #0]
 80027d2:	b25b      	sxtb	r3, r3
 80027d4:	089b      	lsrs	r3, r3, #2
 80027d6:	430a      	orrs	r2, r1
 80027d8:	33c0      	adds	r3, #192	; 0xc0
 80027da:	009b      	lsls	r3, r3, #2
 80027dc:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80027de:	e031      	b.n	8002844 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80027e0:	4a1b      	ldr	r2, [pc, #108]	; (8002850 <__NVIC_SetPriority+0xd8>)
 80027e2:	1dfb      	adds	r3, r7, #7
 80027e4:	781b      	ldrb	r3, [r3, #0]
 80027e6:	0019      	movs	r1, r3
 80027e8:	230f      	movs	r3, #15
 80027ea:	400b      	ands	r3, r1
 80027ec:	3b08      	subs	r3, #8
 80027ee:	089b      	lsrs	r3, r3, #2
 80027f0:	3306      	adds	r3, #6
 80027f2:	009b      	lsls	r3, r3, #2
 80027f4:	18d3      	adds	r3, r2, r3
 80027f6:	3304      	adds	r3, #4
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	1dfa      	adds	r2, r7, #7
 80027fc:	7812      	ldrb	r2, [r2, #0]
 80027fe:	0011      	movs	r1, r2
 8002800:	2203      	movs	r2, #3
 8002802:	400a      	ands	r2, r1
 8002804:	00d2      	lsls	r2, r2, #3
 8002806:	21ff      	movs	r1, #255	; 0xff
 8002808:	4091      	lsls	r1, r2
 800280a:	000a      	movs	r2, r1
 800280c:	43d2      	mvns	r2, r2
 800280e:	401a      	ands	r2, r3
 8002810:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002812:	683b      	ldr	r3, [r7, #0]
 8002814:	019b      	lsls	r3, r3, #6
 8002816:	22ff      	movs	r2, #255	; 0xff
 8002818:	401a      	ands	r2, r3
 800281a:	1dfb      	adds	r3, r7, #7
 800281c:	781b      	ldrb	r3, [r3, #0]
 800281e:	0018      	movs	r0, r3
 8002820:	2303      	movs	r3, #3
 8002822:	4003      	ands	r3, r0
 8002824:	00db      	lsls	r3, r3, #3
 8002826:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002828:	4809      	ldr	r0, [pc, #36]	; (8002850 <__NVIC_SetPriority+0xd8>)
 800282a:	1dfb      	adds	r3, r7, #7
 800282c:	781b      	ldrb	r3, [r3, #0]
 800282e:	001c      	movs	r4, r3
 8002830:	230f      	movs	r3, #15
 8002832:	4023      	ands	r3, r4
 8002834:	3b08      	subs	r3, #8
 8002836:	089b      	lsrs	r3, r3, #2
 8002838:	430a      	orrs	r2, r1
 800283a:	3306      	adds	r3, #6
 800283c:	009b      	lsls	r3, r3, #2
 800283e:	18c3      	adds	r3, r0, r3
 8002840:	3304      	adds	r3, #4
 8002842:	601a      	str	r2, [r3, #0]
}
 8002844:	46c0      	nop			; (mov r8, r8)
 8002846:	46bd      	mov	sp, r7
 8002848:	b003      	add	sp, #12
 800284a:	bd90      	pop	{r4, r7, pc}
 800284c:	e000e100 	.word	0xe000e100
 8002850:	e000ed00 	.word	0xe000ed00

08002854 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002854:	b580      	push	{r7, lr}
 8002856:	b082      	sub	sp, #8
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	1e5a      	subs	r2, r3, #1
 8002860:	2380      	movs	r3, #128	; 0x80
 8002862:	045b      	lsls	r3, r3, #17
 8002864:	429a      	cmp	r2, r3
 8002866:	d301      	bcc.n	800286c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002868:	2301      	movs	r3, #1
 800286a:	e010      	b.n	800288e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800286c:	4b0a      	ldr	r3, [pc, #40]	; (8002898 <SysTick_Config+0x44>)
 800286e:	687a      	ldr	r2, [r7, #4]
 8002870:	3a01      	subs	r2, #1
 8002872:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002874:	2301      	movs	r3, #1
 8002876:	425b      	negs	r3, r3
 8002878:	2103      	movs	r1, #3
 800287a:	0018      	movs	r0, r3
 800287c:	f7ff ff7c 	bl	8002778 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002880:	4b05      	ldr	r3, [pc, #20]	; (8002898 <SysTick_Config+0x44>)
 8002882:	2200      	movs	r2, #0
 8002884:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002886:	4b04      	ldr	r3, [pc, #16]	; (8002898 <SysTick_Config+0x44>)
 8002888:	2207      	movs	r2, #7
 800288a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800288c:	2300      	movs	r3, #0
}
 800288e:	0018      	movs	r0, r3
 8002890:	46bd      	mov	sp, r7
 8002892:	b002      	add	sp, #8
 8002894:	bd80      	pop	{r7, pc}
 8002896:	46c0      	nop			; (mov r8, r8)
 8002898:	e000e010 	.word	0xe000e010

0800289c <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800289c:	b580      	push	{r7, lr}
 800289e:	b084      	sub	sp, #16
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	60b9      	str	r1, [r7, #8]
 80028a4:	607a      	str	r2, [r7, #4]
 80028a6:	210f      	movs	r1, #15
 80028a8:	187b      	adds	r3, r7, r1
 80028aa:	1c02      	adds	r2, r0, #0
 80028ac:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80028ae:	68ba      	ldr	r2, [r7, #8]
 80028b0:	187b      	adds	r3, r7, r1
 80028b2:	781b      	ldrb	r3, [r3, #0]
 80028b4:	b25b      	sxtb	r3, r3
 80028b6:	0011      	movs	r1, r2
 80028b8:	0018      	movs	r0, r3
 80028ba:	f7ff ff5d 	bl	8002778 <__NVIC_SetPriority>
}
 80028be:	46c0      	nop			; (mov r8, r8)
 80028c0:	46bd      	mov	sp, r7
 80028c2:	b004      	add	sp, #16
 80028c4:	bd80      	pop	{r7, pc}

080028c6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028c6:	b580      	push	{r7, lr}
 80028c8:	b082      	sub	sp, #8
 80028ca:	af00      	add	r7, sp, #0
 80028cc:	0002      	movs	r2, r0
 80028ce:	1dfb      	adds	r3, r7, #7
 80028d0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80028d2:	1dfb      	adds	r3, r7, #7
 80028d4:	781b      	ldrb	r3, [r3, #0]
 80028d6:	b25b      	sxtb	r3, r3
 80028d8:	0018      	movs	r0, r3
 80028da:	f7ff ff33 	bl	8002744 <__NVIC_EnableIRQ>
}
 80028de:	46c0      	nop			; (mov r8, r8)
 80028e0:	46bd      	mov	sp, r7
 80028e2:	b002      	add	sp, #8
 80028e4:	bd80      	pop	{r7, pc}

080028e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80028e6:	b580      	push	{r7, lr}
 80028e8:	b082      	sub	sp, #8
 80028ea:	af00      	add	r7, sp, #0
 80028ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	0018      	movs	r0, r3
 80028f2:	f7ff ffaf 	bl	8002854 <SysTick_Config>
 80028f6:	0003      	movs	r3, r0
}
 80028f8:	0018      	movs	r0, r3
 80028fa:	46bd      	mov	sp, r7
 80028fc:	b002      	add	sp, #8
 80028fe:	bd80      	pop	{r7, pc}

08002900 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8002900:	b580      	push	{r7, lr}
 8002902:	b084      	sub	sp, #16
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002908:	2300      	movs	r3, #0
 800290a:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	2b00      	cmp	r3, #0
 8002910:	d101      	bne.n	8002916 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002912:	2301      	movs	r3, #1
 8002914:	e036      	b.n	8002984 <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	2221      	movs	r2, #33	; 0x21
 800291a:	2102      	movs	r1, #2
 800291c:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	4a18      	ldr	r2, [pc, #96]	; (800298c <HAL_DMA_Init+0x8c>)
 800292a:	4013      	ands	r3, r2
 800292c:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002936:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	68db      	ldr	r3, [r3, #12]
 800293c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002942:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	695b      	ldr	r3, [r3, #20]
 8002948:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800294e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	69db      	ldr	r3, [r3, #28]
 8002954:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002956:	68fa      	ldr	r2, [r7, #12]
 8002958:	4313      	orrs	r3, r2
 800295a:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	68fa      	ldr	r2, [r7, #12]
 8002962:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	0018      	movs	r0, r3
 8002968:	f000 f946 	bl	8002bf8 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	2200      	movs	r2, #0
 8002970:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	2221      	movs	r2, #33	; 0x21
 8002976:	2101      	movs	r1, #1
 8002978:	5499      	strb	r1, [r3, r2]
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	2220      	movs	r2, #32
 800297e:	2100      	movs	r1, #0
 8002980:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 8002982:	2300      	movs	r3, #0
}  
 8002984:	0018      	movs	r0, r3
 8002986:	46bd      	mov	sp, r7
 8002988:	b004      	add	sp, #16
 800298a:	bd80      	pop	{r7, pc}
 800298c:	ffffc00f 	.word	0xffffc00f

08002990 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	b086      	sub	sp, #24
 8002994:	af00      	add	r7, sp, #0
 8002996:	60f8      	str	r0, [r7, #12]
 8002998:	60b9      	str	r1, [r7, #8]
 800299a:	607a      	str	r2, [r7, #4]
 800299c:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 800299e:	2317      	movs	r3, #23
 80029a0:	18fb      	adds	r3, r7, r3
 80029a2:	2200      	movs	r2, #0
 80029a4:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	2220      	movs	r2, #32
 80029aa:	5c9b      	ldrb	r3, [r3, r2]
 80029ac:	2b01      	cmp	r3, #1
 80029ae:	d101      	bne.n	80029b4 <HAL_DMA_Start_IT+0x24>
 80029b0:	2302      	movs	r3, #2
 80029b2:	e04f      	b.n	8002a54 <HAL_DMA_Start_IT+0xc4>
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	2220      	movs	r2, #32
 80029b8:	2101      	movs	r1, #1
 80029ba:	5499      	strb	r1, [r3, r2]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	2221      	movs	r2, #33	; 0x21
 80029c0:	5c9b      	ldrb	r3, [r3, r2]
 80029c2:	b2db      	uxtb	r3, r3
 80029c4:	2b01      	cmp	r3, #1
 80029c6:	d13a      	bne.n	8002a3e <HAL_DMA_Start_IT+0xae>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	2221      	movs	r2, #33	; 0x21
 80029cc:	2102      	movs	r1, #2
 80029ce:	5499      	strb	r1, [r3, r2]
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	2200      	movs	r2, #0
 80029d4:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	681a      	ldr	r2, [r3, #0]
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	2101      	movs	r1, #1
 80029e2:	438a      	bics	r2, r1
 80029e4:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80029e6:	683b      	ldr	r3, [r7, #0]
 80029e8:	687a      	ldr	r2, [r7, #4]
 80029ea:	68b9      	ldr	r1, [r7, #8]
 80029ec:	68f8      	ldr	r0, [r7, #12]
 80029ee:	f000 f8d7 	bl	8002ba0 <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d008      	beq.n	8002a0c <HAL_DMA_Start_IT+0x7c>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	681a      	ldr	r2, [r3, #0]
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	210e      	movs	r1, #14
 8002a06:	430a      	orrs	r2, r1
 8002a08:	601a      	str	r2, [r3, #0]
 8002a0a:	e00f      	b.n	8002a2c <HAL_DMA_Start_IT+0x9c>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	681a      	ldr	r2, [r3, #0]
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	210a      	movs	r1, #10
 8002a18:	430a      	orrs	r2, r1
 8002a1a:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	681a      	ldr	r2, [r3, #0]
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	2104      	movs	r1, #4
 8002a28:	438a      	bics	r2, r1
 8002a2a:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	681a      	ldr	r2, [r3, #0]
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	2101      	movs	r1, #1
 8002a38:	430a      	orrs	r2, r1
 8002a3a:	601a      	str	r2, [r3, #0]
 8002a3c:	e007      	b.n	8002a4e <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	2220      	movs	r2, #32
 8002a42:	2100      	movs	r1, #0
 8002a44:	5499      	strb	r1, [r3, r2]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 8002a46:	2317      	movs	r3, #23
 8002a48:	18fb      	adds	r3, r7, r3
 8002a4a:	2202      	movs	r2, #2
 8002a4c:	701a      	strb	r2, [r3, #0]
  }     
  
  return status;    
 8002a4e:	2317      	movs	r3, #23
 8002a50:	18fb      	adds	r3, r7, r3
 8002a52:	781b      	ldrb	r3, [r3, #0]
} 
 8002a54:	0018      	movs	r0, r3
 8002a56:	46bd      	mov	sp, r7
 8002a58:	b006      	add	sp, #24
 8002a5a:	bd80      	pop	{r7, pc}

08002a5c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b084      	sub	sp, #16
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a78:	2204      	movs	r2, #4
 8002a7a:	409a      	lsls	r2, r3
 8002a7c:	0013      	movs	r3, r2
 8002a7e:	68fa      	ldr	r2, [r7, #12]
 8002a80:	4013      	ands	r3, r2
 8002a82:	d024      	beq.n	8002ace <HAL_DMA_IRQHandler+0x72>
 8002a84:	68bb      	ldr	r3, [r7, #8]
 8002a86:	2204      	movs	r2, #4
 8002a88:	4013      	ands	r3, r2
 8002a8a:	d020      	beq.n	8002ace <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	2220      	movs	r2, #32
 8002a94:	4013      	ands	r3, r2
 8002a96:	d107      	bne.n	8002aa8 <HAL_DMA_IRQHandler+0x4c>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	681a      	ldr	r2, [r3, #0]
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	2104      	movs	r1, #4
 8002aa4:	438a      	bics	r2, r1
 8002aa6:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ab0:	2104      	movs	r1, #4
 8002ab2:	4091      	lsls	r1, r2
 8002ab4:	000a      	movs	r2, r1
 8002ab6:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d100      	bne.n	8002ac2 <HAL_DMA_IRQHandler+0x66>
 8002ac0:	e06a      	b.n	8002b98 <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ac6:	687a      	ldr	r2, [r7, #4]
 8002ac8:	0010      	movs	r0, r2
 8002aca:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8002acc:	e064      	b.n	8002b98 <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ad2:	2202      	movs	r2, #2
 8002ad4:	409a      	lsls	r2, r3
 8002ad6:	0013      	movs	r3, r2
 8002ad8:	68fa      	ldr	r2, [r7, #12]
 8002ada:	4013      	ands	r3, r2
 8002adc:	d02b      	beq.n	8002b36 <HAL_DMA_IRQHandler+0xda>
 8002ade:	68bb      	ldr	r3, [r7, #8]
 8002ae0:	2202      	movs	r2, #2
 8002ae2:	4013      	ands	r3, r2
 8002ae4:	d027      	beq.n	8002b36 <HAL_DMA_IRQHandler+0xda>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	2220      	movs	r2, #32
 8002aee:	4013      	ands	r3, r2
 8002af0:	d10b      	bne.n	8002b0a <HAL_DMA_IRQHandler+0xae>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	681a      	ldr	r2, [r3, #0]
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	210a      	movs	r1, #10
 8002afe:	438a      	bics	r2, r1
 8002b00:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	2221      	movs	r2, #33	; 0x21
 8002b06:	2101      	movs	r1, #1
 8002b08:	5499      	strb	r1, [r3, r2]
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b12:	2102      	movs	r1, #2
 8002b14:	4091      	lsls	r1, r2
 8002b16:	000a      	movs	r2, r1
 8002b18:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	2220      	movs	r2, #32
 8002b1e:	2100      	movs	r1, #0
 8002b20:	5499      	strb	r1, [r3, r2]
  	
  	if(hdma->XferCpltCallback != NULL)
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d036      	beq.n	8002b98 <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b2e:	687a      	ldr	r2, [r7, #4]
 8002b30:	0010      	movs	r0, r2
 8002b32:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8002b34:	e030      	b.n	8002b98 <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b3a:	2208      	movs	r2, #8
 8002b3c:	409a      	lsls	r2, r3
 8002b3e:	0013      	movs	r3, r2
 8002b40:	68fa      	ldr	r2, [r7, #12]
 8002b42:	4013      	ands	r3, r2
 8002b44:	d028      	beq.n	8002b98 <HAL_DMA_IRQHandler+0x13c>
 8002b46:	68bb      	ldr	r3, [r7, #8]
 8002b48:	2208      	movs	r2, #8
 8002b4a:	4013      	ands	r3, r2
 8002b4c:	d024      	beq.n	8002b98 <HAL_DMA_IRQHandler+0x13c>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	681a      	ldr	r2, [r3, #0]
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	210e      	movs	r1, #14
 8002b5a:	438a      	bics	r2, r1
 8002b5c:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b66:	2101      	movs	r1, #1
 8002b68:	4091      	lsls	r1, r2
 8002b6a:	000a      	movs	r2, r1
 8002b6c:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	2201      	movs	r2, #1
 8002b72:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	2221      	movs	r2, #33	; 0x21
 8002b78:	2101      	movs	r1, #1
 8002b7a:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	2220      	movs	r2, #32
 8002b80:	2100      	movs	r1, #0
 8002b82:	5499      	strb	r1, [r3, r2]
    
    if(hdma->XferErrorCallback != NULL)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d005      	beq.n	8002b98 <HAL_DMA_IRQHandler+0x13c>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b90:	687a      	ldr	r2, [r7, #4]
 8002b92:	0010      	movs	r0, r2
 8002b94:	4798      	blx	r3
    }
   }
}  
 8002b96:	e7ff      	b.n	8002b98 <HAL_DMA_IRQHandler+0x13c>
 8002b98:	46c0      	nop			; (mov r8, r8)
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	b004      	add	sp, #16
 8002b9e:	bd80      	pop	{r7, pc}

08002ba0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b084      	sub	sp, #16
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	60f8      	str	r0, [r7, #12]
 8002ba8:	60b9      	str	r1, [r7, #8]
 8002baa:	607a      	str	r2, [r7, #4]
 8002bac:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bb6:	2101      	movs	r1, #1
 8002bb8:	4091      	lsls	r1, r2
 8002bba:	000a      	movs	r2, r1
 8002bbc:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	683a      	ldr	r2, [r7, #0]
 8002bc4:	605a      	str	r2, [r3, #4]
  
  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	685b      	ldr	r3, [r3, #4]
 8002bca:	2b10      	cmp	r3, #16
 8002bcc:	d108      	bne.n	8002be0 <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	687a      	ldr	r2, [r7, #4]
 8002bd4:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	68ba      	ldr	r2, [r7, #8]
 8002bdc:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002bde:	e007      	b.n	8002bf0 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	68ba      	ldr	r2, [r7, #8]
 8002be6:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	687a      	ldr	r2, [r7, #4]
 8002bee:	60da      	str	r2, [r3, #12]
}
 8002bf0:	46c0      	nop			; (mov r8, r8)
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	b004      	add	sp, #16
 8002bf6:	bd80      	pop	{r7, pc}

08002bf8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	b082      	sub	sp, #8
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	4a08      	ldr	r2, [pc, #32]	; (8002c28 <DMA_CalcBaseAndBitshift+0x30>)
 8002c06:	4694      	mov	ip, r2
 8002c08:	4463      	add	r3, ip
 8002c0a:	2114      	movs	r1, #20
 8002c0c:	0018      	movs	r0, r3
 8002c0e:	f7fd fa8d 	bl	800012c <__udivsi3>
 8002c12:	0003      	movs	r3, r0
 8002c14:	009a      	lsls	r2, r3, #2
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	4a03      	ldr	r2, [pc, #12]	; (8002c2c <DMA_CalcBaseAndBitshift+0x34>)
 8002c1e:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 8002c20:	46c0      	nop			; (mov r8, r8)
 8002c22:	46bd      	mov	sp, r7
 8002c24:	b002      	add	sp, #8
 8002c26:	bd80      	pop	{r7, pc}
 8002c28:	bffdfff8 	.word	0xbffdfff8
 8002c2c:	40020000 	.word	0x40020000

08002c30 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002c30:	b580      	push	{r7, lr}
 8002c32:	b086      	sub	sp, #24
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	6078      	str	r0, [r7, #4]
 8002c38:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002c3e:	e14f      	b.n	8002ee0 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002c40:	683b      	ldr	r3, [r7, #0]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	2101      	movs	r1, #1
 8002c46:	697a      	ldr	r2, [r7, #20]
 8002c48:	4091      	lsls	r1, r2
 8002c4a:	000a      	movs	r2, r1
 8002c4c:	4013      	ands	r3, r2
 8002c4e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d100      	bne.n	8002c58 <HAL_GPIO_Init+0x28>
 8002c56:	e140      	b.n	8002eda <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002c58:	683b      	ldr	r3, [r7, #0]
 8002c5a:	685b      	ldr	r3, [r3, #4]
 8002c5c:	2203      	movs	r2, #3
 8002c5e:	4013      	ands	r3, r2
 8002c60:	2b01      	cmp	r3, #1
 8002c62:	d005      	beq.n	8002c70 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	685b      	ldr	r3, [r3, #4]
 8002c68:	2203      	movs	r2, #3
 8002c6a:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002c6c:	2b02      	cmp	r3, #2
 8002c6e:	d130      	bne.n	8002cd2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	689b      	ldr	r3, [r3, #8]
 8002c74:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002c76:	697b      	ldr	r3, [r7, #20]
 8002c78:	005b      	lsls	r3, r3, #1
 8002c7a:	2203      	movs	r2, #3
 8002c7c:	409a      	lsls	r2, r3
 8002c7e:	0013      	movs	r3, r2
 8002c80:	43da      	mvns	r2, r3
 8002c82:	693b      	ldr	r3, [r7, #16]
 8002c84:	4013      	ands	r3, r2
 8002c86:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002c88:	683b      	ldr	r3, [r7, #0]
 8002c8a:	68da      	ldr	r2, [r3, #12]
 8002c8c:	697b      	ldr	r3, [r7, #20]
 8002c8e:	005b      	lsls	r3, r3, #1
 8002c90:	409a      	lsls	r2, r3
 8002c92:	0013      	movs	r3, r2
 8002c94:	693a      	ldr	r2, [r7, #16]
 8002c96:	4313      	orrs	r3, r2
 8002c98:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	693a      	ldr	r2, [r7, #16]
 8002c9e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	685b      	ldr	r3, [r3, #4]
 8002ca4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002ca6:	2201      	movs	r2, #1
 8002ca8:	697b      	ldr	r3, [r7, #20]
 8002caa:	409a      	lsls	r2, r3
 8002cac:	0013      	movs	r3, r2
 8002cae:	43da      	mvns	r2, r3
 8002cb0:	693b      	ldr	r3, [r7, #16]
 8002cb2:	4013      	ands	r3, r2
 8002cb4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002cb6:	683b      	ldr	r3, [r7, #0]
 8002cb8:	685b      	ldr	r3, [r3, #4]
 8002cba:	091b      	lsrs	r3, r3, #4
 8002cbc:	2201      	movs	r2, #1
 8002cbe:	401a      	ands	r2, r3
 8002cc0:	697b      	ldr	r3, [r7, #20]
 8002cc2:	409a      	lsls	r2, r3
 8002cc4:	0013      	movs	r3, r2
 8002cc6:	693a      	ldr	r2, [r7, #16]
 8002cc8:	4313      	orrs	r3, r2
 8002cca:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	693a      	ldr	r2, [r7, #16]
 8002cd0:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002cd2:	683b      	ldr	r3, [r7, #0]
 8002cd4:	685b      	ldr	r3, [r3, #4]
 8002cd6:	2203      	movs	r2, #3
 8002cd8:	4013      	ands	r3, r2
 8002cda:	2b03      	cmp	r3, #3
 8002cdc:	d017      	beq.n	8002d0e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	68db      	ldr	r3, [r3, #12]
 8002ce2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002ce4:	697b      	ldr	r3, [r7, #20]
 8002ce6:	005b      	lsls	r3, r3, #1
 8002ce8:	2203      	movs	r2, #3
 8002cea:	409a      	lsls	r2, r3
 8002cec:	0013      	movs	r3, r2
 8002cee:	43da      	mvns	r2, r3
 8002cf0:	693b      	ldr	r3, [r7, #16]
 8002cf2:	4013      	ands	r3, r2
 8002cf4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002cf6:	683b      	ldr	r3, [r7, #0]
 8002cf8:	689a      	ldr	r2, [r3, #8]
 8002cfa:	697b      	ldr	r3, [r7, #20]
 8002cfc:	005b      	lsls	r3, r3, #1
 8002cfe:	409a      	lsls	r2, r3
 8002d00:	0013      	movs	r3, r2
 8002d02:	693a      	ldr	r2, [r7, #16]
 8002d04:	4313      	orrs	r3, r2
 8002d06:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	693a      	ldr	r2, [r7, #16]
 8002d0c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d0e:	683b      	ldr	r3, [r7, #0]
 8002d10:	685b      	ldr	r3, [r3, #4]
 8002d12:	2203      	movs	r2, #3
 8002d14:	4013      	ands	r3, r2
 8002d16:	2b02      	cmp	r3, #2
 8002d18:	d123      	bne.n	8002d62 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002d1a:	697b      	ldr	r3, [r7, #20]
 8002d1c:	08da      	lsrs	r2, r3, #3
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	3208      	adds	r2, #8
 8002d22:	0092      	lsls	r2, r2, #2
 8002d24:	58d3      	ldr	r3, [r2, r3]
 8002d26:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002d28:	697b      	ldr	r3, [r7, #20]
 8002d2a:	2207      	movs	r2, #7
 8002d2c:	4013      	ands	r3, r2
 8002d2e:	009b      	lsls	r3, r3, #2
 8002d30:	220f      	movs	r2, #15
 8002d32:	409a      	lsls	r2, r3
 8002d34:	0013      	movs	r3, r2
 8002d36:	43da      	mvns	r2, r3
 8002d38:	693b      	ldr	r3, [r7, #16]
 8002d3a:	4013      	ands	r3, r2
 8002d3c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002d3e:	683b      	ldr	r3, [r7, #0]
 8002d40:	691a      	ldr	r2, [r3, #16]
 8002d42:	697b      	ldr	r3, [r7, #20]
 8002d44:	2107      	movs	r1, #7
 8002d46:	400b      	ands	r3, r1
 8002d48:	009b      	lsls	r3, r3, #2
 8002d4a:	409a      	lsls	r2, r3
 8002d4c:	0013      	movs	r3, r2
 8002d4e:	693a      	ldr	r2, [r7, #16]
 8002d50:	4313      	orrs	r3, r2
 8002d52:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002d54:	697b      	ldr	r3, [r7, #20]
 8002d56:	08da      	lsrs	r2, r3, #3
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	3208      	adds	r2, #8
 8002d5c:	0092      	lsls	r2, r2, #2
 8002d5e:	6939      	ldr	r1, [r7, #16]
 8002d60:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002d68:	697b      	ldr	r3, [r7, #20]
 8002d6a:	005b      	lsls	r3, r3, #1
 8002d6c:	2203      	movs	r2, #3
 8002d6e:	409a      	lsls	r2, r3
 8002d70:	0013      	movs	r3, r2
 8002d72:	43da      	mvns	r2, r3
 8002d74:	693b      	ldr	r3, [r7, #16]
 8002d76:	4013      	ands	r3, r2
 8002d78:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002d7a:	683b      	ldr	r3, [r7, #0]
 8002d7c:	685b      	ldr	r3, [r3, #4]
 8002d7e:	2203      	movs	r2, #3
 8002d80:	401a      	ands	r2, r3
 8002d82:	697b      	ldr	r3, [r7, #20]
 8002d84:	005b      	lsls	r3, r3, #1
 8002d86:	409a      	lsls	r2, r3
 8002d88:	0013      	movs	r3, r2
 8002d8a:	693a      	ldr	r2, [r7, #16]
 8002d8c:	4313      	orrs	r3, r2
 8002d8e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	693a      	ldr	r2, [r7, #16]
 8002d94:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002d96:	683b      	ldr	r3, [r7, #0]
 8002d98:	685a      	ldr	r2, [r3, #4]
 8002d9a:	23c0      	movs	r3, #192	; 0xc0
 8002d9c:	029b      	lsls	r3, r3, #10
 8002d9e:	4013      	ands	r3, r2
 8002da0:	d100      	bne.n	8002da4 <HAL_GPIO_Init+0x174>
 8002da2:	e09a      	b.n	8002eda <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002da4:	4b54      	ldr	r3, [pc, #336]	; (8002ef8 <HAL_GPIO_Init+0x2c8>)
 8002da6:	699a      	ldr	r2, [r3, #24]
 8002da8:	4b53      	ldr	r3, [pc, #332]	; (8002ef8 <HAL_GPIO_Init+0x2c8>)
 8002daa:	2101      	movs	r1, #1
 8002dac:	430a      	orrs	r2, r1
 8002dae:	619a      	str	r2, [r3, #24]
 8002db0:	4b51      	ldr	r3, [pc, #324]	; (8002ef8 <HAL_GPIO_Init+0x2c8>)
 8002db2:	699b      	ldr	r3, [r3, #24]
 8002db4:	2201      	movs	r2, #1
 8002db6:	4013      	ands	r3, r2
 8002db8:	60bb      	str	r3, [r7, #8]
 8002dba:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002dbc:	4a4f      	ldr	r2, [pc, #316]	; (8002efc <HAL_GPIO_Init+0x2cc>)
 8002dbe:	697b      	ldr	r3, [r7, #20]
 8002dc0:	089b      	lsrs	r3, r3, #2
 8002dc2:	3302      	adds	r3, #2
 8002dc4:	009b      	lsls	r3, r3, #2
 8002dc6:	589b      	ldr	r3, [r3, r2]
 8002dc8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002dca:	697b      	ldr	r3, [r7, #20]
 8002dcc:	2203      	movs	r2, #3
 8002dce:	4013      	ands	r3, r2
 8002dd0:	009b      	lsls	r3, r3, #2
 8002dd2:	220f      	movs	r2, #15
 8002dd4:	409a      	lsls	r2, r3
 8002dd6:	0013      	movs	r3, r2
 8002dd8:	43da      	mvns	r2, r3
 8002dda:	693b      	ldr	r3, [r7, #16]
 8002ddc:	4013      	ands	r3, r2
 8002dde:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002de0:	687a      	ldr	r2, [r7, #4]
 8002de2:	2390      	movs	r3, #144	; 0x90
 8002de4:	05db      	lsls	r3, r3, #23
 8002de6:	429a      	cmp	r2, r3
 8002de8:	d013      	beq.n	8002e12 <HAL_GPIO_Init+0x1e2>
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	4a44      	ldr	r2, [pc, #272]	; (8002f00 <HAL_GPIO_Init+0x2d0>)
 8002dee:	4293      	cmp	r3, r2
 8002df0:	d00d      	beq.n	8002e0e <HAL_GPIO_Init+0x1de>
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	4a43      	ldr	r2, [pc, #268]	; (8002f04 <HAL_GPIO_Init+0x2d4>)
 8002df6:	4293      	cmp	r3, r2
 8002df8:	d007      	beq.n	8002e0a <HAL_GPIO_Init+0x1da>
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	4a42      	ldr	r2, [pc, #264]	; (8002f08 <HAL_GPIO_Init+0x2d8>)
 8002dfe:	4293      	cmp	r3, r2
 8002e00:	d101      	bne.n	8002e06 <HAL_GPIO_Init+0x1d6>
 8002e02:	2303      	movs	r3, #3
 8002e04:	e006      	b.n	8002e14 <HAL_GPIO_Init+0x1e4>
 8002e06:	2305      	movs	r3, #5
 8002e08:	e004      	b.n	8002e14 <HAL_GPIO_Init+0x1e4>
 8002e0a:	2302      	movs	r3, #2
 8002e0c:	e002      	b.n	8002e14 <HAL_GPIO_Init+0x1e4>
 8002e0e:	2301      	movs	r3, #1
 8002e10:	e000      	b.n	8002e14 <HAL_GPIO_Init+0x1e4>
 8002e12:	2300      	movs	r3, #0
 8002e14:	697a      	ldr	r2, [r7, #20]
 8002e16:	2103      	movs	r1, #3
 8002e18:	400a      	ands	r2, r1
 8002e1a:	0092      	lsls	r2, r2, #2
 8002e1c:	4093      	lsls	r3, r2
 8002e1e:	693a      	ldr	r2, [r7, #16]
 8002e20:	4313      	orrs	r3, r2
 8002e22:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002e24:	4935      	ldr	r1, [pc, #212]	; (8002efc <HAL_GPIO_Init+0x2cc>)
 8002e26:	697b      	ldr	r3, [r7, #20]
 8002e28:	089b      	lsrs	r3, r3, #2
 8002e2a:	3302      	adds	r3, #2
 8002e2c:	009b      	lsls	r3, r3, #2
 8002e2e:	693a      	ldr	r2, [r7, #16]
 8002e30:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002e32:	4b36      	ldr	r3, [pc, #216]	; (8002f0c <HAL_GPIO_Init+0x2dc>)
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	43da      	mvns	r2, r3
 8002e3c:	693b      	ldr	r3, [r7, #16]
 8002e3e:	4013      	ands	r3, r2
 8002e40:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002e42:	683b      	ldr	r3, [r7, #0]
 8002e44:	685a      	ldr	r2, [r3, #4]
 8002e46:	2380      	movs	r3, #128	; 0x80
 8002e48:	025b      	lsls	r3, r3, #9
 8002e4a:	4013      	ands	r3, r2
 8002e4c:	d003      	beq.n	8002e56 <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8002e4e:	693a      	ldr	r2, [r7, #16]
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	4313      	orrs	r3, r2
 8002e54:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002e56:	4b2d      	ldr	r3, [pc, #180]	; (8002f0c <HAL_GPIO_Init+0x2dc>)
 8002e58:	693a      	ldr	r2, [r7, #16]
 8002e5a:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8002e5c:	4b2b      	ldr	r3, [pc, #172]	; (8002f0c <HAL_GPIO_Init+0x2dc>)
 8002e5e:	685b      	ldr	r3, [r3, #4]
 8002e60:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	43da      	mvns	r2, r3
 8002e66:	693b      	ldr	r3, [r7, #16]
 8002e68:	4013      	ands	r3, r2
 8002e6a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002e6c:	683b      	ldr	r3, [r7, #0]
 8002e6e:	685a      	ldr	r2, [r3, #4]
 8002e70:	2380      	movs	r3, #128	; 0x80
 8002e72:	029b      	lsls	r3, r3, #10
 8002e74:	4013      	ands	r3, r2
 8002e76:	d003      	beq.n	8002e80 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8002e78:	693a      	ldr	r2, [r7, #16]
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	4313      	orrs	r3, r2
 8002e7e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002e80:	4b22      	ldr	r3, [pc, #136]	; (8002f0c <HAL_GPIO_Init+0x2dc>)
 8002e82:	693a      	ldr	r2, [r7, #16]
 8002e84:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002e86:	4b21      	ldr	r3, [pc, #132]	; (8002f0c <HAL_GPIO_Init+0x2dc>)
 8002e88:	689b      	ldr	r3, [r3, #8]
 8002e8a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	43da      	mvns	r2, r3
 8002e90:	693b      	ldr	r3, [r7, #16]
 8002e92:	4013      	ands	r3, r2
 8002e94:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002e96:	683b      	ldr	r3, [r7, #0]
 8002e98:	685a      	ldr	r2, [r3, #4]
 8002e9a:	2380      	movs	r3, #128	; 0x80
 8002e9c:	035b      	lsls	r3, r3, #13
 8002e9e:	4013      	ands	r3, r2
 8002ea0:	d003      	beq.n	8002eaa <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8002ea2:	693a      	ldr	r2, [r7, #16]
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	4313      	orrs	r3, r2
 8002ea8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002eaa:	4b18      	ldr	r3, [pc, #96]	; (8002f0c <HAL_GPIO_Init+0x2dc>)
 8002eac:	693a      	ldr	r2, [r7, #16]
 8002eae:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8002eb0:	4b16      	ldr	r3, [pc, #88]	; (8002f0c <HAL_GPIO_Init+0x2dc>)
 8002eb2:	68db      	ldr	r3, [r3, #12]
 8002eb4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	43da      	mvns	r2, r3
 8002eba:	693b      	ldr	r3, [r7, #16]
 8002ebc:	4013      	ands	r3, r2
 8002ebe:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002ec0:	683b      	ldr	r3, [r7, #0]
 8002ec2:	685a      	ldr	r2, [r3, #4]
 8002ec4:	2380      	movs	r3, #128	; 0x80
 8002ec6:	039b      	lsls	r3, r3, #14
 8002ec8:	4013      	ands	r3, r2
 8002eca:	d003      	beq.n	8002ed4 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8002ecc:	693a      	ldr	r2, [r7, #16]
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	4313      	orrs	r3, r2
 8002ed2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002ed4:	4b0d      	ldr	r3, [pc, #52]	; (8002f0c <HAL_GPIO_Init+0x2dc>)
 8002ed6:	693a      	ldr	r2, [r7, #16]
 8002ed8:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8002eda:	697b      	ldr	r3, [r7, #20]
 8002edc:	3301      	adds	r3, #1
 8002ede:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002ee0:	683b      	ldr	r3, [r7, #0]
 8002ee2:	681a      	ldr	r2, [r3, #0]
 8002ee4:	697b      	ldr	r3, [r7, #20]
 8002ee6:	40da      	lsrs	r2, r3
 8002ee8:	1e13      	subs	r3, r2, #0
 8002eea:	d000      	beq.n	8002eee <HAL_GPIO_Init+0x2be>
 8002eec:	e6a8      	b.n	8002c40 <HAL_GPIO_Init+0x10>
  } 
}
 8002eee:	46c0      	nop			; (mov r8, r8)
 8002ef0:	46c0      	nop			; (mov r8, r8)
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	b006      	add	sp, #24
 8002ef6:	bd80      	pop	{r7, pc}
 8002ef8:	40021000 	.word	0x40021000
 8002efc:	40010000 	.word	0x40010000
 8002f00:	48000400 	.word	0x48000400
 8002f04:	48000800 	.word	0x48000800
 8002f08:	48000c00 	.word	0x48000c00
 8002f0c:	40010400 	.word	0x40010400

08002f10 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002f10:	b580      	push	{r7, lr}
 8002f12:	b082      	sub	sp, #8
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	6078      	str	r0, [r7, #4]
 8002f18:	0008      	movs	r0, r1
 8002f1a:	0011      	movs	r1, r2
 8002f1c:	1cbb      	adds	r3, r7, #2
 8002f1e:	1c02      	adds	r2, r0, #0
 8002f20:	801a      	strh	r2, [r3, #0]
 8002f22:	1c7b      	adds	r3, r7, #1
 8002f24:	1c0a      	adds	r2, r1, #0
 8002f26:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002f28:	1c7b      	adds	r3, r7, #1
 8002f2a:	781b      	ldrb	r3, [r3, #0]
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d004      	beq.n	8002f3a <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002f30:	1cbb      	adds	r3, r7, #2
 8002f32:	881a      	ldrh	r2, [r3, #0]
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002f38:	e003      	b.n	8002f42 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002f3a:	1cbb      	adds	r3, r7, #2
 8002f3c:	881a      	ldrh	r2, [r3, #0]
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002f42:	46c0      	nop			; (mov r8, r8)
 8002f44:	46bd      	mov	sp, r7
 8002f46:	b002      	add	sp, #8
 8002f48:	bd80      	pop	{r7, pc}
	...

08002f4c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	b088      	sub	sp, #32
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d101      	bne.n	8002f5e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002f5a:	2301      	movs	r3, #1
 8002f5c:	e301      	b.n	8003562 <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	2201      	movs	r2, #1
 8002f64:	4013      	ands	r3, r2
 8002f66:	d100      	bne.n	8002f6a <HAL_RCC_OscConfig+0x1e>
 8002f68:	e08d      	b.n	8003086 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002f6a:	4bc3      	ldr	r3, [pc, #780]	; (8003278 <HAL_RCC_OscConfig+0x32c>)
 8002f6c:	685b      	ldr	r3, [r3, #4]
 8002f6e:	220c      	movs	r2, #12
 8002f70:	4013      	ands	r3, r2
 8002f72:	2b04      	cmp	r3, #4
 8002f74:	d00e      	beq.n	8002f94 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002f76:	4bc0      	ldr	r3, [pc, #768]	; (8003278 <HAL_RCC_OscConfig+0x32c>)
 8002f78:	685b      	ldr	r3, [r3, #4]
 8002f7a:	220c      	movs	r2, #12
 8002f7c:	4013      	ands	r3, r2
 8002f7e:	2b08      	cmp	r3, #8
 8002f80:	d116      	bne.n	8002fb0 <HAL_RCC_OscConfig+0x64>
 8002f82:	4bbd      	ldr	r3, [pc, #756]	; (8003278 <HAL_RCC_OscConfig+0x32c>)
 8002f84:	685a      	ldr	r2, [r3, #4]
 8002f86:	2380      	movs	r3, #128	; 0x80
 8002f88:	025b      	lsls	r3, r3, #9
 8002f8a:	401a      	ands	r2, r3
 8002f8c:	2380      	movs	r3, #128	; 0x80
 8002f8e:	025b      	lsls	r3, r3, #9
 8002f90:	429a      	cmp	r2, r3
 8002f92:	d10d      	bne.n	8002fb0 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f94:	4bb8      	ldr	r3, [pc, #736]	; (8003278 <HAL_RCC_OscConfig+0x32c>)
 8002f96:	681a      	ldr	r2, [r3, #0]
 8002f98:	2380      	movs	r3, #128	; 0x80
 8002f9a:	029b      	lsls	r3, r3, #10
 8002f9c:	4013      	ands	r3, r2
 8002f9e:	d100      	bne.n	8002fa2 <HAL_RCC_OscConfig+0x56>
 8002fa0:	e070      	b.n	8003084 <HAL_RCC_OscConfig+0x138>
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	685b      	ldr	r3, [r3, #4]
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d000      	beq.n	8002fac <HAL_RCC_OscConfig+0x60>
 8002faa:	e06b      	b.n	8003084 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8002fac:	2301      	movs	r3, #1
 8002fae:	e2d8      	b.n	8003562 <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	685b      	ldr	r3, [r3, #4]
 8002fb4:	2b01      	cmp	r3, #1
 8002fb6:	d107      	bne.n	8002fc8 <HAL_RCC_OscConfig+0x7c>
 8002fb8:	4baf      	ldr	r3, [pc, #700]	; (8003278 <HAL_RCC_OscConfig+0x32c>)
 8002fba:	681a      	ldr	r2, [r3, #0]
 8002fbc:	4bae      	ldr	r3, [pc, #696]	; (8003278 <HAL_RCC_OscConfig+0x32c>)
 8002fbe:	2180      	movs	r1, #128	; 0x80
 8002fc0:	0249      	lsls	r1, r1, #9
 8002fc2:	430a      	orrs	r2, r1
 8002fc4:	601a      	str	r2, [r3, #0]
 8002fc6:	e02f      	b.n	8003028 <HAL_RCC_OscConfig+0xdc>
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	685b      	ldr	r3, [r3, #4]
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d10c      	bne.n	8002fea <HAL_RCC_OscConfig+0x9e>
 8002fd0:	4ba9      	ldr	r3, [pc, #676]	; (8003278 <HAL_RCC_OscConfig+0x32c>)
 8002fd2:	681a      	ldr	r2, [r3, #0]
 8002fd4:	4ba8      	ldr	r3, [pc, #672]	; (8003278 <HAL_RCC_OscConfig+0x32c>)
 8002fd6:	49a9      	ldr	r1, [pc, #676]	; (800327c <HAL_RCC_OscConfig+0x330>)
 8002fd8:	400a      	ands	r2, r1
 8002fda:	601a      	str	r2, [r3, #0]
 8002fdc:	4ba6      	ldr	r3, [pc, #664]	; (8003278 <HAL_RCC_OscConfig+0x32c>)
 8002fde:	681a      	ldr	r2, [r3, #0]
 8002fe0:	4ba5      	ldr	r3, [pc, #660]	; (8003278 <HAL_RCC_OscConfig+0x32c>)
 8002fe2:	49a7      	ldr	r1, [pc, #668]	; (8003280 <HAL_RCC_OscConfig+0x334>)
 8002fe4:	400a      	ands	r2, r1
 8002fe6:	601a      	str	r2, [r3, #0]
 8002fe8:	e01e      	b.n	8003028 <HAL_RCC_OscConfig+0xdc>
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	685b      	ldr	r3, [r3, #4]
 8002fee:	2b05      	cmp	r3, #5
 8002ff0:	d10e      	bne.n	8003010 <HAL_RCC_OscConfig+0xc4>
 8002ff2:	4ba1      	ldr	r3, [pc, #644]	; (8003278 <HAL_RCC_OscConfig+0x32c>)
 8002ff4:	681a      	ldr	r2, [r3, #0]
 8002ff6:	4ba0      	ldr	r3, [pc, #640]	; (8003278 <HAL_RCC_OscConfig+0x32c>)
 8002ff8:	2180      	movs	r1, #128	; 0x80
 8002ffa:	02c9      	lsls	r1, r1, #11
 8002ffc:	430a      	orrs	r2, r1
 8002ffe:	601a      	str	r2, [r3, #0]
 8003000:	4b9d      	ldr	r3, [pc, #628]	; (8003278 <HAL_RCC_OscConfig+0x32c>)
 8003002:	681a      	ldr	r2, [r3, #0]
 8003004:	4b9c      	ldr	r3, [pc, #624]	; (8003278 <HAL_RCC_OscConfig+0x32c>)
 8003006:	2180      	movs	r1, #128	; 0x80
 8003008:	0249      	lsls	r1, r1, #9
 800300a:	430a      	orrs	r2, r1
 800300c:	601a      	str	r2, [r3, #0]
 800300e:	e00b      	b.n	8003028 <HAL_RCC_OscConfig+0xdc>
 8003010:	4b99      	ldr	r3, [pc, #612]	; (8003278 <HAL_RCC_OscConfig+0x32c>)
 8003012:	681a      	ldr	r2, [r3, #0]
 8003014:	4b98      	ldr	r3, [pc, #608]	; (8003278 <HAL_RCC_OscConfig+0x32c>)
 8003016:	4999      	ldr	r1, [pc, #612]	; (800327c <HAL_RCC_OscConfig+0x330>)
 8003018:	400a      	ands	r2, r1
 800301a:	601a      	str	r2, [r3, #0]
 800301c:	4b96      	ldr	r3, [pc, #600]	; (8003278 <HAL_RCC_OscConfig+0x32c>)
 800301e:	681a      	ldr	r2, [r3, #0]
 8003020:	4b95      	ldr	r3, [pc, #596]	; (8003278 <HAL_RCC_OscConfig+0x32c>)
 8003022:	4997      	ldr	r1, [pc, #604]	; (8003280 <HAL_RCC_OscConfig+0x334>)
 8003024:	400a      	ands	r2, r1
 8003026:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	685b      	ldr	r3, [r3, #4]
 800302c:	2b00      	cmp	r3, #0
 800302e:	d014      	beq.n	800305a <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003030:	f7fe fee2 	bl	8001df8 <HAL_GetTick>
 8003034:	0003      	movs	r3, r0
 8003036:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003038:	e008      	b.n	800304c <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800303a:	f7fe fedd 	bl	8001df8 <HAL_GetTick>
 800303e:	0002      	movs	r2, r0
 8003040:	69bb      	ldr	r3, [r7, #24]
 8003042:	1ad3      	subs	r3, r2, r3
 8003044:	2b64      	cmp	r3, #100	; 0x64
 8003046:	d901      	bls.n	800304c <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8003048:	2303      	movs	r3, #3
 800304a:	e28a      	b.n	8003562 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800304c:	4b8a      	ldr	r3, [pc, #552]	; (8003278 <HAL_RCC_OscConfig+0x32c>)
 800304e:	681a      	ldr	r2, [r3, #0]
 8003050:	2380      	movs	r3, #128	; 0x80
 8003052:	029b      	lsls	r3, r3, #10
 8003054:	4013      	ands	r3, r2
 8003056:	d0f0      	beq.n	800303a <HAL_RCC_OscConfig+0xee>
 8003058:	e015      	b.n	8003086 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800305a:	f7fe fecd 	bl	8001df8 <HAL_GetTick>
 800305e:	0003      	movs	r3, r0
 8003060:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003062:	e008      	b.n	8003076 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003064:	f7fe fec8 	bl	8001df8 <HAL_GetTick>
 8003068:	0002      	movs	r2, r0
 800306a:	69bb      	ldr	r3, [r7, #24]
 800306c:	1ad3      	subs	r3, r2, r3
 800306e:	2b64      	cmp	r3, #100	; 0x64
 8003070:	d901      	bls.n	8003076 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8003072:	2303      	movs	r3, #3
 8003074:	e275      	b.n	8003562 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003076:	4b80      	ldr	r3, [pc, #512]	; (8003278 <HAL_RCC_OscConfig+0x32c>)
 8003078:	681a      	ldr	r2, [r3, #0]
 800307a:	2380      	movs	r3, #128	; 0x80
 800307c:	029b      	lsls	r3, r3, #10
 800307e:	4013      	ands	r3, r2
 8003080:	d1f0      	bne.n	8003064 <HAL_RCC_OscConfig+0x118>
 8003082:	e000      	b.n	8003086 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003084:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	2202      	movs	r2, #2
 800308c:	4013      	ands	r3, r2
 800308e:	d100      	bne.n	8003092 <HAL_RCC_OscConfig+0x146>
 8003090:	e069      	b.n	8003166 <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8003092:	4b79      	ldr	r3, [pc, #484]	; (8003278 <HAL_RCC_OscConfig+0x32c>)
 8003094:	685b      	ldr	r3, [r3, #4]
 8003096:	220c      	movs	r2, #12
 8003098:	4013      	ands	r3, r2
 800309a:	d00b      	beq.n	80030b4 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800309c:	4b76      	ldr	r3, [pc, #472]	; (8003278 <HAL_RCC_OscConfig+0x32c>)
 800309e:	685b      	ldr	r3, [r3, #4]
 80030a0:	220c      	movs	r2, #12
 80030a2:	4013      	ands	r3, r2
 80030a4:	2b08      	cmp	r3, #8
 80030a6:	d11c      	bne.n	80030e2 <HAL_RCC_OscConfig+0x196>
 80030a8:	4b73      	ldr	r3, [pc, #460]	; (8003278 <HAL_RCC_OscConfig+0x32c>)
 80030aa:	685a      	ldr	r2, [r3, #4]
 80030ac:	2380      	movs	r3, #128	; 0x80
 80030ae:	025b      	lsls	r3, r3, #9
 80030b0:	4013      	ands	r3, r2
 80030b2:	d116      	bne.n	80030e2 <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80030b4:	4b70      	ldr	r3, [pc, #448]	; (8003278 <HAL_RCC_OscConfig+0x32c>)
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	2202      	movs	r2, #2
 80030ba:	4013      	ands	r3, r2
 80030bc:	d005      	beq.n	80030ca <HAL_RCC_OscConfig+0x17e>
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	68db      	ldr	r3, [r3, #12]
 80030c2:	2b01      	cmp	r3, #1
 80030c4:	d001      	beq.n	80030ca <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80030c6:	2301      	movs	r3, #1
 80030c8:	e24b      	b.n	8003562 <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030ca:	4b6b      	ldr	r3, [pc, #428]	; (8003278 <HAL_RCC_OscConfig+0x32c>)
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	22f8      	movs	r2, #248	; 0xf8
 80030d0:	4393      	bics	r3, r2
 80030d2:	0019      	movs	r1, r3
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	691b      	ldr	r3, [r3, #16]
 80030d8:	00da      	lsls	r2, r3, #3
 80030da:	4b67      	ldr	r3, [pc, #412]	; (8003278 <HAL_RCC_OscConfig+0x32c>)
 80030dc:	430a      	orrs	r2, r1
 80030de:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80030e0:	e041      	b.n	8003166 <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	68db      	ldr	r3, [r3, #12]
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d024      	beq.n	8003134 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80030ea:	4b63      	ldr	r3, [pc, #396]	; (8003278 <HAL_RCC_OscConfig+0x32c>)
 80030ec:	681a      	ldr	r2, [r3, #0]
 80030ee:	4b62      	ldr	r3, [pc, #392]	; (8003278 <HAL_RCC_OscConfig+0x32c>)
 80030f0:	2101      	movs	r1, #1
 80030f2:	430a      	orrs	r2, r1
 80030f4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030f6:	f7fe fe7f 	bl	8001df8 <HAL_GetTick>
 80030fa:	0003      	movs	r3, r0
 80030fc:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030fe:	e008      	b.n	8003112 <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003100:	f7fe fe7a 	bl	8001df8 <HAL_GetTick>
 8003104:	0002      	movs	r2, r0
 8003106:	69bb      	ldr	r3, [r7, #24]
 8003108:	1ad3      	subs	r3, r2, r3
 800310a:	2b02      	cmp	r3, #2
 800310c:	d901      	bls.n	8003112 <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 800310e:	2303      	movs	r3, #3
 8003110:	e227      	b.n	8003562 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003112:	4b59      	ldr	r3, [pc, #356]	; (8003278 <HAL_RCC_OscConfig+0x32c>)
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	2202      	movs	r2, #2
 8003118:	4013      	ands	r3, r2
 800311a:	d0f1      	beq.n	8003100 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800311c:	4b56      	ldr	r3, [pc, #344]	; (8003278 <HAL_RCC_OscConfig+0x32c>)
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	22f8      	movs	r2, #248	; 0xf8
 8003122:	4393      	bics	r3, r2
 8003124:	0019      	movs	r1, r3
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	691b      	ldr	r3, [r3, #16]
 800312a:	00da      	lsls	r2, r3, #3
 800312c:	4b52      	ldr	r3, [pc, #328]	; (8003278 <HAL_RCC_OscConfig+0x32c>)
 800312e:	430a      	orrs	r2, r1
 8003130:	601a      	str	r2, [r3, #0]
 8003132:	e018      	b.n	8003166 <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003134:	4b50      	ldr	r3, [pc, #320]	; (8003278 <HAL_RCC_OscConfig+0x32c>)
 8003136:	681a      	ldr	r2, [r3, #0]
 8003138:	4b4f      	ldr	r3, [pc, #316]	; (8003278 <HAL_RCC_OscConfig+0x32c>)
 800313a:	2101      	movs	r1, #1
 800313c:	438a      	bics	r2, r1
 800313e:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003140:	f7fe fe5a 	bl	8001df8 <HAL_GetTick>
 8003144:	0003      	movs	r3, r0
 8003146:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003148:	e008      	b.n	800315c <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800314a:	f7fe fe55 	bl	8001df8 <HAL_GetTick>
 800314e:	0002      	movs	r2, r0
 8003150:	69bb      	ldr	r3, [r7, #24]
 8003152:	1ad3      	subs	r3, r2, r3
 8003154:	2b02      	cmp	r3, #2
 8003156:	d901      	bls.n	800315c <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8003158:	2303      	movs	r3, #3
 800315a:	e202      	b.n	8003562 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800315c:	4b46      	ldr	r3, [pc, #280]	; (8003278 <HAL_RCC_OscConfig+0x32c>)
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	2202      	movs	r2, #2
 8003162:	4013      	ands	r3, r2
 8003164:	d1f1      	bne.n	800314a <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	2208      	movs	r2, #8
 800316c:	4013      	ands	r3, r2
 800316e:	d036      	beq.n	80031de <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	69db      	ldr	r3, [r3, #28]
 8003174:	2b00      	cmp	r3, #0
 8003176:	d019      	beq.n	80031ac <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003178:	4b3f      	ldr	r3, [pc, #252]	; (8003278 <HAL_RCC_OscConfig+0x32c>)
 800317a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800317c:	4b3e      	ldr	r3, [pc, #248]	; (8003278 <HAL_RCC_OscConfig+0x32c>)
 800317e:	2101      	movs	r1, #1
 8003180:	430a      	orrs	r2, r1
 8003182:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003184:	f7fe fe38 	bl	8001df8 <HAL_GetTick>
 8003188:	0003      	movs	r3, r0
 800318a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800318c:	e008      	b.n	80031a0 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800318e:	f7fe fe33 	bl	8001df8 <HAL_GetTick>
 8003192:	0002      	movs	r2, r0
 8003194:	69bb      	ldr	r3, [r7, #24]
 8003196:	1ad3      	subs	r3, r2, r3
 8003198:	2b02      	cmp	r3, #2
 800319a:	d901      	bls.n	80031a0 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 800319c:	2303      	movs	r3, #3
 800319e:	e1e0      	b.n	8003562 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80031a0:	4b35      	ldr	r3, [pc, #212]	; (8003278 <HAL_RCC_OscConfig+0x32c>)
 80031a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031a4:	2202      	movs	r2, #2
 80031a6:	4013      	ands	r3, r2
 80031a8:	d0f1      	beq.n	800318e <HAL_RCC_OscConfig+0x242>
 80031aa:	e018      	b.n	80031de <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80031ac:	4b32      	ldr	r3, [pc, #200]	; (8003278 <HAL_RCC_OscConfig+0x32c>)
 80031ae:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80031b0:	4b31      	ldr	r3, [pc, #196]	; (8003278 <HAL_RCC_OscConfig+0x32c>)
 80031b2:	2101      	movs	r1, #1
 80031b4:	438a      	bics	r2, r1
 80031b6:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031b8:	f7fe fe1e 	bl	8001df8 <HAL_GetTick>
 80031bc:	0003      	movs	r3, r0
 80031be:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80031c0:	e008      	b.n	80031d4 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80031c2:	f7fe fe19 	bl	8001df8 <HAL_GetTick>
 80031c6:	0002      	movs	r2, r0
 80031c8:	69bb      	ldr	r3, [r7, #24]
 80031ca:	1ad3      	subs	r3, r2, r3
 80031cc:	2b02      	cmp	r3, #2
 80031ce:	d901      	bls.n	80031d4 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 80031d0:	2303      	movs	r3, #3
 80031d2:	e1c6      	b.n	8003562 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80031d4:	4b28      	ldr	r3, [pc, #160]	; (8003278 <HAL_RCC_OscConfig+0x32c>)
 80031d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031d8:	2202      	movs	r2, #2
 80031da:	4013      	ands	r3, r2
 80031dc:	d1f1      	bne.n	80031c2 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	2204      	movs	r2, #4
 80031e4:	4013      	ands	r3, r2
 80031e6:	d100      	bne.n	80031ea <HAL_RCC_OscConfig+0x29e>
 80031e8:	e0b4      	b.n	8003354 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 80031ea:	201f      	movs	r0, #31
 80031ec:	183b      	adds	r3, r7, r0
 80031ee:	2200      	movs	r2, #0
 80031f0:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80031f2:	4b21      	ldr	r3, [pc, #132]	; (8003278 <HAL_RCC_OscConfig+0x32c>)
 80031f4:	69da      	ldr	r2, [r3, #28]
 80031f6:	2380      	movs	r3, #128	; 0x80
 80031f8:	055b      	lsls	r3, r3, #21
 80031fa:	4013      	ands	r3, r2
 80031fc:	d110      	bne.n	8003220 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80031fe:	4b1e      	ldr	r3, [pc, #120]	; (8003278 <HAL_RCC_OscConfig+0x32c>)
 8003200:	69da      	ldr	r2, [r3, #28]
 8003202:	4b1d      	ldr	r3, [pc, #116]	; (8003278 <HAL_RCC_OscConfig+0x32c>)
 8003204:	2180      	movs	r1, #128	; 0x80
 8003206:	0549      	lsls	r1, r1, #21
 8003208:	430a      	orrs	r2, r1
 800320a:	61da      	str	r2, [r3, #28]
 800320c:	4b1a      	ldr	r3, [pc, #104]	; (8003278 <HAL_RCC_OscConfig+0x32c>)
 800320e:	69da      	ldr	r2, [r3, #28]
 8003210:	2380      	movs	r3, #128	; 0x80
 8003212:	055b      	lsls	r3, r3, #21
 8003214:	4013      	ands	r3, r2
 8003216:	60fb      	str	r3, [r7, #12]
 8003218:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800321a:	183b      	adds	r3, r7, r0
 800321c:	2201      	movs	r2, #1
 800321e:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003220:	4b18      	ldr	r3, [pc, #96]	; (8003284 <HAL_RCC_OscConfig+0x338>)
 8003222:	681a      	ldr	r2, [r3, #0]
 8003224:	2380      	movs	r3, #128	; 0x80
 8003226:	005b      	lsls	r3, r3, #1
 8003228:	4013      	ands	r3, r2
 800322a:	d11a      	bne.n	8003262 <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800322c:	4b15      	ldr	r3, [pc, #84]	; (8003284 <HAL_RCC_OscConfig+0x338>)
 800322e:	681a      	ldr	r2, [r3, #0]
 8003230:	4b14      	ldr	r3, [pc, #80]	; (8003284 <HAL_RCC_OscConfig+0x338>)
 8003232:	2180      	movs	r1, #128	; 0x80
 8003234:	0049      	lsls	r1, r1, #1
 8003236:	430a      	orrs	r2, r1
 8003238:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800323a:	f7fe fddd 	bl	8001df8 <HAL_GetTick>
 800323e:	0003      	movs	r3, r0
 8003240:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003242:	e008      	b.n	8003256 <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003244:	f7fe fdd8 	bl	8001df8 <HAL_GetTick>
 8003248:	0002      	movs	r2, r0
 800324a:	69bb      	ldr	r3, [r7, #24]
 800324c:	1ad3      	subs	r3, r2, r3
 800324e:	2b64      	cmp	r3, #100	; 0x64
 8003250:	d901      	bls.n	8003256 <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 8003252:	2303      	movs	r3, #3
 8003254:	e185      	b.n	8003562 <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003256:	4b0b      	ldr	r3, [pc, #44]	; (8003284 <HAL_RCC_OscConfig+0x338>)
 8003258:	681a      	ldr	r2, [r3, #0]
 800325a:	2380      	movs	r3, #128	; 0x80
 800325c:	005b      	lsls	r3, r3, #1
 800325e:	4013      	ands	r3, r2
 8003260:	d0f0      	beq.n	8003244 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	689b      	ldr	r3, [r3, #8]
 8003266:	2b01      	cmp	r3, #1
 8003268:	d10e      	bne.n	8003288 <HAL_RCC_OscConfig+0x33c>
 800326a:	4b03      	ldr	r3, [pc, #12]	; (8003278 <HAL_RCC_OscConfig+0x32c>)
 800326c:	6a1a      	ldr	r2, [r3, #32]
 800326e:	4b02      	ldr	r3, [pc, #8]	; (8003278 <HAL_RCC_OscConfig+0x32c>)
 8003270:	2101      	movs	r1, #1
 8003272:	430a      	orrs	r2, r1
 8003274:	621a      	str	r2, [r3, #32]
 8003276:	e035      	b.n	80032e4 <HAL_RCC_OscConfig+0x398>
 8003278:	40021000 	.word	0x40021000
 800327c:	fffeffff 	.word	0xfffeffff
 8003280:	fffbffff 	.word	0xfffbffff
 8003284:	40007000 	.word	0x40007000
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	689b      	ldr	r3, [r3, #8]
 800328c:	2b00      	cmp	r3, #0
 800328e:	d10c      	bne.n	80032aa <HAL_RCC_OscConfig+0x35e>
 8003290:	4bb6      	ldr	r3, [pc, #728]	; (800356c <HAL_RCC_OscConfig+0x620>)
 8003292:	6a1a      	ldr	r2, [r3, #32]
 8003294:	4bb5      	ldr	r3, [pc, #724]	; (800356c <HAL_RCC_OscConfig+0x620>)
 8003296:	2101      	movs	r1, #1
 8003298:	438a      	bics	r2, r1
 800329a:	621a      	str	r2, [r3, #32]
 800329c:	4bb3      	ldr	r3, [pc, #716]	; (800356c <HAL_RCC_OscConfig+0x620>)
 800329e:	6a1a      	ldr	r2, [r3, #32]
 80032a0:	4bb2      	ldr	r3, [pc, #712]	; (800356c <HAL_RCC_OscConfig+0x620>)
 80032a2:	2104      	movs	r1, #4
 80032a4:	438a      	bics	r2, r1
 80032a6:	621a      	str	r2, [r3, #32]
 80032a8:	e01c      	b.n	80032e4 <HAL_RCC_OscConfig+0x398>
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	689b      	ldr	r3, [r3, #8]
 80032ae:	2b05      	cmp	r3, #5
 80032b0:	d10c      	bne.n	80032cc <HAL_RCC_OscConfig+0x380>
 80032b2:	4bae      	ldr	r3, [pc, #696]	; (800356c <HAL_RCC_OscConfig+0x620>)
 80032b4:	6a1a      	ldr	r2, [r3, #32]
 80032b6:	4bad      	ldr	r3, [pc, #692]	; (800356c <HAL_RCC_OscConfig+0x620>)
 80032b8:	2104      	movs	r1, #4
 80032ba:	430a      	orrs	r2, r1
 80032bc:	621a      	str	r2, [r3, #32]
 80032be:	4bab      	ldr	r3, [pc, #684]	; (800356c <HAL_RCC_OscConfig+0x620>)
 80032c0:	6a1a      	ldr	r2, [r3, #32]
 80032c2:	4baa      	ldr	r3, [pc, #680]	; (800356c <HAL_RCC_OscConfig+0x620>)
 80032c4:	2101      	movs	r1, #1
 80032c6:	430a      	orrs	r2, r1
 80032c8:	621a      	str	r2, [r3, #32]
 80032ca:	e00b      	b.n	80032e4 <HAL_RCC_OscConfig+0x398>
 80032cc:	4ba7      	ldr	r3, [pc, #668]	; (800356c <HAL_RCC_OscConfig+0x620>)
 80032ce:	6a1a      	ldr	r2, [r3, #32]
 80032d0:	4ba6      	ldr	r3, [pc, #664]	; (800356c <HAL_RCC_OscConfig+0x620>)
 80032d2:	2101      	movs	r1, #1
 80032d4:	438a      	bics	r2, r1
 80032d6:	621a      	str	r2, [r3, #32]
 80032d8:	4ba4      	ldr	r3, [pc, #656]	; (800356c <HAL_RCC_OscConfig+0x620>)
 80032da:	6a1a      	ldr	r2, [r3, #32]
 80032dc:	4ba3      	ldr	r3, [pc, #652]	; (800356c <HAL_RCC_OscConfig+0x620>)
 80032de:	2104      	movs	r1, #4
 80032e0:	438a      	bics	r2, r1
 80032e2:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	689b      	ldr	r3, [r3, #8]
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d014      	beq.n	8003316 <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032ec:	f7fe fd84 	bl	8001df8 <HAL_GetTick>
 80032f0:	0003      	movs	r3, r0
 80032f2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032f4:	e009      	b.n	800330a <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80032f6:	f7fe fd7f 	bl	8001df8 <HAL_GetTick>
 80032fa:	0002      	movs	r2, r0
 80032fc:	69bb      	ldr	r3, [r7, #24]
 80032fe:	1ad3      	subs	r3, r2, r3
 8003300:	4a9b      	ldr	r2, [pc, #620]	; (8003570 <HAL_RCC_OscConfig+0x624>)
 8003302:	4293      	cmp	r3, r2
 8003304:	d901      	bls.n	800330a <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 8003306:	2303      	movs	r3, #3
 8003308:	e12b      	b.n	8003562 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800330a:	4b98      	ldr	r3, [pc, #608]	; (800356c <HAL_RCC_OscConfig+0x620>)
 800330c:	6a1b      	ldr	r3, [r3, #32]
 800330e:	2202      	movs	r2, #2
 8003310:	4013      	ands	r3, r2
 8003312:	d0f0      	beq.n	80032f6 <HAL_RCC_OscConfig+0x3aa>
 8003314:	e013      	b.n	800333e <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003316:	f7fe fd6f 	bl	8001df8 <HAL_GetTick>
 800331a:	0003      	movs	r3, r0
 800331c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800331e:	e009      	b.n	8003334 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003320:	f7fe fd6a 	bl	8001df8 <HAL_GetTick>
 8003324:	0002      	movs	r2, r0
 8003326:	69bb      	ldr	r3, [r7, #24]
 8003328:	1ad3      	subs	r3, r2, r3
 800332a:	4a91      	ldr	r2, [pc, #580]	; (8003570 <HAL_RCC_OscConfig+0x624>)
 800332c:	4293      	cmp	r3, r2
 800332e:	d901      	bls.n	8003334 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 8003330:	2303      	movs	r3, #3
 8003332:	e116      	b.n	8003562 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003334:	4b8d      	ldr	r3, [pc, #564]	; (800356c <HAL_RCC_OscConfig+0x620>)
 8003336:	6a1b      	ldr	r3, [r3, #32]
 8003338:	2202      	movs	r2, #2
 800333a:	4013      	ands	r3, r2
 800333c:	d1f0      	bne.n	8003320 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800333e:	231f      	movs	r3, #31
 8003340:	18fb      	adds	r3, r7, r3
 8003342:	781b      	ldrb	r3, [r3, #0]
 8003344:	2b01      	cmp	r3, #1
 8003346:	d105      	bne.n	8003354 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003348:	4b88      	ldr	r3, [pc, #544]	; (800356c <HAL_RCC_OscConfig+0x620>)
 800334a:	69da      	ldr	r2, [r3, #28]
 800334c:	4b87      	ldr	r3, [pc, #540]	; (800356c <HAL_RCC_OscConfig+0x620>)
 800334e:	4989      	ldr	r1, [pc, #548]	; (8003574 <HAL_RCC_OscConfig+0x628>)
 8003350:	400a      	ands	r2, r1
 8003352:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	2210      	movs	r2, #16
 800335a:	4013      	ands	r3, r2
 800335c:	d063      	beq.n	8003426 <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	695b      	ldr	r3, [r3, #20]
 8003362:	2b01      	cmp	r3, #1
 8003364:	d12a      	bne.n	80033bc <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8003366:	4b81      	ldr	r3, [pc, #516]	; (800356c <HAL_RCC_OscConfig+0x620>)
 8003368:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800336a:	4b80      	ldr	r3, [pc, #512]	; (800356c <HAL_RCC_OscConfig+0x620>)
 800336c:	2104      	movs	r1, #4
 800336e:	430a      	orrs	r2, r1
 8003370:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8003372:	4b7e      	ldr	r3, [pc, #504]	; (800356c <HAL_RCC_OscConfig+0x620>)
 8003374:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003376:	4b7d      	ldr	r3, [pc, #500]	; (800356c <HAL_RCC_OscConfig+0x620>)
 8003378:	2101      	movs	r1, #1
 800337a:	430a      	orrs	r2, r1
 800337c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800337e:	f7fe fd3b 	bl	8001df8 <HAL_GetTick>
 8003382:	0003      	movs	r3, r0
 8003384:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8003386:	e008      	b.n	800339a <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8003388:	f7fe fd36 	bl	8001df8 <HAL_GetTick>
 800338c:	0002      	movs	r2, r0
 800338e:	69bb      	ldr	r3, [r7, #24]
 8003390:	1ad3      	subs	r3, r2, r3
 8003392:	2b02      	cmp	r3, #2
 8003394:	d901      	bls.n	800339a <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 8003396:	2303      	movs	r3, #3
 8003398:	e0e3      	b.n	8003562 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800339a:	4b74      	ldr	r3, [pc, #464]	; (800356c <HAL_RCC_OscConfig+0x620>)
 800339c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800339e:	2202      	movs	r2, #2
 80033a0:	4013      	ands	r3, r2
 80033a2:	d0f1      	beq.n	8003388 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80033a4:	4b71      	ldr	r3, [pc, #452]	; (800356c <HAL_RCC_OscConfig+0x620>)
 80033a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033a8:	22f8      	movs	r2, #248	; 0xf8
 80033aa:	4393      	bics	r3, r2
 80033ac:	0019      	movs	r1, r3
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	699b      	ldr	r3, [r3, #24]
 80033b2:	00da      	lsls	r2, r3, #3
 80033b4:	4b6d      	ldr	r3, [pc, #436]	; (800356c <HAL_RCC_OscConfig+0x620>)
 80033b6:	430a      	orrs	r2, r1
 80033b8:	635a      	str	r2, [r3, #52]	; 0x34
 80033ba:	e034      	b.n	8003426 <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	695b      	ldr	r3, [r3, #20]
 80033c0:	3305      	adds	r3, #5
 80033c2:	d111      	bne.n	80033e8 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80033c4:	4b69      	ldr	r3, [pc, #420]	; (800356c <HAL_RCC_OscConfig+0x620>)
 80033c6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80033c8:	4b68      	ldr	r3, [pc, #416]	; (800356c <HAL_RCC_OscConfig+0x620>)
 80033ca:	2104      	movs	r1, #4
 80033cc:	438a      	bics	r2, r1
 80033ce:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80033d0:	4b66      	ldr	r3, [pc, #408]	; (800356c <HAL_RCC_OscConfig+0x620>)
 80033d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033d4:	22f8      	movs	r2, #248	; 0xf8
 80033d6:	4393      	bics	r3, r2
 80033d8:	0019      	movs	r1, r3
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	699b      	ldr	r3, [r3, #24]
 80033de:	00da      	lsls	r2, r3, #3
 80033e0:	4b62      	ldr	r3, [pc, #392]	; (800356c <HAL_RCC_OscConfig+0x620>)
 80033e2:	430a      	orrs	r2, r1
 80033e4:	635a      	str	r2, [r3, #52]	; 0x34
 80033e6:	e01e      	b.n	8003426 <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80033e8:	4b60      	ldr	r3, [pc, #384]	; (800356c <HAL_RCC_OscConfig+0x620>)
 80033ea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80033ec:	4b5f      	ldr	r3, [pc, #380]	; (800356c <HAL_RCC_OscConfig+0x620>)
 80033ee:	2104      	movs	r1, #4
 80033f0:	430a      	orrs	r2, r1
 80033f2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 80033f4:	4b5d      	ldr	r3, [pc, #372]	; (800356c <HAL_RCC_OscConfig+0x620>)
 80033f6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80033f8:	4b5c      	ldr	r3, [pc, #368]	; (800356c <HAL_RCC_OscConfig+0x620>)
 80033fa:	2101      	movs	r1, #1
 80033fc:	438a      	bics	r2, r1
 80033fe:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003400:	f7fe fcfa 	bl	8001df8 <HAL_GetTick>
 8003404:	0003      	movs	r3, r0
 8003406:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8003408:	e008      	b.n	800341c <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800340a:	f7fe fcf5 	bl	8001df8 <HAL_GetTick>
 800340e:	0002      	movs	r2, r0
 8003410:	69bb      	ldr	r3, [r7, #24]
 8003412:	1ad3      	subs	r3, r2, r3
 8003414:	2b02      	cmp	r3, #2
 8003416:	d901      	bls.n	800341c <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 8003418:	2303      	movs	r3, #3
 800341a:	e0a2      	b.n	8003562 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 800341c:	4b53      	ldr	r3, [pc, #332]	; (800356c <HAL_RCC_OscConfig+0x620>)
 800341e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003420:	2202      	movs	r2, #2
 8003422:	4013      	ands	r3, r2
 8003424:	d1f1      	bne.n	800340a <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	6a1b      	ldr	r3, [r3, #32]
 800342a:	2b00      	cmp	r3, #0
 800342c:	d100      	bne.n	8003430 <HAL_RCC_OscConfig+0x4e4>
 800342e:	e097      	b.n	8003560 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003430:	4b4e      	ldr	r3, [pc, #312]	; (800356c <HAL_RCC_OscConfig+0x620>)
 8003432:	685b      	ldr	r3, [r3, #4]
 8003434:	220c      	movs	r2, #12
 8003436:	4013      	ands	r3, r2
 8003438:	2b08      	cmp	r3, #8
 800343a:	d100      	bne.n	800343e <HAL_RCC_OscConfig+0x4f2>
 800343c:	e06b      	b.n	8003516 <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	6a1b      	ldr	r3, [r3, #32]
 8003442:	2b02      	cmp	r3, #2
 8003444:	d14c      	bne.n	80034e0 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003446:	4b49      	ldr	r3, [pc, #292]	; (800356c <HAL_RCC_OscConfig+0x620>)
 8003448:	681a      	ldr	r2, [r3, #0]
 800344a:	4b48      	ldr	r3, [pc, #288]	; (800356c <HAL_RCC_OscConfig+0x620>)
 800344c:	494a      	ldr	r1, [pc, #296]	; (8003578 <HAL_RCC_OscConfig+0x62c>)
 800344e:	400a      	ands	r2, r1
 8003450:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003452:	f7fe fcd1 	bl	8001df8 <HAL_GetTick>
 8003456:	0003      	movs	r3, r0
 8003458:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800345a:	e008      	b.n	800346e <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800345c:	f7fe fccc 	bl	8001df8 <HAL_GetTick>
 8003460:	0002      	movs	r2, r0
 8003462:	69bb      	ldr	r3, [r7, #24]
 8003464:	1ad3      	subs	r3, r2, r3
 8003466:	2b02      	cmp	r3, #2
 8003468:	d901      	bls.n	800346e <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 800346a:	2303      	movs	r3, #3
 800346c:	e079      	b.n	8003562 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800346e:	4b3f      	ldr	r3, [pc, #252]	; (800356c <HAL_RCC_OscConfig+0x620>)
 8003470:	681a      	ldr	r2, [r3, #0]
 8003472:	2380      	movs	r3, #128	; 0x80
 8003474:	049b      	lsls	r3, r3, #18
 8003476:	4013      	ands	r3, r2
 8003478:	d1f0      	bne.n	800345c <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800347a:	4b3c      	ldr	r3, [pc, #240]	; (800356c <HAL_RCC_OscConfig+0x620>)
 800347c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800347e:	220f      	movs	r2, #15
 8003480:	4393      	bics	r3, r2
 8003482:	0019      	movs	r1, r3
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003488:	4b38      	ldr	r3, [pc, #224]	; (800356c <HAL_RCC_OscConfig+0x620>)
 800348a:	430a      	orrs	r2, r1
 800348c:	62da      	str	r2, [r3, #44]	; 0x2c
 800348e:	4b37      	ldr	r3, [pc, #220]	; (800356c <HAL_RCC_OscConfig+0x620>)
 8003490:	685b      	ldr	r3, [r3, #4]
 8003492:	4a3a      	ldr	r2, [pc, #232]	; (800357c <HAL_RCC_OscConfig+0x630>)
 8003494:	4013      	ands	r3, r2
 8003496:	0019      	movs	r1, r3
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034a0:	431a      	orrs	r2, r3
 80034a2:	4b32      	ldr	r3, [pc, #200]	; (800356c <HAL_RCC_OscConfig+0x620>)
 80034a4:	430a      	orrs	r2, r1
 80034a6:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80034a8:	4b30      	ldr	r3, [pc, #192]	; (800356c <HAL_RCC_OscConfig+0x620>)
 80034aa:	681a      	ldr	r2, [r3, #0]
 80034ac:	4b2f      	ldr	r3, [pc, #188]	; (800356c <HAL_RCC_OscConfig+0x620>)
 80034ae:	2180      	movs	r1, #128	; 0x80
 80034b0:	0449      	lsls	r1, r1, #17
 80034b2:	430a      	orrs	r2, r1
 80034b4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034b6:	f7fe fc9f 	bl	8001df8 <HAL_GetTick>
 80034ba:	0003      	movs	r3, r0
 80034bc:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80034be:	e008      	b.n	80034d2 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80034c0:	f7fe fc9a 	bl	8001df8 <HAL_GetTick>
 80034c4:	0002      	movs	r2, r0
 80034c6:	69bb      	ldr	r3, [r7, #24]
 80034c8:	1ad3      	subs	r3, r2, r3
 80034ca:	2b02      	cmp	r3, #2
 80034cc:	d901      	bls.n	80034d2 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 80034ce:	2303      	movs	r3, #3
 80034d0:	e047      	b.n	8003562 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80034d2:	4b26      	ldr	r3, [pc, #152]	; (800356c <HAL_RCC_OscConfig+0x620>)
 80034d4:	681a      	ldr	r2, [r3, #0]
 80034d6:	2380      	movs	r3, #128	; 0x80
 80034d8:	049b      	lsls	r3, r3, #18
 80034da:	4013      	ands	r3, r2
 80034dc:	d0f0      	beq.n	80034c0 <HAL_RCC_OscConfig+0x574>
 80034de:	e03f      	b.n	8003560 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034e0:	4b22      	ldr	r3, [pc, #136]	; (800356c <HAL_RCC_OscConfig+0x620>)
 80034e2:	681a      	ldr	r2, [r3, #0]
 80034e4:	4b21      	ldr	r3, [pc, #132]	; (800356c <HAL_RCC_OscConfig+0x620>)
 80034e6:	4924      	ldr	r1, [pc, #144]	; (8003578 <HAL_RCC_OscConfig+0x62c>)
 80034e8:	400a      	ands	r2, r1
 80034ea:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034ec:	f7fe fc84 	bl	8001df8 <HAL_GetTick>
 80034f0:	0003      	movs	r3, r0
 80034f2:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80034f4:	e008      	b.n	8003508 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80034f6:	f7fe fc7f 	bl	8001df8 <HAL_GetTick>
 80034fa:	0002      	movs	r2, r0
 80034fc:	69bb      	ldr	r3, [r7, #24]
 80034fe:	1ad3      	subs	r3, r2, r3
 8003500:	2b02      	cmp	r3, #2
 8003502:	d901      	bls.n	8003508 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8003504:	2303      	movs	r3, #3
 8003506:	e02c      	b.n	8003562 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003508:	4b18      	ldr	r3, [pc, #96]	; (800356c <HAL_RCC_OscConfig+0x620>)
 800350a:	681a      	ldr	r2, [r3, #0]
 800350c:	2380      	movs	r3, #128	; 0x80
 800350e:	049b      	lsls	r3, r3, #18
 8003510:	4013      	ands	r3, r2
 8003512:	d1f0      	bne.n	80034f6 <HAL_RCC_OscConfig+0x5aa>
 8003514:	e024      	b.n	8003560 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	6a1b      	ldr	r3, [r3, #32]
 800351a:	2b01      	cmp	r3, #1
 800351c:	d101      	bne.n	8003522 <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 800351e:	2301      	movs	r3, #1
 8003520:	e01f      	b.n	8003562 <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8003522:	4b12      	ldr	r3, [pc, #72]	; (800356c <HAL_RCC_OscConfig+0x620>)
 8003524:	685b      	ldr	r3, [r3, #4]
 8003526:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8003528:	4b10      	ldr	r3, [pc, #64]	; (800356c <HAL_RCC_OscConfig+0x620>)
 800352a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800352c:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800352e:	697a      	ldr	r2, [r7, #20]
 8003530:	2380      	movs	r3, #128	; 0x80
 8003532:	025b      	lsls	r3, r3, #9
 8003534:	401a      	ands	r2, r3
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800353a:	429a      	cmp	r2, r3
 800353c:	d10e      	bne.n	800355c <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800353e:	693b      	ldr	r3, [r7, #16]
 8003540:	220f      	movs	r2, #15
 8003542:	401a      	ands	r2, r3
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003548:	429a      	cmp	r2, r3
 800354a:	d107      	bne.n	800355c <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 800354c:	697a      	ldr	r2, [r7, #20]
 800354e:	23f0      	movs	r3, #240	; 0xf0
 8003550:	039b      	lsls	r3, r3, #14
 8003552:	401a      	ands	r2, r3
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8003558:	429a      	cmp	r2, r3
 800355a:	d001      	beq.n	8003560 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 800355c:	2301      	movs	r3, #1
 800355e:	e000      	b.n	8003562 <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 8003560:	2300      	movs	r3, #0
}
 8003562:	0018      	movs	r0, r3
 8003564:	46bd      	mov	sp, r7
 8003566:	b008      	add	sp, #32
 8003568:	bd80      	pop	{r7, pc}
 800356a:	46c0      	nop			; (mov r8, r8)
 800356c:	40021000 	.word	0x40021000
 8003570:	00001388 	.word	0x00001388
 8003574:	efffffff 	.word	0xefffffff
 8003578:	feffffff 	.word	0xfeffffff
 800357c:	ffc2ffff 	.word	0xffc2ffff

08003580 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003580:	b580      	push	{r7, lr}
 8003582:	b084      	sub	sp, #16
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
 8003588:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	2b00      	cmp	r3, #0
 800358e:	d101      	bne.n	8003594 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003590:	2301      	movs	r3, #1
 8003592:	e0b3      	b.n	80036fc <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003594:	4b5b      	ldr	r3, [pc, #364]	; (8003704 <HAL_RCC_ClockConfig+0x184>)
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	2201      	movs	r2, #1
 800359a:	4013      	ands	r3, r2
 800359c:	683a      	ldr	r2, [r7, #0]
 800359e:	429a      	cmp	r2, r3
 80035a0:	d911      	bls.n	80035c6 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035a2:	4b58      	ldr	r3, [pc, #352]	; (8003704 <HAL_RCC_ClockConfig+0x184>)
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	2201      	movs	r2, #1
 80035a8:	4393      	bics	r3, r2
 80035aa:	0019      	movs	r1, r3
 80035ac:	4b55      	ldr	r3, [pc, #340]	; (8003704 <HAL_RCC_ClockConfig+0x184>)
 80035ae:	683a      	ldr	r2, [r7, #0]
 80035b0:	430a      	orrs	r2, r1
 80035b2:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80035b4:	4b53      	ldr	r3, [pc, #332]	; (8003704 <HAL_RCC_ClockConfig+0x184>)
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	2201      	movs	r2, #1
 80035ba:	4013      	ands	r3, r2
 80035bc:	683a      	ldr	r2, [r7, #0]
 80035be:	429a      	cmp	r2, r3
 80035c0:	d001      	beq.n	80035c6 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 80035c2:	2301      	movs	r3, #1
 80035c4:	e09a      	b.n	80036fc <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	2202      	movs	r2, #2
 80035cc:	4013      	ands	r3, r2
 80035ce:	d015      	beq.n	80035fc <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	2204      	movs	r2, #4
 80035d6:	4013      	ands	r3, r2
 80035d8:	d006      	beq.n	80035e8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80035da:	4b4b      	ldr	r3, [pc, #300]	; (8003708 <HAL_RCC_ClockConfig+0x188>)
 80035dc:	685a      	ldr	r2, [r3, #4]
 80035de:	4b4a      	ldr	r3, [pc, #296]	; (8003708 <HAL_RCC_ClockConfig+0x188>)
 80035e0:	21e0      	movs	r1, #224	; 0xe0
 80035e2:	00c9      	lsls	r1, r1, #3
 80035e4:	430a      	orrs	r2, r1
 80035e6:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80035e8:	4b47      	ldr	r3, [pc, #284]	; (8003708 <HAL_RCC_ClockConfig+0x188>)
 80035ea:	685b      	ldr	r3, [r3, #4]
 80035ec:	22f0      	movs	r2, #240	; 0xf0
 80035ee:	4393      	bics	r3, r2
 80035f0:	0019      	movs	r1, r3
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	689a      	ldr	r2, [r3, #8]
 80035f6:	4b44      	ldr	r3, [pc, #272]	; (8003708 <HAL_RCC_ClockConfig+0x188>)
 80035f8:	430a      	orrs	r2, r1
 80035fa:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	2201      	movs	r2, #1
 8003602:	4013      	ands	r3, r2
 8003604:	d040      	beq.n	8003688 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	685b      	ldr	r3, [r3, #4]
 800360a:	2b01      	cmp	r3, #1
 800360c:	d107      	bne.n	800361e <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800360e:	4b3e      	ldr	r3, [pc, #248]	; (8003708 <HAL_RCC_ClockConfig+0x188>)
 8003610:	681a      	ldr	r2, [r3, #0]
 8003612:	2380      	movs	r3, #128	; 0x80
 8003614:	029b      	lsls	r3, r3, #10
 8003616:	4013      	ands	r3, r2
 8003618:	d114      	bne.n	8003644 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800361a:	2301      	movs	r3, #1
 800361c:	e06e      	b.n	80036fc <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	685b      	ldr	r3, [r3, #4]
 8003622:	2b02      	cmp	r3, #2
 8003624:	d107      	bne.n	8003636 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003626:	4b38      	ldr	r3, [pc, #224]	; (8003708 <HAL_RCC_ClockConfig+0x188>)
 8003628:	681a      	ldr	r2, [r3, #0]
 800362a:	2380      	movs	r3, #128	; 0x80
 800362c:	049b      	lsls	r3, r3, #18
 800362e:	4013      	ands	r3, r2
 8003630:	d108      	bne.n	8003644 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8003632:	2301      	movs	r3, #1
 8003634:	e062      	b.n	80036fc <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003636:	4b34      	ldr	r3, [pc, #208]	; (8003708 <HAL_RCC_ClockConfig+0x188>)
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	2202      	movs	r2, #2
 800363c:	4013      	ands	r3, r2
 800363e:	d101      	bne.n	8003644 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8003640:	2301      	movs	r3, #1
 8003642:	e05b      	b.n	80036fc <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003644:	4b30      	ldr	r3, [pc, #192]	; (8003708 <HAL_RCC_ClockConfig+0x188>)
 8003646:	685b      	ldr	r3, [r3, #4]
 8003648:	2203      	movs	r2, #3
 800364a:	4393      	bics	r3, r2
 800364c:	0019      	movs	r1, r3
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	685a      	ldr	r2, [r3, #4]
 8003652:	4b2d      	ldr	r3, [pc, #180]	; (8003708 <HAL_RCC_ClockConfig+0x188>)
 8003654:	430a      	orrs	r2, r1
 8003656:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003658:	f7fe fbce 	bl	8001df8 <HAL_GetTick>
 800365c:	0003      	movs	r3, r0
 800365e:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003660:	e009      	b.n	8003676 <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003662:	f7fe fbc9 	bl	8001df8 <HAL_GetTick>
 8003666:	0002      	movs	r2, r0
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	1ad3      	subs	r3, r2, r3
 800366c:	4a27      	ldr	r2, [pc, #156]	; (800370c <HAL_RCC_ClockConfig+0x18c>)
 800366e:	4293      	cmp	r3, r2
 8003670:	d901      	bls.n	8003676 <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8003672:	2303      	movs	r3, #3
 8003674:	e042      	b.n	80036fc <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003676:	4b24      	ldr	r3, [pc, #144]	; (8003708 <HAL_RCC_ClockConfig+0x188>)
 8003678:	685b      	ldr	r3, [r3, #4]
 800367a:	220c      	movs	r2, #12
 800367c:	401a      	ands	r2, r3
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	685b      	ldr	r3, [r3, #4]
 8003682:	009b      	lsls	r3, r3, #2
 8003684:	429a      	cmp	r2, r3
 8003686:	d1ec      	bne.n	8003662 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003688:	4b1e      	ldr	r3, [pc, #120]	; (8003704 <HAL_RCC_ClockConfig+0x184>)
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	2201      	movs	r2, #1
 800368e:	4013      	ands	r3, r2
 8003690:	683a      	ldr	r2, [r7, #0]
 8003692:	429a      	cmp	r2, r3
 8003694:	d211      	bcs.n	80036ba <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003696:	4b1b      	ldr	r3, [pc, #108]	; (8003704 <HAL_RCC_ClockConfig+0x184>)
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	2201      	movs	r2, #1
 800369c:	4393      	bics	r3, r2
 800369e:	0019      	movs	r1, r3
 80036a0:	4b18      	ldr	r3, [pc, #96]	; (8003704 <HAL_RCC_ClockConfig+0x184>)
 80036a2:	683a      	ldr	r2, [r7, #0]
 80036a4:	430a      	orrs	r2, r1
 80036a6:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80036a8:	4b16      	ldr	r3, [pc, #88]	; (8003704 <HAL_RCC_ClockConfig+0x184>)
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	2201      	movs	r2, #1
 80036ae:	4013      	ands	r3, r2
 80036b0:	683a      	ldr	r2, [r7, #0]
 80036b2:	429a      	cmp	r2, r3
 80036b4:	d001      	beq.n	80036ba <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 80036b6:	2301      	movs	r3, #1
 80036b8:	e020      	b.n	80036fc <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	2204      	movs	r2, #4
 80036c0:	4013      	ands	r3, r2
 80036c2:	d009      	beq.n	80036d8 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80036c4:	4b10      	ldr	r3, [pc, #64]	; (8003708 <HAL_RCC_ClockConfig+0x188>)
 80036c6:	685b      	ldr	r3, [r3, #4]
 80036c8:	4a11      	ldr	r2, [pc, #68]	; (8003710 <HAL_RCC_ClockConfig+0x190>)
 80036ca:	4013      	ands	r3, r2
 80036cc:	0019      	movs	r1, r3
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	68da      	ldr	r2, [r3, #12]
 80036d2:	4b0d      	ldr	r3, [pc, #52]	; (8003708 <HAL_RCC_ClockConfig+0x188>)
 80036d4:	430a      	orrs	r2, r1
 80036d6:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80036d8:	f000 f820 	bl	800371c <HAL_RCC_GetSysClockFreq>
 80036dc:	0001      	movs	r1, r0
 80036de:	4b0a      	ldr	r3, [pc, #40]	; (8003708 <HAL_RCC_ClockConfig+0x188>)
 80036e0:	685b      	ldr	r3, [r3, #4]
 80036e2:	091b      	lsrs	r3, r3, #4
 80036e4:	220f      	movs	r2, #15
 80036e6:	4013      	ands	r3, r2
 80036e8:	4a0a      	ldr	r2, [pc, #40]	; (8003714 <HAL_RCC_ClockConfig+0x194>)
 80036ea:	5cd3      	ldrb	r3, [r2, r3]
 80036ec:	000a      	movs	r2, r1
 80036ee:	40da      	lsrs	r2, r3
 80036f0:	4b09      	ldr	r3, [pc, #36]	; (8003718 <HAL_RCC_ClockConfig+0x198>)
 80036f2:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80036f4:	2000      	movs	r0, #0
 80036f6:	f7fe fb39 	bl	8001d6c <HAL_InitTick>
  
  return HAL_OK;
 80036fa:	2300      	movs	r3, #0
}
 80036fc:	0018      	movs	r0, r3
 80036fe:	46bd      	mov	sp, r7
 8003700:	b004      	add	sp, #16
 8003702:	bd80      	pop	{r7, pc}
 8003704:	40022000 	.word	0x40022000
 8003708:	40021000 	.word	0x40021000
 800370c:	00001388 	.word	0x00001388
 8003710:	fffff8ff 	.word	0xfffff8ff
 8003714:	0800570c 	.word	0x0800570c
 8003718:	20000000 	.word	0x20000000

0800371c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800371c:	b590      	push	{r4, r7, lr}
 800371e:	b08f      	sub	sp, #60	; 0x3c
 8003720:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8003722:	2314      	movs	r3, #20
 8003724:	18fb      	adds	r3, r7, r3
 8003726:	4a2b      	ldr	r2, [pc, #172]	; (80037d4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003728:	ca13      	ldmia	r2!, {r0, r1, r4}
 800372a:	c313      	stmia	r3!, {r0, r1, r4}
 800372c:	6812      	ldr	r2, [r2, #0]
 800372e:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8003730:	1d3b      	adds	r3, r7, #4
 8003732:	4a29      	ldr	r2, [pc, #164]	; (80037d8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003734:	ca13      	ldmia	r2!, {r0, r1, r4}
 8003736:	c313      	stmia	r3!, {r0, r1, r4}
 8003738:	6812      	ldr	r2, [r2, #0]
 800373a:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800373c:	2300      	movs	r3, #0
 800373e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003740:	2300      	movs	r3, #0
 8003742:	62bb      	str	r3, [r7, #40]	; 0x28
 8003744:	2300      	movs	r3, #0
 8003746:	637b      	str	r3, [r7, #52]	; 0x34
 8003748:	2300      	movs	r3, #0
 800374a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 800374c:	2300      	movs	r3, #0
 800374e:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8003750:	4b22      	ldr	r3, [pc, #136]	; (80037dc <HAL_RCC_GetSysClockFreq+0xc0>)
 8003752:	685b      	ldr	r3, [r3, #4]
 8003754:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003756:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003758:	220c      	movs	r2, #12
 800375a:	4013      	ands	r3, r2
 800375c:	2b04      	cmp	r3, #4
 800375e:	d002      	beq.n	8003766 <HAL_RCC_GetSysClockFreq+0x4a>
 8003760:	2b08      	cmp	r3, #8
 8003762:	d003      	beq.n	800376c <HAL_RCC_GetSysClockFreq+0x50>
 8003764:	e02d      	b.n	80037c2 <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003766:	4b1e      	ldr	r3, [pc, #120]	; (80037e0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003768:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800376a:	e02d      	b.n	80037c8 <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 800376c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800376e:	0c9b      	lsrs	r3, r3, #18
 8003770:	220f      	movs	r2, #15
 8003772:	4013      	ands	r3, r2
 8003774:	2214      	movs	r2, #20
 8003776:	18ba      	adds	r2, r7, r2
 8003778:	5cd3      	ldrb	r3, [r2, r3]
 800377a:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 800377c:	4b17      	ldr	r3, [pc, #92]	; (80037dc <HAL_RCC_GetSysClockFreq+0xc0>)
 800377e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003780:	220f      	movs	r2, #15
 8003782:	4013      	ands	r3, r2
 8003784:	1d3a      	adds	r2, r7, #4
 8003786:	5cd3      	ldrb	r3, [r2, r3]
 8003788:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800378a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800378c:	2380      	movs	r3, #128	; 0x80
 800378e:	025b      	lsls	r3, r3, #9
 8003790:	4013      	ands	r3, r2
 8003792:	d009      	beq.n	80037a8 <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003794:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003796:	4812      	ldr	r0, [pc, #72]	; (80037e0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003798:	f7fc fcc8 	bl	800012c <__udivsi3>
 800379c:	0003      	movs	r3, r0
 800379e:	001a      	movs	r2, r3
 80037a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037a2:	4353      	muls	r3, r2
 80037a4:	637b      	str	r3, [r7, #52]	; 0x34
 80037a6:	e009      	b.n	80037bc <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80037a8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80037aa:	000a      	movs	r2, r1
 80037ac:	0152      	lsls	r2, r2, #5
 80037ae:	1a52      	subs	r2, r2, r1
 80037b0:	0193      	lsls	r3, r2, #6
 80037b2:	1a9b      	subs	r3, r3, r2
 80037b4:	00db      	lsls	r3, r3, #3
 80037b6:	185b      	adds	r3, r3, r1
 80037b8:	021b      	lsls	r3, r3, #8
 80037ba:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 80037bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80037be:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80037c0:	e002      	b.n	80037c8 <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80037c2:	4b07      	ldr	r3, [pc, #28]	; (80037e0 <HAL_RCC_GetSysClockFreq+0xc4>)
 80037c4:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80037c6:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80037c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80037ca:	0018      	movs	r0, r3
 80037cc:	46bd      	mov	sp, r7
 80037ce:	b00f      	add	sp, #60	; 0x3c
 80037d0:	bd90      	pop	{r4, r7, pc}
 80037d2:	46c0      	nop			; (mov r8, r8)
 80037d4:	0800566c 	.word	0x0800566c
 80037d8:	0800567c 	.word	0x0800567c
 80037dc:	40021000 	.word	0x40021000
 80037e0:	007a1200 	.word	0x007a1200

080037e4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80037e4:	b580      	push	{r7, lr}
 80037e6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80037e8:	4b02      	ldr	r3, [pc, #8]	; (80037f4 <HAL_RCC_GetHCLKFreq+0x10>)
 80037ea:	681b      	ldr	r3, [r3, #0]
}
 80037ec:	0018      	movs	r0, r3
 80037ee:	46bd      	mov	sp, r7
 80037f0:	bd80      	pop	{r7, pc}
 80037f2:	46c0      	nop			; (mov r8, r8)
 80037f4:	20000000 	.word	0x20000000

080037f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80037f8:	b580      	push	{r7, lr}
 80037fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 80037fc:	f7ff fff2 	bl	80037e4 <HAL_RCC_GetHCLKFreq>
 8003800:	0001      	movs	r1, r0
 8003802:	4b06      	ldr	r3, [pc, #24]	; (800381c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003804:	685b      	ldr	r3, [r3, #4]
 8003806:	0a1b      	lsrs	r3, r3, #8
 8003808:	2207      	movs	r2, #7
 800380a:	4013      	ands	r3, r2
 800380c:	4a04      	ldr	r2, [pc, #16]	; (8003820 <HAL_RCC_GetPCLK1Freq+0x28>)
 800380e:	5cd3      	ldrb	r3, [r2, r3]
 8003810:	40d9      	lsrs	r1, r3
 8003812:	000b      	movs	r3, r1
}    
 8003814:	0018      	movs	r0, r3
 8003816:	46bd      	mov	sp, r7
 8003818:	bd80      	pop	{r7, pc}
 800381a:	46c0      	nop			; (mov r8, r8)
 800381c:	40021000 	.word	0x40021000
 8003820:	0800571c 	.word	0x0800571c

08003824 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003824:	b580      	push	{r7, lr}
 8003826:	b082      	sub	sp, #8
 8003828:	af00      	add	r7, sp, #0
 800382a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	2b00      	cmp	r3, #0
 8003830:	d101      	bne.n	8003836 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003832:	2301      	movs	r3, #1
 8003834:	e042      	b.n	80038bc <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	223d      	movs	r2, #61	; 0x3d
 800383a:	5c9b      	ldrb	r3, [r3, r2]
 800383c:	b2db      	uxtb	r3, r3
 800383e:	2b00      	cmp	r3, #0
 8003840:	d107      	bne.n	8003852 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	223c      	movs	r2, #60	; 0x3c
 8003846:	2100      	movs	r1, #0
 8003848:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	0018      	movs	r0, r3
 800384e:	f7fe f947 	bl	8001ae0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	223d      	movs	r2, #61	; 0x3d
 8003856:	2102      	movs	r1, #2
 8003858:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681a      	ldr	r2, [r3, #0]
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	3304      	adds	r3, #4
 8003862:	0019      	movs	r1, r3
 8003864:	0010      	movs	r0, r2
 8003866:	f000 fad1 	bl	8003e0c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	2246      	movs	r2, #70	; 0x46
 800386e:	2101      	movs	r1, #1
 8003870:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	223e      	movs	r2, #62	; 0x3e
 8003876:	2101      	movs	r1, #1
 8003878:	5499      	strb	r1, [r3, r2]
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	223f      	movs	r2, #63	; 0x3f
 800387e:	2101      	movs	r1, #1
 8003880:	5499      	strb	r1, [r3, r2]
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	2240      	movs	r2, #64	; 0x40
 8003886:	2101      	movs	r1, #1
 8003888:	5499      	strb	r1, [r3, r2]
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	2241      	movs	r2, #65	; 0x41
 800388e:	2101      	movs	r1, #1
 8003890:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	2242      	movs	r2, #66	; 0x42
 8003896:	2101      	movs	r1, #1
 8003898:	5499      	strb	r1, [r3, r2]
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	2243      	movs	r2, #67	; 0x43
 800389e:	2101      	movs	r1, #1
 80038a0:	5499      	strb	r1, [r3, r2]
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	2244      	movs	r2, #68	; 0x44
 80038a6:	2101      	movs	r1, #1
 80038a8:	5499      	strb	r1, [r3, r2]
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	2245      	movs	r2, #69	; 0x45
 80038ae:	2101      	movs	r1, #1
 80038b0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	223d      	movs	r2, #61	; 0x3d
 80038b6:	2101      	movs	r1, #1
 80038b8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80038ba:	2300      	movs	r3, #0
}
 80038bc:	0018      	movs	r0, r3
 80038be:	46bd      	mov	sp, r7
 80038c0:	b002      	add	sp, #8
 80038c2:	bd80      	pop	{r7, pc}

080038c4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80038c4:	b580      	push	{r7, lr}
 80038c6:	b082      	sub	sp, #8
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d101      	bne.n	80038d6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80038d2:	2301      	movs	r3, #1
 80038d4:	e042      	b.n	800395c <HAL_TIM_PWM_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	223d      	movs	r2, #61	; 0x3d
 80038da:	5c9b      	ldrb	r3, [r3, r2]
 80038dc:	b2db      	uxtb	r3, r3
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d107      	bne.n	80038f2 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	223c      	movs	r2, #60	; 0x3c
 80038e6:	2100      	movs	r1, #0
 80038e8:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	0018      	movs	r0, r3
 80038ee:	f000 f839 	bl	8003964 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	223d      	movs	r2, #61	; 0x3d
 80038f6:	2102      	movs	r1, #2
 80038f8:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681a      	ldr	r2, [r3, #0]
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	3304      	adds	r3, #4
 8003902:	0019      	movs	r1, r3
 8003904:	0010      	movs	r0, r2
 8003906:	f000 fa81 	bl	8003e0c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	2246      	movs	r2, #70	; 0x46
 800390e:	2101      	movs	r1, #1
 8003910:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	223e      	movs	r2, #62	; 0x3e
 8003916:	2101      	movs	r1, #1
 8003918:	5499      	strb	r1, [r3, r2]
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	223f      	movs	r2, #63	; 0x3f
 800391e:	2101      	movs	r1, #1
 8003920:	5499      	strb	r1, [r3, r2]
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	2240      	movs	r2, #64	; 0x40
 8003926:	2101      	movs	r1, #1
 8003928:	5499      	strb	r1, [r3, r2]
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	2241      	movs	r2, #65	; 0x41
 800392e:	2101      	movs	r1, #1
 8003930:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	2242      	movs	r2, #66	; 0x42
 8003936:	2101      	movs	r1, #1
 8003938:	5499      	strb	r1, [r3, r2]
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	2243      	movs	r2, #67	; 0x43
 800393e:	2101      	movs	r1, #1
 8003940:	5499      	strb	r1, [r3, r2]
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	2244      	movs	r2, #68	; 0x44
 8003946:	2101      	movs	r1, #1
 8003948:	5499      	strb	r1, [r3, r2]
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	2245      	movs	r2, #69	; 0x45
 800394e:	2101      	movs	r1, #1
 8003950:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	223d      	movs	r2, #61	; 0x3d
 8003956:	2101      	movs	r1, #1
 8003958:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800395a:	2300      	movs	r3, #0
}
 800395c:	0018      	movs	r0, r3
 800395e:	46bd      	mov	sp, r7
 8003960:	b002      	add	sp, #8
 8003962:	bd80      	pop	{r7, pc}

08003964 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003964:	b580      	push	{r7, lr}
 8003966:	b082      	sub	sp, #8
 8003968:	af00      	add	r7, sp, #0
 800396a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800396c:	46c0      	nop			; (mov r8, r8)
 800396e:	46bd      	mov	sp, r7
 8003970:	b002      	add	sp, #8
 8003972:	bd80      	pop	{r7, pc}

08003974 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003974:	b580      	push	{r7, lr}
 8003976:	b084      	sub	sp, #16
 8003978:	af00      	add	r7, sp, #0
 800397a:	6078      	str	r0, [r7, #4]
 800397c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800397e:	683b      	ldr	r3, [r7, #0]
 8003980:	2b00      	cmp	r3, #0
 8003982:	d108      	bne.n	8003996 <HAL_TIM_PWM_Start+0x22>
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	223e      	movs	r2, #62	; 0x3e
 8003988:	5c9b      	ldrb	r3, [r3, r2]
 800398a:	b2db      	uxtb	r3, r3
 800398c:	3b01      	subs	r3, #1
 800398e:	1e5a      	subs	r2, r3, #1
 8003990:	4193      	sbcs	r3, r2
 8003992:	b2db      	uxtb	r3, r3
 8003994:	e01f      	b.n	80039d6 <HAL_TIM_PWM_Start+0x62>
 8003996:	683b      	ldr	r3, [r7, #0]
 8003998:	2b04      	cmp	r3, #4
 800399a:	d108      	bne.n	80039ae <HAL_TIM_PWM_Start+0x3a>
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	223f      	movs	r2, #63	; 0x3f
 80039a0:	5c9b      	ldrb	r3, [r3, r2]
 80039a2:	b2db      	uxtb	r3, r3
 80039a4:	3b01      	subs	r3, #1
 80039a6:	1e5a      	subs	r2, r3, #1
 80039a8:	4193      	sbcs	r3, r2
 80039aa:	b2db      	uxtb	r3, r3
 80039ac:	e013      	b.n	80039d6 <HAL_TIM_PWM_Start+0x62>
 80039ae:	683b      	ldr	r3, [r7, #0]
 80039b0:	2b08      	cmp	r3, #8
 80039b2:	d108      	bne.n	80039c6 <HAL_TIM_PWM_Start+0x52>
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	2240      	movs	r2, #64	; 0x40
 80039b8:	5c9b      	ldrb	r3, [r3, r2]
 80039ba:	b2db      	uxtb	r3, r3
 80039bc:	3b01      	subs	r3, #1
 80039be:	1e5a      	subs	r2, r3, #1
 80039c0:	4193      	sbcs	r3, r2
 80039c2:	b2db      	uxtb	r3, r3
 80039c4:	e007      	b.n	80039d6 <HAL_TIM_PWM_Start+0x62>
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	2241      	movs	r2, #65	; 0x41
 80039ca:	5c9b      	ldrb	r3, [r3, r2]
 80039cc:	b2db      	uxtb	r3, r3
 80039ce:	3b01      	subs	r3, #1
 80039d0:	1e5a      	subs	r2, r3, #1
 80039d2:	4193      	sbcs	r3, r2
 80039d4:	b2db      	uxtb	r3, r3
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d001      	beq.n	80039de <HAL_TIM_PWM_Start+0x6a>
  {
    return HAL_ERROR;
 80039da:	2301      	movs	r3, #1
 80039dc:	e06e      	b.n	8003abc <HAL_TIM_PWM_Start+0x148>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80039de:	683b      	ldr	r3, [r7, #0]
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d104      	bne.n	80039ee <HAL_TIM_PWM_Start+0x7a>
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	223e      	movs	r2, #62	; 0x3e
 80039e8:	2102      	movs	r1, #2
 80039ea:	5499      	strb	r1, [r3, r2]
 80039ec:	e013      	b.n	8003a16 <HAL_TIM_PWM_Start+0xa2>
 80039ee:	683b      	ldr	r3, [r7, #0]
 80039f0:	2b04      	cmp	r3, #4
 80039f2:	d104      	bne.n	80039fe <HAL_TIM_PWM_Start+0x8a>
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	223f      	movs	r2, #63	; 0x3f
 80039f8:	2102      	movs	r1, #2
 80039fa:	5499      	strb	r1, [r3, r2]
 80039fc:	e00b      	b.n	8003a16 <HAL_TIM_PWM_Start+0xa2>
 80039fe:	683b      	ldr	r3, [r7, #0]
 8003a00:	2b08      	cmp	r3, #8
 8003a02:	d104      	bne.n	8003a0e <HAL_TIM_PWM_Start+0x9a>
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	2240      	movs	r2, #64	; 0x40
 8003a08:	2102      	movs	r1, #2
 8003a0a:	5499      	strb	r1, [r3, r2]
 8003a0c:	e003      	b.n	8003a16 <HAL_TIM_PWM_Start+0xa2>
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	2241      	movs	r2, #65	; 0x41
 8003a12:	2102      	movs	r1, #2
 8003a14:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	6839      	ldr	r1, [r7, #0]
 8003a1c:	2201      	movs	r2, #1
 8003a1e:	0018      	movs	r0, r3
 8003a20:	f000 fd00 	bl	8004424 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	4a26      	ldr	r2, [pc, #152]	; (8003ac4 <HAL_TIM_PWM_Start+0x150>)
 8003a2a:	4293      	cmp	r3, r2
 8003a2c:	d00e      	beq.n	8003a4c <HAL_TIM_PWM_Start+0xd8>
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	4a25      	ldr	r2, [pc, #148]	; (8003ac8 <HAL_TIM_PWM_Start+0x154>)
 8003a34:	4293      	cmp	r3, r2
 8003a36:	d009      	beq.n	8003a4c <HAL_TIM_PWM_Start+0xd8>
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	4a23      	ldr	r2, [pc, #140]	; (8003acc <HAL_TIM_PWM_Start+0x158>)
 8003a3e:	4293      	cmp	r3, r2
 8003a40:	d004      	beq.n	8003a4c <HAL_TIM_PWM_Start+0xd8>
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	4a22      	ldr	r2, [pc, #136]	; (8003ad0 <HAL_TIM_PWM_Start+0x15c>)
 8003a48:	4293      	cmp	r3, r2
 8003a4a:	d101      	bne.n	8003a50 <HAL_TIM_PWM_Start+0xdc>
 8003a4c:	2301      	movs	r3, #1
 8003a4e:	e000      	b.n	8003a52 <HAL_TIM_PWM_Start+0xde>
 8003a50:	2300      	movs	r3, #0
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d008      	beq.n	8003a68 <HAL_TIM_PWM_Start+0xf4>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	2180      	movs	r1, #128	; 0x80
 8003a62:	0209      	lsls	r1, r1, #8
 8003a64:	430a      	orrs	r2, r1
 8003a66:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	4a15      	ldr	r2, [pc, #84]	; (8003ac4 <HAL_TIM_PWM_Start+0x150>)
 8003a6e:	4293      	cmp	r3, r2
 8003a70:	d009      	beq.n	8003a86 <HAL_TIM_PWM_Start+0x112>
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	4a17      	ldr	r2, [pc, #92]	; (8003ad4 <HAL_TIM_PWM_Start+0x160>)
 8003a78:	4293      	cmp	r3, r2
 8003a7a:	d004      	beq.n	8003a86 <HAL_TIM_PWM_Start+0x112>
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	4a11      	ldr	r2, [pc, #68]	; (8003ac8 <HAL_TIM_PWM_Start+0x154>)
 8003a82:	4293      	cmp	r3, r2
 8003a84:	d111      	bne.n	8003aaa <HAL_TIM_PWM_Start+0x136>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	689b      	ldr	r3, [r3, #8]
 8003a8c:	2207      	movs	r2, #7
 8003a8e:	4013      	ands	r3, r2
 8003a90:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	2b06      	cmp	r3, #6
 8003a96:	d010      	beq.n	8003aba <HAL_TIM_PWM_Start+0x146>
    {
      __HAL_TIM_ENABLE(htim);
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	681a      	ldr	r2, [r3, #0]
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	2101      	movs	r1, #1
 8003aa4:	430a      	orrs	r2, r1
 8003aa6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003aa8:	e007      	b.n	8003aba <HAL_TIM_PWM_Start+0x146>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	681a      	ldr	r2, [r3, #0]
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	2101      	movs	r1, #1
 8003ab6:	430a      	orrs	r2, r1
 8003ab8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003aba:	2300      	movs	r3, #0
}
 8003abc:	0018      	movs	r0, r3
 8003abe:	46bd      	mov	sp, r7
 8003ac0:	b004      	add	sp, #16
 8003ac2:	bd80      	pop	{r7, pc}
 8003ac4:	40012c00 	.word	0x40012c00
 8003ac8:	40014000 	.word	0x40014000
 8003acc:	40014400 	.word	0x40014400
 8003ad0:	40014800 	.word	0x40014800
 8003ad4:	40000400 	.word	0x40000400

08003ad8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	b086      	sub	sp, #24
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	60f8      	str	r0, [r7, #12]
 8003ae0:	60b9      	str	r1, [r7, #8]
 8003ae2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003ae4:	2317      	movs	r3, #23
 8003ae6:	18fb      	adds	r3, r7, r3
 8003ae8:	2200      	movs	r2, #0
 8003aea:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	223c      	movs	r2, #60	; 0x3c
 8003af0:	5c9b      	ldrb	r3, [r3, r2]
 8003af2:	2b01      	cmp	r3, #1
 8003af4:	d101      	bne.n	8003afa <HAL_TIM_PWM_ConfigChannel+0x22>
 8003af6:	2302      	movs	r3, #2
 8003af8:	e0ad      	b.n	8003c56 <HAL_TIM_PWM_ConfigChannel+0x17e>
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	223c      	movs	r2, #60	; 0x3c
 8003afe:	2101      	movs	r1, #1
 8003b00:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	2b0c      	cmp	r3, #12
 8003b06:	d100      	bne.n	8003b0a <HAL_TIM_PWM_ConfigChannel+0x32>
 8003b08:	e076      	b.n	8003bf8 <HAL_TIM_PWM_ConfigChannel+0x120>
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	2b0c      	cmp	r3, #12
 8003b0e:	d900      	bls.n	8003b12 <HAL_TIM_PWM_ConfigChannel+0x3a>
 8003b10:	e095      	b.n	8003c3e <HAL_TIM_PWM_ConfigChannel+0x166>
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	2b08      	cmp	r3, #8
 8003b16:	d04e      	beq.n	8003bb6 <HAL_TIM_PWM_ConfigChannel+0xde>
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	2b08      	cmp	r3, #8
 8003b1c:	d900      	bls.n	8003b20 <HAL_TIM_PWM_ConfigChannel+0x48>
 8003b1e:	e08e      	b.n	8003c3e <HAL_TIM_PWM_ConfigChannel+0x166>
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d003      	beq.n	8003b2e <HAL_TIM_PWM_ConfigChannel+0x56>
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	2b04      	cmp	r3, #4
 8003b2a:	d021      	beq.n	8003b70 <HAL_TIM_PWM_ConfigChannel+0x98>
 8003b2c:	e087      	b.n	8003c3e <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	68ba      	ldr	r2, [r7, #8]
 8003b34:	0011      	movs	r1, r2
 8003b36:	0018      	movs	r0, r3
 8003b38:	f000 f9de 	bl	8003ef8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	699a      	ldr	r2, [r3, #24]
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	2108      	movs	r1, #8
 8003b48:	430a      	orrs	r2, r1
 8003b4a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	699a      	ldr	r2, [r3, #24]
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	2104      	movs	r1, #4
 8003b58:	438a      	bics	r2, r1
 8003b5a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	6999      	ldr	r1, [r3, #24]
 8003b62:	68bb      	ldr	r3, [r7, #8]
 8003b64:	691a      	ldr	r2, [r3, #16]
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	430a      	orrs	r2, r1
 8003b6c:	619a      	str	r2, [r3, #24]
      break;
 8003b6e:	e06b      	b.n	8003c48 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	68ba      	ldr	r2, [r7, #8]
 8003b76:	0011      	movs	r1, r2
 8003b78:	0018      	movs	r0, r3
 8003b7a:	f000 fa45 	bl	8004008 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	699a      	ldr	r2, [r3, #24]
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	2180      	movs	r1, #128	; 0x80
 8003b8a:	0109      	lsls	r1, r1, #4
 8003b8c:	430a      	orrs	r2, r1
 8003b8e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	699a      	ldr	r2, [r3, #24]
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	4931      	ldr	r1, [pc, #196]	; (8003c60 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8003b9c:	400a      	ands	r2, r1
 8003b9e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	6999      	ldr	r1, [r3, #24]
 8003ba6:	68bb      	ldr	r3, [r7, #8]
 8003ba8:	691b      	ldr	r3, [r3, #16]
 8003baa:	021a      	lsls	r2, r3, #8
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	430a      	orrs	r2, r1
 8003bb2:	619a      	str	r2, [r3, #24]
      break;
 8003bb4:	e048      	b.n	8003c48 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	68ba      	ldr	r2, [r7, #8]
 8003bbc:	0011      	movs	r1, r2
 8003bbe:	0018      	movs	r0, r3
 8003bc0:	f000 faa6 	bl	8004110 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	69da      	ldr	r2, [r3, #28]
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	2108      	movs	r1, #8
 8003bd0:	430a      	orrs	r2, r1
 8003bd2:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	69da      	ldr	r2, [r3, #28]
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	2104      	movs	r1, #4
 8003be0:	438a      	bics	r2, r1
 8003be2:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	69d9      	ldr	r1, [r3, #28]
 8003bea:	68bb      	ldr	r3, [r7, #8]
 8003bec:	691a      	ldr	r2, [r3, #16]
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	430a      	orrs	r2, r1
 8003bf4:	61da      	str	r2, [r3, #28]
      break;
 8003bf6:	e027      	b.n	8003c48 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	68ba      	ldr	r2, [r7, #8]
 8003bfe:	0011      	movs	r1, r2
 8003c00:	0018      	movs	r0, r3
 8003c02:	f000 fb0b 	bl	800421c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	69da      	ldr	r2, [r3, #28]
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	2180      	movs	r1, #128	; 0x80
 8003c12:	0109      	lsls	r1, r1, #4
 8003c14:	430a      	orrs	r2, r1
 8003c16:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	69da      	ldr	r2, [r3, #28]
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	490f      	ldr	r1, [pc, #60]	; (8003c60 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8003c24:	400a      	ands	r2, r1
 8003c26:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	69d9      	ldr	r1, [r3, #28]
 8003c2e:	68bb      	ldr	r3, [r7, #8]
 8003c30:	691b      	ldr	r3, [r3, #16]
 8003c32:	021a      	lsls	r2, r3, #8
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	430a      	orrs	r2, r1
 8003c3a:	61da      	str	r2, [r3, #28]
      break;
 8003c3c:	e004      	b.n	8003c48 <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 8003c3e:	2317      	movs	r3, #23
 8003c40:	18fb      	adds	r3, r7, r3
 8003c42:	2201      	movs	r2, #1
 8003c44:	701a      	strb	r2, [r3, #0]
      break;
 8003c46:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	223c      	movs	r2, #60	; 0x3c
 8003c4c:	2100      	movs	r1, #0
 8003c4e:	5499      	strb	r1, [r3, r2]

  return status;
 8003c50:	2317      	movs	r3, #23
 8003c52:	18fb      	adds	r3, r7, r3
 8003c54:	781b      	ldrb	r3, [r3, #0]
}
 8003c56:	0018      	movs	r0, r3
 8003c58:	46bd      	mov	sp, r7
 8003c5a:	b006      	add	sp, #24
 8003c5c:	bd80      	pop	{r7, pc}
 8003c5e:	46c0      	nop			; (mov r8, r8)
 8003c60:	fffffbff 	.word	0xfffffbff

08003c64 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003c64:	b580      	push	{r7, lr}
 8003c66:	b084      	sub	sp, #16
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	6078      	str	r0, [r7, #4]
 8003c6c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003c6e:	230f      	movs	r3, #15
 8003c70:	18fb      	adds	r3, r7, r3
 8003c72:	2200      	movs	r2, #0
 8003c74:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	223c      	movs	r2, #60	; 0x3c
 8003c7a:	5c9b      	ldrb	r3, [r3, r2]
 8003c7c:	2b01      	cmp	r3, #1
 8003c7e:	d101      	bne.n	8003c84 <HAL_TIM_ConfigClockSource+0x20>
 8003c80:	2302      	movs	r3, #2
 8003c82:	e0bc      	b.n	8003dfe <HAL_TIM_ConfigClockSource+0x19a>
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	223c      	movs	r2, #60	; 0x3c
 8003c88:	2101      	movs	r1, #1
 8003c8a:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	223d      	movs	r2, #61	; 0x3d
 8003c90:	2102      	movs	r1, #2
 8003c92:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	689b      	ldr	r3, [r3, #8]
 8003c9a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003c9c:	68bb      	ldr	r3, [r7, #8]
 8003c9e:	2277      	movs	r2, #119	; 0x77
 8003ca0:	4393      	bics	r3, r2
 8003ca2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003ca4:	68bb      	ldr	r3, [r7, #8]
 8003ca6:	4a58      	ldr	r2, [pc, #352]	; (8003e08 <HAL_TIM_ConfigClockSource+0x1a4>)
 8003ca8:	4013      	ands	r3, r2
 8003caa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	68ba      	ldr	r2, [r7, #8]
 8003cb2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003cb4:	683b      	ldr	r3, [r7, #0]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	2280      	movs	r2, #128	; 0x80
 8003cba:	0192      	lsls	r2, r2, #6
 8003cbc:	4293      	cmp	r3, r2
 8003cbe:	d040      	beq.n	8003d42 <HAL_TIM_ConfigClockSource+0xde>
 8003cc0:	2280      	movs	r2, #128	; 0x80
 8003cc2:	0192      	lsls	r2, r2, #6
 8003cc4:	4293      	cmp	r3, r2
 8003cc6:	d900      	bls.n	8003cca <HAL_TIM_ConfigClockSource+0x66>
 8003cc8:	e088      	b.n	8003ddc <HAL_TIM_ConfigClockSource+0x178>
 8003cca:	2280      	movs	r2, #128	; 0x80
 8003ccc:	0152      	lsls	r2, r2, #5
 8003cce:	4293      	cmp	r3, r2
 8003cd0:	d100      	bne.n	8003cd4 <HAL_TIM_ConfigClockSource+0x70>
 8003cd2:	e088      	b.n	8003de6 <HAL_TIM_ConfigClockSource+0x182>
 8003cd4:	2280      	movs	r2, #128	; 0x80
 8003cd6:	0152      	lsls	r2, r2, #5
 8003cd8:	4293      	cmp	r3, r2
 8003cda:	d900      	bls.n	8003cde <HAL_TIM_ConfigClockSource+0x7a>
 8003cdc:	e07e      	b.n	8003ddc <HAL_TIM_ConfigClockSource+0x178>
 8003cde:	2b70      	cmp	r3, #112	; 0x70
 8003ce0:	d018      	beq.n	8003d14 <HAL_TIM_ConfigClockSource+0xb0>
 8003ce2:	d900      	bls.n	8003ce6 <HAL_TIM_ConfigClockSource+0x82>
 8003ce4:	e07a      	b.n	8003ddc <HAL_TIM_ConfigClockSource+0x178>
 8003ce6:	2b60      	cmp	r3, #96	; 0x60
 8003ce8:	d04f      	beq.n	8003d8a <HAL_TIM_ConfigClockSource+0x126>
 8003cea:	d900      	bls.n	8003cee <HAL_TIM_ConfigClockSource+0x8a>
 8003cec:	e076      	b.n	8003ddc <HAL_TIM_ConfigClockSource+0x178>
 8003cee:	2b50      	cmp	r3, #80	; 0x50
 8003cf0:	d03b      	beq.n	8003d6a <HAL_TIM_ConfigClockSource+0x106>
 8003cf2:	d900      	bls.n	8003cf6 <HAL_TIM_ConfigClockSource+0x92>
 8003cf4:	e072      	b.n	8003ddc <HAL_TIM_ConfigClockSource+0x178>
 8003cf6:	2b40      	cmp	r3, #64	; 0x40
 8003cf8:	d057      	beq.n	8003daa <HAL_TIM_ConfigClockSource+0x146>
 8003cfa:	d900      	bls.n	8003cfe <HAL_TIM_ConfigClockSource+0x9a>
 8003cfc:	e06e      	b.n	8003ddc <HAL_TIM_ConfigClockSource+0x178>
 8003cfe:	2b30      	cmp	r3, #48	; 0x30
 8003d00:	d063      	beq.n	8003dca <HAL_TIM_ConfigClockSource+0x166>
 8003d02:	d86b      	bhi.n	8003ddc <HAL_TIM_ConfigClockSource+0x178>
 8003d04:	2b20      	cmp	r3, #32
 8003d06:	d060      	beq.n	8003dca <HAL_TIM_ConfigClockSource+0x166>
 8003d08:	d868      	bhi.n	8003ddc <HAL_TIM_ConfigClockSource+0x178>
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d05d      	beq.n	8003dca <HAL_TIM_ConfigClockSource+0x166>
 8003d0e:	2b10      	cmp	r3, #16
 8003d10:	d05b      	beq.n	8003dca <HAL_TIM_ConfigClockSource+0x166>
 8003d12:	e063      	b.n	8003ddc <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	6818      	ldr	r0, [r3, #0]
 8003d18:	683b      	ldr	r3, [r7, #0]
 8003d1a:	6899      	ldr	r1, [r3, #8]
 8003d1c:	683b      	ldr	r3, [r7, #0]
 8003d1e:	685a      	ldr	r2, [r3, #4]
 8003d20:	683b      	ldr	r3, [r7, #0]
 8003d22:	68db      	ldr	r3, [r3, #12]
 8003d24:	f000 fb5e 	bl	80043e4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	689b      	ldr	r3, [r3, #8]
 8003d2e:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003d30:	68bb      	ldr	r3, [r7, #8]
 8003d32:	2277      	movs	r2, #119	; 0x77
 8003d34:	4313      	orrs	r3, r2
 8003d36:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	68ba      	ldr	r2, [r7, #8]
 8003d3e:	609a      	str	r2, [r3, #8]
      break;
 8003d40:	e052      	b.n	8003de8 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	6818      	ldr	r0, [r3, #0]
 8003d46:	683b      	ldr	r3, [r7, #0]
 8003d48:	6899      	ldr	r1, [r3, #8]
 8003d4a:	683b      	ldr	r3, [r7, #0]
 8003d4c:	685a      	ldr	r2, [r3, #4]
 8003d4e:	683b      	ldr	r3, [r7, #0]
 8003d50:	68db      	ldr	r3, [r3, #12]
 8003d52:	f000 fb47 	bl	80043e4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	689a      	ldr	r2, [r3, #8]
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	2180      	movs	r1, #128	; 0x80
 8003d62:	01c9      	lsls	r1, r1, #7
 8003d64:	430a      	orrs	r2, r1
 8003d66:	609a      	str	r2, [r3, #8]
      break;
 8003d68:	e03e      	b.n	8003de8 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	6818      	ldr	r0, [r3, #0]
 8003d6e:	683b      	ldr	r3, [r7, #0]
 8003d70:	6859      	ldr	r1, [r3, #4]
 8003d72:	683b      	ldr	r3, [r7, #0]
 8003d74:	68db      	ldr	r3, [r3, #12]
 8003d76:	001a      	movs	r2, r3
 8003d78:	f000 faba 	bl	80042f0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	2150      	movs	r1, #80	; 0x50
 8003d82:	0018      	movs	r0, r3
 8003d84:	f000 fb14 	bl	80043b0 <TIM_ITRx_SetConfig>
      break;
 8003d88:	e02e      	b.n	8003de8 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	6818      	ldr	r0, [r3, #0]
 8003d8e:	683b      	ldr	r3, [r7, #0]
 8003d90:	6859      	ldr	r1, [r3, #4]
 8003d92:	683b      	ldr	r3, [r7, #0]
 8003d94:	68db      	ldr	r3, [r3, #12]
 8003d96:	001a      	movs	r2, r3
 8003d98:	f000 fad8 	bl	800434c <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	2160      	movs	r1, #96	; 0x60
 8003da2:	0018      	movs	r0, r3
 8003da4:	f000 fb04 	bl	80043b0 <TIM_ITRx_SetConfig>
      break;
 8003da8:	e01e      	b.n	8003de8 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	6818      	ldr	r0, [r3, #0]
 8003dae:	683b      	ldr	r3, [r7, #0]
 8003db0:	6859      	ldr	r1, [r3, #4]
 8003db2:	683b      	ldr	r3, [r7, #0]
 8003db4:	68db      	ldr	r3, [r3, #12]
 8003db6:	001a      	movs	r2, r3
 8003db8:	f000 fa9a 	bl	80042f0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	2140      	movs	r1, #64	; 0x40
 8003dc2:	0018      	movs	r0, r3
 8003dc4:	f000 faf4 	bl	80043b0 <TIM_ITRx_SetConfig>
      break;
 8003dc8:	e00e      	b.n	8003de8 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681a      	ldr	r2, [r3, #0]
 8003dce:	683b      	ldr	r3, [r7, #0]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	0019      	movs	r1, r3
 8003dd4:	0010      	movs	r0, r2
 8003dd6:	f000 faeb 	bl	80043b0 <TIM_ITRx_SetConfig>
      break;
 8003dda:	e005      	b.n	8003de8 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8003ddc:	230f      	movs	r3, #15
 8003dde:	18fb      	adds	r3, r7, r3
 8003de0:	2201      	movs	r2, #1
 8003de2:	701a      	strb	r2, [r3, #0]
      break;
 8003de4:	e000      	b.n	8003de8 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8003de6:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	223d      	movs	r2, #61	; 0x3d
 8003dec:	2101      	movs	r1, #1
 8003dee:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	223c      	movs	r2, #60	; 0x3c
 8003df4:	2100      	movs	r1, #0
 8003df6:	5499      	strb	r1, [r3, r2]

  return status;
 8003df8:	230f      	movs	r3, #15
 8003dfa:	18fb      	adds	r3, r7, r3
 8003dfc:	781b      	ldrb	r3, [r3, #0]
}
 8003dfe:	0018      	movs	r0, r3
 8003e00:	46bd      	mov	sp, r7
 8003e02:	b004      	add	sp, #16
 8003e04:	bd80      	pop	{r7, pc}
 8003e06:	46c0      	nop			; (mov r8, r8)
 8003e08:	ffff00ff 	.word	0xffff00ff

08003e0c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003e0c:	b580      	push	{r7, lr}
 8003e0e:	b084      	sub	sp, #16
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	6078      	str	r0, [r7, #4]
 8003e14:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	4a2f      	ldr	r2, [pc, #188]	; (8003edc <TIM_Base_SetConfig+0xd0>)
 8003e20:	4293      	cmp	r3, r2
 8003e22:	d003      	beq.n	8003e2c <TIM_Base_SetConfig+0x20>
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	4a2e      	ldr	r2, [pc, #184]	; (8003ee0 <TIM_Base_SetConfig+0xd4>)
 8003e28:	4293      	cmp	r3, r2
 8003e2a:	d108      	bne.n	8003e3e <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	2270      	movs	r2, #112	; 0x70
 8003e30:	4393      	bics	r3, r2
 8003e32:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003e34:	683b      	ldr	r3, [r7, #0]
 8003e36:	685b      	ldr	r3, [r3, #4]
 8003e38:	68fa      	ldr	r2, [r7, #12]
 8003e3a:	4313      	orrs	r3, r2
 8003e3c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	4a26      	ldr	r2, [pc, #152]	; (8003edc <TIM_Base_SetConfig+0xd0>)
 8003e42:	4293      	cmp	r3, r2
 8003e44:	d013      	beq.n	8003e6e <TIM_Base_SetConfig+0x62>
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	4a25      	ldr	r2, [pc, #148]	; (8003ee0 <TIM_Base_SetConfig+0xd4>)
 8003e4a:	4293      	cmp	r3, r2
 8003e4c:	d00f      	beq.n	8003e6e <TIM_Base_SetConfig+0x62>
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	4a24      	ldr	r2, [pc, #144]	; (8003ee4 <TIM_Base_SetConfig+0xd8>)
 8003e52:	4293      	cmp	r3, r2
 8003e54:	d00b      	beq.n	8003e6e <TIM_Base_SetConfig+0x62>
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	4a23      	ldr	r2, [pc, #140]	; (8003ee8 <TIM_Base_SetConfig+0xdc>)
 8003e5a:	4293      	cmp	r3, r2
 8003e5c:	d007      	beq.n	8003e6e <TIM_Base_SetConfig+0x62>
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	4a22      	ldr	r2, [pc, #136]	; (8003eec <TIM_Base_SetConfig+0xe0>)
 8003e62:	4293      	cmp	r3, r2
 8003e64:	d003      	beq.n	8003e6e <TIM_Base_SetConfig+0x62>
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	4a21      	ldr	r2, [pc, #132]	; (8003ef0 <TIM_Base_SetConfig+0xe4>)
 8003e6a:	4293      	cmp	r3, r2
 8003e6c:	d108      	bne.n	8003e80 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	4a20      	ldr	r2, [pc, #128]	; (8003ef4 <TIM_Base_SetConfig+0xe8>)
 8003e72:	4013      	ands	r3, r2
 8003e74:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003e76:	683b      	ldr	r3, [r7, #0]
 8003e78:	68db      	ldr	r3, [r3, #12]
 8003e7a:	68fa      	ldr	r2, [r7, #12]
 8003e7c:	4313      	orrs	r3, r2
 8003e7e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	2280      	movs	r2, #128	; 0x80
 8003e84:	4393      	bics	r3, r2
 8003e86:	001a      	movs	r2, r3
 8003e88:	683b      	ldr	r3, [r7, #0]
 8003e8a:	695b      	ldr	r3, [r3, #20]
 8003e8c:	4313      	orrs	r3, r2
 8003e8e:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	68fa      	ldr	r2, [r7, #12]
 8003e94:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003e96:	683b      	ldr	r3, [r7, #0]
 8003e98:	689a      	ldr	r2, [r3, #8]
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003e9e:	683b      	ldr	r3, [r7, #0]
 8003ea0:	681a      	ldr	r2, [r3, #0]
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	4a0c      	ldr	r2, [pc, #48]	; (8003edc <TIM_Base_SetConfig+0xd0>)
 8003eaa:	4293      	cmp	r3, r2
 8003eac:	d00b      	beq.n	8003ec6 <TIM_Base_SetConfig+0xba>
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	4a0d      	ldr	r2, [pc, #52]	; (8003ee8 <TIM_Base_SetConfig+0xdc>)
 8003eb2:	4293      	cmp	r3, r2
 8003eb4:	d007      	beq.n	8003ec6 <TIM_Base_SetConfig+0xba>
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	4a0c      	ldr	r2, [pc, #48]	; (8003eec <TIM_Base_SetConfig+0xe0>)
 8003eba:	4293      	cmp	r3, r2
 8003ebc:	d003      	beq.n	8003ec6 <TIM_Base_SetConfig+0xba>
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	4a0b      	ldr	r2, [pc, #44]	; (8003ef0 <TIM_Base_SetConfig+0xe4>)
 8003ec2:	4293      	cmp	r3, r2
 8003ec4:	d103      	bne.n	8003ece <TIM_Base_SetConfig+0xc2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003ec6:	683b      	ldr	r3, [r7, #0]
 8003ec8:	691a      	ldr	r2, [r3, #16]
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	2201      	movs	r2, #1
 8003ed2:	615a      	str	r2, [r3, #20]
}
 8003ed4:	46c0      	nop			; (mov r8, r8)
 8003ed6:	46bd      	mov	sp, r7
 8003ed8:	b004      	add	sp, #16
 8003eda:	bd80      	pop	{r7, pc}
 8003edc:	40012c00 	.word	0x40012c00
 8003ee0:	40000400 	.word	0x40000400
 8003ee4:	40002000 	.word	0x40002000
 8003ee8:	40014000 	.word	0x40014000
 8003eec:	40014400 	.word	0x40014400
 8003ef0:	40014800 	.word	0x40014800
 8003ef4:	fffffcff 	.word	0xfffffcff

08003ef8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003ef8:	b580      	push	{r7, lr}
 8003efa:	b086      	sub	sp, #24
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	6078      	str	r0, [r7, #4]
 8003f00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	6a1b      	ldr	r3, [r3, #32]
 8003f06:	2201      	movs	r2, #1
 8003f08:	4393      	bics	r3, r2
 8003f0a:	001a      	movs	r2, r3
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	6a1b      	ldr	r3, [r3, #32]
 8003f14:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	685b      	ldr	r3, [r3, #4]
 8003f1a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	699b      	ldr	r3, [r3, #24]
 8003f20:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	2270      	movs	r2, #112	; 0x70
 8003f26:	4393      	bics	r3, r2
 8003f28:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	2203      	movs	r2, #3
 8003f2e:	4393      	bics	r3, r2
 8003f30:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003f32:	683b      	ldr	r3, [r7, #0]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	68fa      	ldr	r2, [r7, #12]
 8003f38:	4313      	orrs	r3, r2
 8003f3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003f3c:	697b      	ldr	r3, [r7, #20]
 8003f3e:	2202      	movs	r2, #2
 8003f40:	4393      	bics	r3, r2
 8003f42:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003f44:	683b      	ldr	r3, [r7, #0]
 8003f46:	689b      	ldr	r3, [r3, #8]
 8003f48:	697a      	ldr	r2, [r7, #20]
 8003f4a:	4313      	orrs	r3, r2
 8003f4c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	4a27      	ldr	r2, [pc, #156]	; (8003ff0 <TIM_OC1_SetConfig+0xf8>)
 8003f52:	4293      	cmp	r3, r2
 8003f54:	d00b      	beq.n	8003f6e <TIM_OC1_SetConfig+0x76>
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	4a26      	ldr	r2, [pc, #152]	; (8003ff4 <TIM_OC1_SetConfig+0xfc>)
 8003f5a:	4293      	cmp	r3, r2
 8003f5c:	d007      	beq.n	8003f6e <TIM_OC1_SetConfig+0x76>
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	4a25      	ldr	r2, [pc, #148]	; (8003ff8 <TIM_OC1_SetConfig+0x100>)
 8003f62:	4293      	cmp	r3, r2
 8003f64:	d003      	beq.n	8003f6e <TIM_OC1_SetConfig+0x76>
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	4a24      	ldr	r2, [pc, #144]	; (8003ffc <TIM_OC1_SetConfig+0x104>)
 8003f6a:	4293      	cmp	r3, r2
 8003f6c:	d10c      	bne.n	8003f88 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003f6e:	697b      	ldr	r3, [r7, #20]
 8003f70:	2208      	movs	r2, #8
 8003f72:	4393      	bics	r3, r2
 8003f74:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003f76:	683b      	ldr	r3, [r7, #0]
 8003f78:	68db      	ldr	r3, [r3, #12]
 8003f7a:	697a      	ldr	r2, [r7, #20]
 8003f7c:	4313      	orrs	r3, r2
 8003f7e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003f80:	697b      	ldr	r3, [r7, #20]
 8003f82:	2204      	movs	r2, #4
 8003f84:	4393      	bics	r3, r2
 8003f86:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	4a19      	ldr	r2, [pc, #100]	; (8003ff0 <TIM_OC1_SetConfig+0xf8>)
 8003f8c:	4293      	cmp	r3, r2
 8003f8e:	d00b      	beq.n	8003fa8 <TIM_OC1_SetConfig+0xb0>
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	4a18      	ldr	r2, [pc, #96]	; (8003ff4 <TIM_OC1_SetConfig+0xfc>)
 8003f94:	4293      	cmp	r3, r2
 8003f96:	d007      	beq.n	8003fa8 <TIM_OC1_SetConfig+0xb0>
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	4a17      	ldr	r2, [pc, #92]	; (8003ff8 <TIM_OC1_SetConfig+0x100>)
 8003f9c:	4293      	cmp	r3, r2
 8003f9e:	d003      	beq.n	8003fa8 <TIM_OC1_SetConfig+0xb0>
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	4a16      	ldr	r2, [pc, #88]	; (8003ffc <TIM_OC1_SetConfig+0x104>)
 8003fa4:	4293      	cmp	r3, r2
 8003fa6:	d111      	bne.n	8003fcc <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003fa8:	693b      	ldr	r3, [r7, #16]
 8003faa:	4a15      	ldr	r2, [pc, #84]	; (8004000 <TIM_OC1_SetConfig+0x108>)
 8003fac:	4013      	ands	r3, r2
 8003fae:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003fb0:	693b      	ldr	r3, [r7, #16]
 8003fb2:	4a14      	ldr	r2, [pc, #80]	; (8004004 <TIM_OC1_SetConfig+0x10c>)
 8003fb4:	4013      	ands	r3, r2
 8003fb6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003fb8:	683b      	ldr	r3, [r7, #0]
 8003fba:	695b      	ldr	r3, [r3, #20]
 8003fbc:	693a      	ldr	r2, [r7, #16]
 8003fbe:	4313      	orrs	r3, r2
 8003fc0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003fc2:	683b      	ldr	r3, [r7, #0]
 8003fc4:	699b      	ldr	r3, [r3, #24]
 8003fc6:	693a      	ldr	r2, [r7, #16]
 8003fc8:	4313      	orrs	r3, r2
 8003fca:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	693a      	ldr	r2, [r7, #16]
 8003fd0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	68fa      	ldr	r2, [r7, #12]
 8003fd6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003fd8:	683b      	ldr	r3, [r7, #0]
 8003fda:	685a      	ldr	r2, [r3, #4]
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	697a      	ldr	r2, [r7, #20]
 8003fe4:	621a      	str	r2, [r3, #32]
}
 8003fe6:	46c0      	nop			; (mov r8, r8)
 8003fe8:	46bd      	mov	sp, r7
 8003fea:	b006      	add	sp, #24
 8003fec:	bd80      	pop	{r7, pc}
 8003fee:	46c0      	nop			; (mov r8, r8)
 8003ff0:	40012c00 	.word	0x40012c00
 8003ff4:	40014000 	.word	0x40014000
 8003ff8:	40014400 	.word	0x40014400
 8003ffc:	40014800 	.word	0x40014800
 8004000:	fffffeff 	.word	0xfffffeff
 8004004:	fffffdff 	.word	0xfffffdff

08004008 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004008:	b580      	push	{r7, lr}
 800400a:	b086      	sub	sp, #24
 800400c:	af00      	add	r7, sp, #0
 800400e:	6078      	str	r0, [r7, #4]
 8004010:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	6a1b      	ldr	r3, [r3, #32]
 8004016:	2210      	movs	r2, #16
 8004018:	4393      	bics	r3, r2
 800401a:	001a      	movs	r2, r3
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	6a1b      	ldr	r3, [r3, #32]
 8004024:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	685b      	ldr	r3, [r3, #4]
 800402a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	699b      	ldr	r3, [r3, #24]
 8004030:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	4a2e      	ldr	r2, [pc, #184]	; (80040f0 <TIM_OC2_SetConfig+0xe8>)
 8004036:	4013      	ands	r3, r2
 8004038:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	4a2d      	ldr	r2, [pc, #180]	; (80040f4 <TIM_OC2_SetConfig+0xec>)
 800403e:	4013      	ands	r3, r2
 8004040:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004042:	683b      	ldr	r3, [r7, #0]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	021b      	lsls	r3, r3, #8
 8004048:	68fa      	ldr	r2, [r7, #12]
 800404a:	4313      	orrs	r3, r2
 800404c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800404e:	697b      	ldr	r3, [r7, #20]
 8004050:	2220      	movs	r2, #32
 8004052:	4393      	bics	r3, r2
 8004054:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004056:	683b      	ldr	r3, [r7, #0]
 8004058:	689b      	ldr	r3, [r3, #8]
 800405a:	011b      	lsls	r3, r3, #4
 800405c:	697a      	ldr	r2, [r7, #20]
 800405e:	4313      	orrs	r3, r2
 8004060:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	4a24      	ldr	r2, [pc, #144]	; (80040f8 <TIM_OC2_SetConfig+0xf0>)
 8004066:	4293      	cmp	r3, r2
 8004068:	d10d      	bne.n	8004086 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800406a:	697b      	ldr	r3, [r7, #20]
 800406c:	2280      	movs	r2, #128	; 0x80
 800406e:	4393      	bics	r3, r2
 8004070:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004072:	683b      	ldr	r3, [r7, #0]
 8004074:	68db      	ldr	r3, [r3, #12]
 8004076:	011b      	lsls	r3, r3, #4
 8004078:	697a      	ldr	r2, [r7, #20]
 800407a:	4313      	orrs	r3, r2
 800407c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800407e:	697b      	ldr	r3, [r7, #20]
 8004080:	2240      	movs	r2, #64	; 0x40
 8004082:	4393      	bics	r3, r2
 8004084:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	4a1b      	ldr	r2, [pc, #108]	; (80040f8 <TIM_OC2_SetConfig+0xf0>)
 800408a:	4293      	cmp	r3, r2
 800408c:	d00b      	beq.n	80040a6 <TIM_OC2_SetConfig+0x9e>
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	4a1a      	ldr	r2, [pc, #104]	; (80040fc <TIM_OC2_SetConfig+0xf4>)
 8004092:	4293      	cmp	r3, r2
 8004094:	d007      	beq.n	80040a6 <TIM_OC2_SetConfig+0x9e>
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	4a19      	ldr	r2, [pc, #100]	; (8004100 <TIM_OC2_SetConfig+0xf8>)
 800409a:	4293      	cmp	r3, r2
 800409c:	d003      	beq.n	80040a6 <TIM_OC2_SetConfig+0x9e>
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	4a18      	ldr	r2, [pc, #96]	; (8004104 <TIM_OC2_SetConfig+0xfc>)
 80040a2:	4293      	cmp	r3, r2
 80040a4:	d113      	bne.n	80040ce <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80040a6:	693b      	ldr	r3, [r7, #16]
 80040a8:	4a17      	ldr	r2, [pc, #92]	; (8004108 <TIM_OC2_SetConfig+0x100>)
 80040aa:	4013      	ands	r3, r2
 80040ac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80040ae:	693b      	ldr	r3, [r7, #16]
 80040b0:	4a16      	ldr	r2, [pc, #88]	; (800410c <TIM_OC2_SetConfig+0x104>)
 80040b2:	4013      	ands	r3, r2
 80040b4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80040b6:	683b      	ldr	r3, [r7, #0]
 80040b8:	695b      	ldr	r3, [r3, #20]
 80040ba:	009b      	lsls	r3, r3, #2
 80040bc:	693a      	ldr	r2, [r7, #16]
 80040be:	4313      	orrs	r3, r2
 80040c0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80040c2:	683b      	ldr	r3, [r7, #0]
 80040c4:	699b      	ldr	r3, [r3, #24]
 80040c6:	009b      	lsls	r3, r3, #2
 80040c8:	693a      	ldr	r2, [r7, #16]
 80040ca:	4313      	orrs	r3, r2
 80040cc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	693a      	ldr	r2, [r7, #16]
 80040d2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	68fa      	ldr	r2, [r7, #12]
 80040d8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80040da:	683b      	ldr	r3, [r7, #0]
 80040dc:	685a      	ldr	r2, [r3, #4]
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	697a      	ldr	r2, [r7, #20]
 80040e6:	621a      	str	r2, [r3, #32]
}
 80040e8:	46c0      	nop			; (mov r8, r8)
 80040ea:	46bd      	mov	sp, r7
 80040ec:	b006      	add	sp, #24
 80040ee:	bd80      	pop	{r7, pc}
 80040f0:	ffff8fff 	.word	0xffff8fff
 80040f4:	fffffcff 	.word	0xfffffcff
 80040f8:	40012c00 	.word	0x40012c00
 80040fc:	40014000 	.word	0x40014000
 8004100:	40014400 	.word	0x40014400
 8004104:	40014800 	.word	0x40014800
 8004108:	fffffbff 	.word	0xfffffbff
 800410c:	fffff7ff 	.word	0xfffff7ff

08004110 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004110:	b580      	push	{r7, lr}
 8004112:	b086      	sub	sp, #24
 8004114:	af00      	add	r7, sp, #0
 8004116:	6078      	str	r0, [r7, #4]
 8004118:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	6a1b      	ldr	r3, [r3, #32]
 800411e:	4a35      	ldr	r2, [pc, #212]	; (80041f4 <TIM_OC3_SetConfig+0xe4>)
 8004120:	401a      	ands	r2, r3
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	6a1b      	ldr	r3, [r3, #32]
 800412a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	685b      	ldr	r3, [r3, #4]
 8004130:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	69db      	ldr	r3, [r3, #28]
 8004136:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	2270      	movs	r2, #112	; 0x70
 800413c:	4393      	bics	r3, r2
 800413e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	2203      	movs	r2, #3
 8004144:	4393      	bics	r3, r2
 8004146:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004148:	683b      	ldr	r3, [r7, #0]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	68fa      	ldr	r2, [r7, #12]
 800414e:	4313      	orrs	r3, r2
 8004150:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004152:	697b      	ldr	r3, [r7, #20]
 8004154:	4a28      	ldr	r2, [pc, #160]	; (80041f8 <TIM_OC3_SetConfig+0xe8>)
 8004156:	4013      	ands	r3, r2
 8004158:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800415a:	683b      	ldr	r3, [r7, #0]
 800415c:	689b      	ldr	r3, [r3, #8]
 800415e:	021b      	lsls	r3, r3, #8
 8004160:	697a      	ldr	r2, [r7, #20]
 8004162:	4313      	orrs	r3, r2
 8004164:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	4a24      	ldr	r2, [pc, #144]	; (80041fc <TIM_OC3_SetConfig+0xec>)
 800416a:	4293      	cmp	r3, r2
 800416c:	d10d      	bne.n	800418a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800416e:	697b      	ldr	r3, [r7, #20]
 8004170:	4a23      	ldr	r2, [pc, #140]	; (8004200 <TIM_OC3_SetConfig+0xf0>)
 8004172:	4013      	ands	r3, r2
 8004174:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004176:	683b      	ldr	r3, [r7, #0]
 8004178:	68db      	ldr	r3, [r3, #12]
 800417a:	021b      	lsls	r3, r3, #8
 800417c:	697a      	ldr	r2, [r7, #20]
 800417e:	4313      	orrs	r3, r2
 8004180:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004182:	697b      	ldr	r3, [r7, #20]
 8004184:	4a1f      	ldr	r2, [pc, #124]	; (8004204 <TIM_OC3_SetConfig+0xf4>)
 8004186:	4013      	ands	r3, r2
 8004188:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	4a1b      	ldr	r2, [pc, #108]	; (80041fc <TIM_OC3_SetConfig+0xec>)
 800418e:	4293      	cmp	r3, r2
 8004190:	d00b      	beq.n	80041aa <TIM_OC3_SetConfig+0x9a>
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	4a1c      	ldr	r2, [pc, #112]	; (8004208 <TIM_OC3_SetConfig+0xf8>)
 8004196:	4293      	cmp	r3, r2
 8004198:	d007      	beq.n	80041aa <TIM_OC3_SetConfig+0x9a>
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	4a1b      	ldr	r2, [pc, #108]	; (800420c <TIM_OC3_SetConfig+0xfc>)
 800419e:	4293      	cmp	r3, r2
 80041a0:	d003      	beq.n	80041aa <TIM_OC3_SetConfig+0x9a>
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	4a1a      	ldr	r2, [pc, #104]	; (8004210 <TIM_OC3_SetConfig+0x100>)
 80041a6:	4293      	cmp	r3, r2
 80041a8:	d113      	bne.n	80041d2 <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80041aa:	693b      	ldr	r3, [r7, #16]
 80041ac:	4a19      	ldr	r2, [pc, #100]	; (8004214 <TIM_OC3_SetConfig+0x104>)
 80041ae:	4013      	ands	r3, r2
 80041b0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80041b2:	693b      	ldr	r3, [r7, #16]
 80041b4:	4a18      	ldr	r2, [pc, #96]	; (8004218 <TIM_OC3_SetConfig+0x108>)
 80041b6:	4013      	ands	r3, r2
 80041b8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80041ba:	683b      	ldr	r3, [r7, #0]
 80041bc:	695b      	ldr	r3, [r3, #20]
 80041be:	011b      	lsls	r3, r3, #4
 80041c0:	693a      	ldr	r2, [r7, #16]
 80041c2:	4313      	orrs	r3, r2
 80041c4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80041c6:	683b      	ldr	r3, [r7, #0]
 80041c8:	699b      	ldr	r3, [r3, #24]
 80041ca:	011b      	lsls	r3, r3, #4
 80041cc:	693a      	ldr	r2, [r7, #16]
 80041ce:	4313      	orrs	r3, r2
 80041d0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	693a      	ldr	r2, [r7, #16]
 80041d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	68fa      	ldr	r2, [r7, #12]
 80041dc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80041de:	683b      	ldr	r3, [r7, #0]
 80041e0:	685a      	ldr	r2, [r3, #4]
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	697a      	ldr	r2, [r7, #20]
 80041ea:	621a      	str	r2, [r3, #32]
}
 80041ec:	46c0      	nop			; (mov r8, r8)
 80041ee:	46bd      	mov	sp, r7
 80041f0:	b006      	add	sp, #24
 80041f2:	bd80      	pop	{r7, pc}
 80041f4:	fffffeff 	.word	0xfffffeff
 80041f8:	fffffdff 	.word	0xfffffdff
 80041fc:	40012c00 	.word	0x40012c00
 8004200:	fffff7ff 	.word	0xfffff7ff
 8004204:	fffffbff 	.word	0xfffffbff
 8004208:	40014000 	.word	0x40014000
 800420c:	40014400 	.word	0x40014400
 8004210:	40014800 	.word	0x40014800
 8004214:	ffffefff 	.word	0xffffefff
 8004218:	ffffdfff 	.word	0xffffdfff

0800421c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800421c:	b580      	push	{r7, lr}
 800421e:	b086      	sub	sp, #24
 8004220:	af00      	add	r7, sp, #0
 8004222:	6078      	str	r0, [r7, #4]
 8004224:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	6a1b      	ldr	r3, [r3, #32]
 800422a:	4a28      	ldr	r2, [pc, #160]	; (80042cc <TIM_OC4_SetConfig+0xb0>)
 800422c:	401a      	ands	r2, r3
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	6a1b      	ldr	r3, [r3, #32]
 8004236:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	685b      	ldr	r3, [r3, #4]
 800423c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	69db      	ldr	r3, [r3, #28]
 8004242:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	4a22      	ldr	r2, [pc, #136]	; (80042d0 <TIM_OC4_SetConfig+0xb4>)
 8004248:	4013      	ands	r3, r2
 800424a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	4a21      	ldr	r2, [pc, #132]	; (80042d4 <TIM_OC4_SetConfig+0xb8>)
 8004250:	4013      	ands	r3, r2
 8004252:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004254:	683b      	ldr	r3, [r7, #0]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	021b      	lsls	r3, r3, #8
 800425a:	68fa      	ldr	r2, [r7, #12]
 800425c:	4313      	orrs	r3, r2
 800425e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004260:	693b      	ldr	r3, [r7, #16]
 8004262:	4a1d      	ldr	r2, [pc, #116]	; (80042d8 <TIM_OC4_SetConfig+0xbc>)
 8004264:	4013      	ands	r3, r2
 8004266:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004268:	683b      	ldr	r3, [r7, #0]
 800426a:	689b      	ldr	r3, [r3, #8]
 800426c:	031b      	lsls	r3, r3, #12
 800426e:	693a      	ldr	r2, [r7, #16]
 8004270:	4313      	orrs	r3, r2
 8004272:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	4a19      	ldr	r2, [pc, #100]	; (80042dc <TIM_OC4_SetConfig+0xc0>)
 8004278:	4293      	cmp	r3, r2
 800427a:	d00b      	beq.n	8004294 <TIM_OC4_SetConfig+0x78>
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	4a18      	ldr	r2, [pc, #96]	; (80042e0 <TIM_OC4_SetConfig+0xc4>)
 8004280:	4293      	cmp	r3, r2
 8004282:	d007      	beq.n	8004294 <TIM_OC4_SetConfig+0x78>
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	4a17      	ldr	r2, [pc, #92]	; (80042e4 <TIM_OC4_SetConfig+0xc8>)
 8004288:	4293      	cmp	r3, r2
 800428a:	d003      	beq.n	8004294 <TIM_OC4_SetConfig+0x78>
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	4a16      	ldr	r2, [pc, #88]	; (80042e8 <TIM_OC4_SetConfig+0xcc>)
 8004290:	4293      	cmp	r3, r2
 8004292:	d109      	bne.n	80042a8 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004294:	697b      	ldr	r3, [r7, #20]
 8004296:	4a15      	ldr	r2, [pc, #84]	; (80042ec <TIM_OC4_SetConfig+0xd0>)
 8004298:	4013      	ands	r3, r2
 800429a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800429c:	683b      	ldr	r3, [r7, #0]
 800429e:	695b      	ldr	r3, [r3, #20]
 80042a0:	019b      	lsls	r3, r3, #6
 80042a2:	697a      	ldr	r2, [r7, #20]
 80042a4:	4313      	orrs	r3, r2
 80042a6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	697a      	ldr	r2, [r7, #20]
 80042ac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	68fa      	ldr	r2, [r7, #12]
 80042b2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80042b4:	683b      	ldr	r3, [r7, #0]
 80042b6:	685a      	ldr	r2, [r3, #4]
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	693a      	ldr	r2, [r7, #16]
 80042c0:	621a      	str	r2, [r3, #32]
}
 80042c2:	46c0      	nop			; (mov r8, r8)
 80042c4:	46bd      	mov	sp, r7
 80042c6:	b006      	add	sp, #24
 80042c8:	bd80      	pop	{r7, pc}
 80042ca:	46c0      	nop			; (mov r8, r8)
 80042cc:	ffffefff 	.word	0xffffefff
 80042d0:	ffff8fff 	.word	0xffff8fff
 80042d4:	fffffcff 	.word	0xfffffcff
 80042d8:	ffffdfff 	.word	0xffffdfff
 80042dc:	40012c00 	.word	0x40012c00
 80042e0:	40014000 	.word	0x40014000
 80042e4:	40014400 	.word	0x40014400
 80042e8:	40014800 	.word	0x40014800
 80042ec:	ffffbfff 	.word	0xffffbfff

080042f0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80042f0:	b580      	push	{r7, lr}
 80042f2:	b086      	sub	sp, #24
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	60f8      	str	r0, [r7, #12]
 80042f8:	60b9      	str	r1, [r7, #8]
 80042fa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	6a1b      	ldr	r3, [r3, #32]
 8004300:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	6a1b      	ldr	r3, [r3, #32]
 8004306:	2201      	movs	r2, #1
 8004308:	4393      	bics	r3, r2
 800430a:	001a      	movs	r2, r3
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	699b      	ldr	r3, [r3, #24]
 8004314:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004316:	693b      	ldr	r3, [r7, #16]
 8004318:	22f0      	movs	r2, #240	; 0xf0
 800431a:	4393      	bics	r3, r2
 800431c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	011b      	lsls	r3, r3, #4
 8004322:	693a      	ldr	r2, [r7, #16]
 8004324:	4313      	orrs	r3, r2
 8004326:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004328:	697b      	ldr	r3, [r7, #20]
 800432a:	220a      	movs	r2, #10
 800432c:	4393      	bics	r3, r2
 800432e:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004330:	697a      	ldr	r2, [r7, #20]
 8004332:	68bb      	ldr	r3, [r7, #8]
 8004334:	4313      	orrs	r3, r2
 8004336:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	693a      	ldr	r2, [r7, #16]
 800433c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	697a      	ldr	r2, [r7, #20]
 8004342:	621a      	str	r2, [r3, #32]
}
 8004344:	46c0      	nop			; (mov r8, r8)
 8004346:	46bd      	mov	sp, r7
 8004348:	b006      	add	sp, #24
 800434a:	bd80      	pop	{r7, pc}

0800434c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800434c:	b580      	push	{r7, lr}
 800434e:	b086      	sub	sp, #24
 8004350:	af00      	add	r7, sp, #0
 8004352:	60f8      	str	r0, [r7, #12]
 8004354:	60b9      	str	r1, [r7, #8]
 8004356:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	6a1b      	ldr	r3, [r3, #32]
 800435c:	2210      	movs	r2, #16
 800435e:	4393      	bics	r3, r2
 8004360:	001a      	movs	r2, r3
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	699b      	ldr	r3, [r3, #24]
 800436a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	6a1b      	ldr	r3, [r3, #32]
 8004370:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004372:	697b      	ldr	r3, [r7, #20]
 8004374:	4a0d      	ldr	r2, [pc, #52]	; (80043ac <TIM_TI2_ConfigInputStage+0x60>)
 8004376:	4013      	ands	r3, r2
 8004378:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	031b      	lsls	r3, r3, #12
 800437e:	697a      	ldr	r2, [r7, #20]
 8004380:	4313      	orrs	r3, r2
 8004382:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004384:	693b      	ldr	r3, [r7, #16]
 8004386:	22a0      	movs	r2, #160	; 0xa0
 8004388:	4393      	bics	r3, r2
 800438a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800438c:	68bb      	ldr	r3, [r7, #8]
 800438e:	011b      	lsls	r3, r3, #4
 8004390:	693a      	ldr	r2, [r7, #16]
 8004392:	4313      	orrs	r3, r2
 8004394:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	697a      	ldr	r2, [r7, #20]
 800439a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	693a      	ldr	r2, [r7, #16]
 80043a0:	621a      	str	r2, [r3, #32]
}
 80043a2:	46c0      	nop			; (mov r8, r8)
 80043a4:	46bd      	mov	sp, r7
 80043a6:	b006      	add	sp, #24
 80043a8:	bd80      	pop	{r7, pc}
 80043aa:	46c0      	nop			; (mov r8, r8)
 80043ac:	ffff0fff 	.word	0xffff0fff

080043b0 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80043b0:	b580      	push	{r7, lr}
 80043b2:	b084      	sub	sp, #16
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	6078      	str	r0, [r7, #4]
 80043b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	689b      	ldr	r3, [r3, #8]
 80043be:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	2270      	movs	r2, #112	; 0x70
 80043c4:	4393      	bics	r3, r2
 80043c6:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80043c8:	683a      	ldr	r2, [r7, #0]
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	4313      	orrs	r3, r2
 80043ce:	2207      	movs	r2, #7
 80043d0:	4313      	orrs	r3, r2
 80043d2:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	68fa      	ldr	r2, [r7, #12]
 80043d8:	609a      	str	r2, [r3, #8]
}
 80043da:	46c0      	nop			; (mov r8, r8)
 80043dc:	46bd      	mov	sp, r7
 80043de:	b004      	add	sp, #16
 80043e0:	bd80      	pop	{r7, pc}
	...

080043e4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80043e4:	b580      	push	{r7, lr}
 80043e6:	b086      	sub	sp, #24
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	60f8      	str	r0, [r7, #12]
 80043ec:	60b9      	str	r1, [r7, #8]
 80043ee:	607a      	str	r2, [r7, #4]
 80043f0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	689b      	ldr	r3, [r3, #8]
 80043f6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80043f8:	697b      	ldr	r3, [r7, #20]
 80043fa:	4a09      	ldr	r2, [pc, #36]	; (8004420 <TIM_ETR_SetConfig+0x3c>)
 80043fc:	4013      	ands	r3, r2
 80043fe:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004400:	683b      	ldr	r3, [r7, #0]
 8004402:	021a      	lsls	r2, r3, #8
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	431a      	orrs	r2, r3
 8004408:	68bb      	ldr	r3, [r7, #8]
 800440a:	4313      	orrs	r3, r2
 800440c:	697a      	ldr	r2, [r7, #20]
 800440e:	4313      	orrs	r3, r2
 8004410:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	697a      	ldr	r2, [r7, #20]
 8004416:	609a      	str	r2, [r3, #8]
}
 8004418:	46c0      	nop			; (mov r8, r8)
 800441a:	46bd      	mov	sp, r7
 800441c:	b006      	add	sp, #24
 800441e:	bd80      	pop	{r7, pc}
 8004420:	ffff00ff 	.word	0xffff00ff

08004424 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004424:	b580      	push	{r7, lr}
 8004426:	b086      	sub	sp, #24
 8004428:	af00      	add	r7, sp, #0
 800442a:	60f8      	str	r0, [r7, #12]
 800442c:	60b9      	str	r1, [r7, #8]
 800442e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004430:	68bb      	ldr	r3, [r7, #8]
 8004432:	221f      	movs	r2, #31
 8004434:	4013      	ands	r3, r2
 8004436:	2201      	movs	r2, #1
 8004438:	409a      	lsls	r2, r3
 800443a:	0013      	movs	r3, r2
 800443c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	6a1b      	ldr	r3, [r3, #32]
 8004442:	697a      	ldr	r2, [r7, #20]
 8004444:	43d2      	mvns	r2, r2
 8004446:	401a      	ands	r2, r3
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	6a1a      	ldr	r2, [r3, #32]
 8004450:	68bb      	ldr	r3, [r7, #8]
 8004452:	211f      	movs	r1, #31
 8004454:	400b      	ands	r3, r1
 8004456:	6879      	ldr	r1, [r7, #4]
 8004458:	4099      	lsls	r1, r3
 800445a:	000b      	movs	r3, r1
 800445c:	431a      	orrs	r2, r3
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	621a      	str	r2, [r3, #32]
}
 8004462:	46c0      	nop			; (mov r8, r8)
 8004464:	46bd      	mov	sp, r7
 8004466:	b006      	add	sp, #24
 8004468:	bd80      	pop	{r7, pc}
	...

0800446c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800446c:	b580      	push	{r7, lr}
 800446e:	b084      	sub	sp, #16
 8004470:	af00      	add	r7, sp, #0
 8004472:	6078      	str	r0, [r7, #4]
 8004474:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	223c      	movs	r2, #60	; 0x3c
 800447a:	5c9b      	ldrb	r3, [r3, r2]
 800447c:	2b01      	cmp	r3, #1
 800447e:	d101      	bne.n	8004484 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004480:	2302      	movs	r3, #2
 8004482:	e041      	b.n	8004508 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	223c      	movs	r2, #60	; 0x3c
 8004488:	2101      	movs	r1, #1
 800448a:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	223d      	movs	r2, #61	; 0x3d
 8004490:	2102      	movs	r1, #2
 8004492:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	685b      	ldr	r3, [r3, #4]
 800449a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	689b      	ldr	r3, [r3, #8]
 80044a2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	2270      	movs	r2, #112	; 0x70
 80044a8:	4393      	bics	r3, r2
 80044aa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80044ac:	683b      	ldr	r3, [r7, #0]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	68fa      	ldr	r2, [r7, #12]
 80044b2:	4313      	orrs	r3, r2
 80044b4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	68fa      	ldr	r2, [r7, #12]
 80044bc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	4a13      	ldr	r2, [pc, #76]	; (8004510 <HAL_TIMEx_MasterConfigSynchronization+0xa4>)
 80044c4:	4293      	cmp	r3, r2
 80044c6:	d009      	beq.n	80044dc <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	4a11      	ldr	r2, [pc, #68]	; (8004514 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 80044ce:	4293      	cmp	r3, r2
 80044d0:	d004      	beq.n	80044dc <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	4a10      	ldr	r2, [pc, #64]	; (8004518 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 80044d8:	4293      	cmp	r3, r2
 80044da:	d10c      	bne.n	80044f6 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80044dc:	68bb      	ldr	r3, [r7, #8]
 80044de:	2280      	movs	r2, #128	; 0x80
 80044e0:	4393      	bics	r3, r2
 80044e2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80044e4:	683b      	ldr	r3, [r7, #0]
 80044e6:	685b      	ldr	r3, [r3, #4]
 80044e8:	68ba      	ldr	r2, [r7, #8]
 80044ea:	4313      	orrs	r3, r2
 80044ec:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	68ba      	ldr	r2, [r7, #8]
 80044f4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	223d      	movs	r2, #61	; 0x3d
 80044fa:	2101      	movs	r1, #1
 80044fc:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	223c      	movs	r2, #60	; 0x3c
 8004502:	2100      	movs	r1, #0
 8004504:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004506:	2300      	movs	r3, #0
}
 8004508:	0018      	movs	r0, r3
 800450a:	46bd      	mov	sp, r7
 800450c:	b004      	add	sp, #16
 800450e:	bd80      	pop	{r7, pc}
 8004510:	40012c00 	.word	0x40012c00
 8004514:	40000400 	.word	0x40000400
 8004518:	40014000 	.word	0x40014000

0800451c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800451c:	b580      	push	{r7, lr}
 800451e:	b082      	sub	sp, #8
 8004520:	af00      	add	r7, sp, #0
 8004522:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	2b00      	cmp	r3, #0
 8004528:	d101      	bne.n	800452e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800452a:	2301      	movs	r3, #1
 800452c:	e044      	b.n	80045b8 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004532:	2b00      	cmp	r3, #0
 8004534:	d107      	bne.n	8004546 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	2274      	movs	r2, #116	; 0x74
 800453a:	2100      	movs	r1, #0
 800453c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	0018      	movs	r0, r3
 8004542:	f7fd fb29 	bl	8001b98 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	2224      	movs	r2, #36	; 0x24
 800454a:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	681a      	ldr	r2, [r3, #0]
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	2101      	movs	r1, #1
 8004558:	438a      	bics	r2, r1
 800455a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	0018      	movs	r0, r3
 8004560:	f000 f8da 	bl	8004718 <UART_SetConfig>
 8004564:	0003      	movs	r3, r0
 8004566:	2b01      	cmp	r3, #1
 8004568:	d101      	bne.n	800456e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800456a:	2301      	movs	r3, #1
 800456c:	e024      	b.n	80045b8 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004572:	2b00      	cmp	r3, #0
 8004574:	d003      	beq.n	800457e <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	0018      	movs	r0, r3
 800457a:	f000 fa0d 	bl	8004998 <UART_AdvFeatureConfig>
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	685a      	ldr	r2, [r3, #4]
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	490d      	ldr	r1, [pc, #52]	; (80045c0 <HAL_UART_Init+0xa4>)
 800458a:	400a      	ands	r2, r1
 800458c:	605a      	str	r2, [r3, #4]
#endif /* USART_CR3_IREN */
#else
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN));
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	689a      	ldr	r2, [r3, #8]
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	2108      	movs	r1, #8
 800459a:	438a      	bics	r2, r1
 800459c:	609a      	str	r2, [r3, #8]
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	681a      	ldr	r2, [r3, #0]
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	2101      	movs	r1, #1
 80045aa:	430a      	orrs	r2, r1
 80045ac:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	0018      	movs	r0, r3
 80045b2:	f000 faa5 	bl	8004b00 <UART_CheckIdleState>
 80045b6:	0003      	movs	r3, r0
}
 80045b8:	0018      	movs	r0, r3
 80045ba:	46bd      	mov	sp, r7
 80045bc:	b002      	add	sp, #8
 80045be:	bd80      	pop	{r7, pc}
 80045c0:	fffff7ff 	.word	0xfffff7ff

080045c4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80045c4:	b580      	push	{r7, lr}
 80045c6:	b08a      	sub	sp, #40	; 0x28
 80045c8:	af02      	add	r7, sp, #8
 80045ca:	60f8      	str	r0, [r7, #12]
 80045cc:	60b9      	str	r1, [r7, #8]
 80045ce:	603b      	str	r3, [r7, #0]
 80045d0:	1dbb      	adds	r3, r7, #6
 80045d2:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80045d8:	2b20      	cmp	r3, #32
 80045da:	d000      	beq.n	80045de <HAL_UART_Transmit+0x1a>
 80045dc:	e096      	b.n	800470c <HAL_UART_Transmit+0x148>
  {
    if ((pData == NULL) || (Size == 0U))
 80045de:	68bb      	ldr	r3, [r7, #8]
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d003      	beq.n	80045ec <HAL_UART_Transmit+0x28>
 80045e4:	1dbb      	adds	r3, r7, #6
 80045e6:	881b      	ldrh	r3, [r3, #0]
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d101      	bne.n	80045f0 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80045ec:	2301      	movs	r3, #1
 80045ee:	e08e      	b.n	800470e <HAL_UART_Transmit+0x14a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	689a      	ldr	r2, [r3, #8]
 80045f4:	2380      	movs	r3, #128	; 0x80
 80045f6:	015b      	lsls	r3, r3, #5
 80045f8:	429a      	cmp	r2, r3
 80045fa:	d109      	bne.n	8004610 <HAL_UART_Transmit+0x4c>
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	691b      	ldr	r3, [r3, #16]
 8004600:	2b00      	cmp	r3, #0
 8004602:	d105      	bne.n	8004610 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8004604:	68bb      	ldr	r3, [r7, #8]
 8004606:	2201      	movs	r2, #1
 8004608:	4013      	ands	r3, r2
 800460a:	d001      	beq.n	8004610 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 800460c:	2301      	movs	r3, #1
 800460e:	e07e      	b.n	800470e <HAL_UART_Transmit+0x14a>
      }
    }

    __HAL_LOCK(huart);
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	2274      	movs	r2, #116	; 0x74
 8004614:	5c9b      	ldrb	r3, [r3, r2]
 8004616:	2b01      	cmp	r3, #1
 8004618:	d101      	bne.n	800461e <HAL_UART_Transmit+0x5a>
 800461a:	2302      	movs	r3, #2
 800461c:	e077      	b.n	800470e <HAL_UART_Transmit+0x14a>
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	2274      	movs	r2, #116	; 0x74
 8004622:	2101      	movs	r1, #1
 8004624:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	2280      	movs	r2, #128	; 0x80
 800462a:	2100      	movs	r1, #0
 800462c:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	2221      	movs	r2, #33	; 0x21
 8004632:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004634:	f7fd fbe0 	bl	8001df8 <HAL_GetTick>
 8004638:	0003      	movs	r3, r0
 800463a:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	1dba      	adds	r2, r7, #6
 8004640:	2150      	movs	r1, #80	; 0x50
 8004642:	8812      	ldrh	r2, [r2, #0]
 8004644:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	1dba      	adds	r2, r7, #6
 800464a:	2152      	movs	r1, #82	; 0x52
 800464c:	8812      	ldrh	r2, [r2, #0]
 800464e:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	689a      	ldr	r2, [r3, #8]
 8004654:	2380      	movs	r3, #128	; 0x80
 8004656:	015b      	lsls	r3, r3, #5
 8004658:	429a      	cmp	r2, r3
 800465a:	d108      	bne.n	800466e <HAL_UART_Transmit+0xaa>
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	691b      	ldr	r3, [r3, #16]
 8004660:	2b00      	cmp	r3, #0
 8004662:	d104      	bne.n	800466e <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 8004664:	2300      	movs	r3, #0
 8004666:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004668:	68bb      	ldr	r3, [r7, #8]
 800466a:	61bb      	str	r3, [r7, #24]
 800466c:	e003      	b.n	8004676 <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 800466e:	68bb      	ldr	r3, [r7, #8]
 8004670:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004672:	2300      	movs	r3, #0
 8004674:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	2274      	movs	r2, #116	; 0x74
 800467a:	2100      	movs	r1, #0
 800467c:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 800467e:	e02d      	b.n	80046dc <HAL_UART_Transmit+0x118>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004680:	697a      	ldr	r2, [r7, #20]
 8004682:	68f8      	ldr	r0, [r7, #12]
 8004684:	683b      	ldr	r3, [r7, #0]
 8004686:	9300      	str	r3, [sp, #0]
 8004688:	0013      	movs	r3, r2
 800468a:	2200      	movs	r2, #0
 800468c:	2180      	movs	r1, #128	; 0x80
 800468e:	f000 fa7f 	bl	8004b90 <UART_WaitOnFlagUntilTimeout>
 8004692:	1e03      	subs	r3, r0, #0
 8004694:	d001      	beq.n	800469a <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 8004696:	2303      	movs	r3, #3
 8004698:	e039      	b.n	800470e <HAL_UART_Transmit+0x14a>
      }
      if (pdata8bits == NULL)
 800469a:	69fb      	ldr	r3, [r7, #28]
 800469c:	2b00      	cmp	r3, #0
 800469e:	d10b      	bne.n	80046b8 <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80046a0:	69bb      	ldr	r3, [r7, #24]
 80046a2:	881a      	ldrh	r2, [r3, #0]
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	05d2      	lsls	r2, r2, #23
 80046aa:	0dd2      	lsrs	r2, r2, #23
 80046ac:	b292      	uxth	r2, r2
 80046ae:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80046b0:	69bb      	ldr	r3, [r7, #24]
 80046b2:	3302      	adds	r3, #2
 80046b4:	61bb      	str	r3, [r7, #24]
 80046b6:	e008      	b.n	80046ca <HAL_UART_Transmit+0x106>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80046b8:	69fb      	ldr	r3, [r7, #28]
 80046ba:	781a      	ldrb	r2, [r3, #0]
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	b292      	uxth	r2, r2
 80046c2:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80046c4:	69fb      	ldr	r3, [r7, #28]
 80046c6:	3301      	adds	r3, #1
 80046c8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	2252      	movs	r2, #82	; 0x52
 80046ce:	5a9b      	ldrh	r3, [r3, r2]
 80046d0:	b29b      	uxth	r3, r3
 80046d2:	3b01      	subs	r3, #1
 80046d4:	b299      	uxth	r1, r3
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	2252      	movs	r2, #82	; 0x52
 80046da:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	2252      	movs	r2, #82	; 0x52
 80046e0:	5a9b      	ldrh	r3, [r3, r2]
 80046e2:	b29b      	uxth	r3, r3
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d1cb      	bne.n	8004680 <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80046e8:	697a      	ldr	r2, [r7, #20]
 80046ea:	68f8      	ldr	r0, [r7, #12]
 80046ec:	683b      	ldr	r3, [r7, #0]
 80046ee:	9300      	str	r3, [sp, #0]
 80046f0:	0013      	movs	r3, r2
 80046f2:	2200      	movs	r2, #0
 80046f4:	2140      	movs	r1, #64	; 0x40
 80046f6:	f000 fa4b 	bl	8004b90 <UART_WaitOnFlagUntilTimeout>
 80046fa:	1e03      	subs	r3, r0, #0
 80046fc:	d001      	beq.n	8004702 <HAL_UART_Transmit+0x13e>
    {
      return HAL_TIMEOUT;
 80046fe:	2303      	movs	r3, #3
 8004700:	e005      	b.n	800470e <HAL_UART_Transmit+0x14a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	2220      	movs	r2, #32
 8004706:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8004708:	2300      	movs	r3, #0
 800470a:	e000      	b.n	800470e <HAL_UART_Transmit+0x14a>
  }
  else
  {
    return HAL_BUSY;
 800470c:	2302      	movs	r3, #2
  }
}
 800470e:	0018      	movs	r0, r3
 8004710:	46bd      	mov	sp, r7
 8004712:	b008      	add	sp, #32
 8004714:	bd80      	pop	{r7, pc}
	...

08004718 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004718:	b580      	push	{r7, lr}
 800471a:	b088      	sub	sp, #32
 800471c:	af00      	add	r7, sp, #0
 800471e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004720:	231e      	movs	r3, #30
 8004722:	18fb      	adds	r3, r7, r3
 8004724:	2200      	movs	r2, #0
 8004726:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	689a      	ldr	r2, [r3, #8]
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	691b      	ldr	r3, [r3, #16]
 8004730:	431a      	orrs	r2, r3
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	695b      	ldr	r3, [r3, #20]
 8004736:	431a      	orrs	r2, r3
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	69db      	ldr	r3, [r3, #28]
 800473c:	4313      	orrs	r3, r2
 800473e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	4a8d      	ldr	r2, [pc, #564]	; (800497c <UART_SetConfig+0x264>)
 8004748:	4013      	ands	r3, r2
 800474a:	0019      	movs	r1, r3
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	697a      	ldr	r2, [r7, #20]
 8004752:	430a      	orrs	r2, r1
 8004754:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	685b      	ldr	r3, [r3, #4]
 800475c:	4a88      	ldr	r2, [pc, #544]	; (8004980 <UART_SetConfig+0x268>)
 800475e:	4013      	ands	r3, r2
 8004760:	0019      	movs	r1, r3
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	68da      	ldr	r2, [r3, #12]
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	430a      	orrs	r2, r1
 800476c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	699b      	ldr	r3, [r3, #24]
 8004772:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	6a1b      	ldr	r3, [r3, #32]
 8004778:	697a      	ldr	r2, [r7, #20]
 800477a:	4313      	orrs	r3, r2
 800477c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	689b      	ldr	r3, [r3, #8]
 8004784:	4a7f      	ldr	r2, [pc, #508]	; (8004984 <UART_SetConfig+0x26c>)
 8004786:	4013      	ands	r3, r2
 8004788:	0019      	movs	r1, r3
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	697a      	ldr	r2, [r7, #20]
 8004790:	430a      	orrs	r2, r1
 8004792:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	4a7b      	ldr	r2, [pc, #492]	; (8004988 <UART_SetConfig+0x270>)
 800479a:	4293      	cmp	r3, r2
 800479c:	d127      	bne.n	80047ee <UART_SetConfig+0xd6>
 800479e:	4b7b      	ldr	r3, [pc, #492]	; (800498c <UART_SetConfig+0x274>)
 80047a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047a2:	2203      	movs	r2, #3
 80047a4:	4013      	ands	r3, r2
 80047a6:	2b03      	cmp	r3, #3
 80047a8:	d00d      	beq.n	80047c6 <UART_SetConfig+0xae>
 80047aa:	d81b      	bhi.n	80047e4 <UART_SetConfig+0xcc>
 80047ac:	2b02      	cmp	r3, #2
 80047ae:	d014      	beq.n	80047da <UART_SetConfig+0xc2>
 80047b0:	d818      	bhi.n	80047e4 <UART_SetConfig+0xcc>
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d002      	beq.n	80047bc <UART_SetConfig+0xa4>
 80047b6:	2b01      	cmp	r3, #1
 80047b8:	d00a      	beq.n	80047d0 <UART_SetConfig+0xb8>
 80047ba:	e013      	b.n	80047e4 <UART_SetConfig+0xcc>
 80047bc:	231f      	movs	r3, #31
 80047be:	18fb      	adds	r3, r7, r3
 80047c0:	2200      	movs	r2, #0
 80047c2:	701a      	strb	r2, [r3, #0]
 80047c4:	e021      	b.n	800480a <UART_SetConfig+0xf2>
 80047c6:	231f      	movs	r3, #31
 80047c8:	18fb      	adds	r3, r7, r3
 80047ca:	2202      	movs	r2, #2
 80047cc:	701a      	strb	r2, [r3, #0]
 80047ce:	e01c      	b.n	800480a <UART_SetConfig+0xf2>
 80047d0:	231f      	movs	r3, #31
 80047d2:	18fb      	adds	r3, r7, r3
 80047d4:	2204      	movs	r2, #4
 80047d6:	701a      	strb	r2, [r3, #0]
 80047d8:	e017      	b.n	800480a <UART_SetConfig+0xf2>
 80047da:	231f      	movs	r3, #31
 80047dc:	18fb      	adds	r3, r7, r3
 80047de:	2208      	movs	r2, #8
 80047e0:	701a      	strb	r2, [r3, #0]
 80047e2:	e012      	b.n	800480a <UART_SetConfig+0xf2>
 80047e4:	231f      	movs	r3, #31
 80047e6:	18fb      	adds	r3, r7, r3
 80047e8:	2210      	movs	r2, #16
 80047ea:	701a      	strb	r2, [r3, #0]
 80047ec:	e00d      	b.n	800480a <UART_SetConfig+0xf2>
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	4a67      	ldr	r2, [pc, #412]	; (8004990 <UART_SetConfig+0x278>)
 80047f4:	4293      	cmp	r3, r2
 80047f6:	d104      	bne.n	8004802 <UART_SetConfig+0xea>
 80047f8:	231f      	movs	r3, #31
 80047fa:	18fb      	adds	r3, r7, r3
 80047fc:	2200      	movs	r2, #0
 80047fe:	701a      	strb	r2, [r3, #0]
 8004800:	e003      	b.n	800480a <UART_SetConfig+0xf2>
 8004802:	231f      	movs	r3, #31
 8004804:	18fb      	adds	r3, r7, r3
 8004806:	2210      	movs	r2, #16
 8004808:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	69da      	ldr	r2, [r3, #28]
 800480e:	2380      	movs	r3, #128	; 0x80
 8004810:	021b      	lsls	r3, r3, #8
 8004812:	429a      	cmp	r2, r3
 8004814:	d15d      	bne.n	80048d2 <UART_SetConfig+0x1ba>
  {
    switch (clocksource)
 8004816:	231f      	movs	r3, #31
 8004818:	18fb      	adds	r3, r7, r3
 800481a:	781b      	ldrb	r3, [r3, #0]
 800481c:	2b08      	cmp	r3, #8
 800481e:	d015      	beq.n	800484c <UART_SetConfig+0x134>
 8004820:	dc18      	bgt.n	8004854 <UART_SetConfig+0x13c>
 8004822:	2b04      	cmp	r3, #4
 8004824:	d00d      	beq.n	8004842 <UART_SetConfig+0x12a>
 8004826:	dc15      	bgt.n	8004854 <UART_SetConfig+0x13c>
 8004828:	2b00      	cmp	r3, #0
 800482a:	d002      	beq.n	8004832 <UART_SetConfig+0x11a>
 800482c:	2b02      	cmp	r3, #2
 800482e:	d005      	beq.n	800483c <UART_SetConfig+0x124>
 8004830:	e010      	b.n	8004854 <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004832:	f7fe ffe1 	bl	80037f8 <HAL_RCC_GetPCLK1Freq>
 8004836:	0003      	movs	r3, r0
 8004838:	61bb      	str	r3, [r7, #24]
        break;
 800483a:	e012      	b.n	8004862 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800483c:	4b55      	ldr	r3, [pc, #340]	; (8004994 <UART_SetConfig+0x27c>)
 800483e:	61bb      	str	r3, [r7, #24]
        break;
 8004840:	e00f      	b.n	8004862 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004842:	f7fe ff6b 	bl	800371c <HAL_RCC_GetSysClockFreq>
 8004846:	0003      	movs	r3, r0
 8004848:	61bb      	str	r3, [r7, #24]
        break;
 800484a:	e00a      	b.n	8004862 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800484c:	2380      	movs	r3, #128	; 0x80
 800484e:	021b      	lsls	r3, r3, #8
 8004850:	61bb      	str	r3, [r7, #24]
        break;
 8004852:	e006      	b.n	8004862 <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 8004854:	2300      	movs	r3, #0
 8004856:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004858:	231e      	movs	r3, #30
 800485a:	18fb      	adds	r3, r7, r3
 800485c:	2201      	movs	r2, #1
 800485e:	701a      	strb	r2, [r3, #0]
        break;
 8004860:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004862:	69bb      	ldr	r3, [r7, #24]
 8004864:	2b00      	cmp	r3, #0
 8004866:	d100      	bne.n	800486a <UART_SetConfig+0x152>
 8004868:	e07b      	b.n	8004962 <UART_SetConfig+0x24a>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800486a:	69bb      	ldr	r3, [r7, #24]
 800486c:	005a      	lsls	r2, r3, #1
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	685b      	ldr	r3, [r3, #4]
 8004872:	085b      	lsrs	r3, r3, #1
 8004874:	18d2      	adds	r2, r2, r3
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	685b      	ldr	r3, [r3, #4]
 800487a:	0019      	movs	r1, r3
 800487c:	0010      	movs	r0, r2
 800487e:	f7fb fc55 	bl	800012c <__udivsi3>
 8004882:	0003      	movs	r3, r0
 8004884:	b29b      	uxth	r3, r3
 8004886:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004888:	693b      	ldr	r3, [r7, #16]
 800488a:	2b0f      	cmp	r3, #15
 800488c:	d91c      	bls.n	80048c8 <UART_SetConfig+0x1b0>
 800488e:	693a      	ldr	r2, [r7, #16]
 8004890:	2380      	movs	r3, #128	; 0x80
 8004892:	025b      	lsls	r3, r3, #9
 8004894:	429a      	cmp	r2, r3
 8004896:	d217      	bcs.n	80048c8 <UART_SetConfig+0x1b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004898:	693b      	ldr	r3, [r7, #16]
 800489a:	b29a      	uxth	r2, r3
 800489c:	200e      	movs	r0, #14
 800489e:	183b      	adds	r3, r7, r0
 80048a0:	210f      	movs	r1, #15
 80048a2:	438a      	bics	r2, r1
 80048a4:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80048a6:	693b      	ldr	r3, [r7, #16]
 80048a8:	085b      	lsrs	r3, r3, #1
 80048aa:	b29b      	uxth	r3, r3
 80048ac:	2207      	movs	r2, #7
 80048ae:	4013      	ands	r3, r2
 80048b0:	b299      	uxth	r1, r3
 80048b2:	183b      	adds	r3, r7, r0
 80048b4:	183a      	adds	r2, r7, r0
 80048b6:	8812      	ldrh	r2, [r2, #0]
 80048b8:	430a      	orrs	r2, r1
 80048ba:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	183a      	adds	r2, r7, r0
 80048c2:	8812      	ldrh	r2, [r2, #0]
 80048c4:	60da      	str	r2, [r3, #12]
 80048c6:	e04c      	b.n	8004962 <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 80048c8:	231e      	movs	r3, #30
 80048ca:	18fb      	adds	r3, r7, r3
 80048cc:	2201      	movs	r2, #1
 80048ce:	701a      	strb	r2, [r3, #0]
 80048d0:	e047      	b.n	8004962 <UART_SetConfig+0x24a>
      }
    }
  }
  else
  {
    switch (clocksource)
 80048d2:	231f      	movs	r3, #31
 80048d4:	18fb      	adds	r3, r7, r3
 80048d6:	781b      	ldrb	r3, [r3, #0]
 80048d8:	2b08      	cmp	r3, #8
 80048da:	d015      	beq.n	8004908 <UART_SetConfig+0x1f0>
 80048dc:	dc18      	bgt.n	8004910 <UART_SetConfig+0x1f8>
 80048de:	2b04      	cmp	r3, #4
 80048e0:	d00d      	beq.n	80048fe <UART_SetConfig+0x1e6>
 80048e2:	dc15      	bgt.n	8004910 <UART_SetConfig+0x1f8>
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d002      	beq.n	80048ee <UART_SetConfig+0x1d6>
 80048e8:	2b02      	cmp	r3, #2
 80048ea:	d005      	beq.n	80048f8 <UART_SetConfig+0x1e0>
 80048ec:	e010      	b.n	8004910 <UART_SetConfig+0x1f8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80048ee:	f7fe ff83 	bl	80037f8 <HAL_RCC_GetPCLK1Freq>
 80048f2:	0003      	movs	r3, r0
 80048f4:	61bb      	str	r3, [r7, #24]
        break;
 80048f6:	e012      	b.n	800491e <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80048f8:	4b26      	ldr	r3, [pc, #152]	; (8004994 <UART_SetConfig+0x27c>)
 80048fa:	61bb      	str	r3, [r7, #24]
        break;
 80048fc:	e00f      	b.n	800491e <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80048fe:	f7fe ff0d 	bl	800371c <HAL_RCC_GetSysClockFreq>
 8004902:	0003      	movs	r3, r0
 8004904:	61bb      	str	r3, [r7, #24]
        break;
 8004906:	e00a      	b.n	800491e <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004908:	2380      	movs	r3, #128	; 0x80
 800490a:	021b      	lsls	r3, r3, #8
 800490c:	61bb      	str	r3, [r7, #24]
        break;
 800490e:	e006      	b.n	800491e <UART_SetConfig+0x206>
      default:
        pclk = 0U;
 8004910:	2300      	movs	r3, #0
 8004912:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004914:	231e      	movs	r3, #30
 8004916:	18fb      	adds	r3, r7, r3
 8004918:	2201      	movs	r2, #1
 800491a:	701a      	strb	r2, [r3, #0]
        break;
 800491c:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 800491e:	69bb      	ldr	r3, [r7, #24]
 8004920:	2b00      	cmp	r3, #0
 8004922:	d01e      	beq.n	8004962 <UART_SetConfig+0x24a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	685b      	ldr	r3, [r3, #4]
 8004928:	085a      	lsrs	r2, r3, #1
 800492a:	69bb      	ldr	r3, [r7, #24]
 800492c:	18d2      	adds	r2, r2, r3
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	685b      	ldr	r3, [r3, #4]
 8004932:	0019      	movs	r1, r3
 8004934:	0010      	movs	r0, r2
 8004936:	f7fb fbf9 	bl	800012c <__udivsi3>
 800493a:	0003      	movs	r3, r0
 800493c:	b29b      	uxth	r3, r3
 800493e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004940:	693b      	ldr	r3, [r7, #16]
 8004942:	2b0f      	cmp	r3, #15
 8004944:	d909      	bls.n	800495a <UART_SetConfig+0x242>
 8004946:	693a      	ldr	r2, [r7, #16]
 8004948:	2380      	movs	r3, #128	; 0x80
 800494a:	025b      	lsls	r3, r3, #9
 800494c:	429a      	cmp	r2, r3
 800494e:	d204      	bcs.n	800495a <UART_SetConfig+0x242>
      {
        huart->Instance->BRR = usartdiv;
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	693a      	ldr	r2, [r7, #16]
 8004956:	60da      	str	r2, [r3, #12]
 8004958:	e003      	b.n	8004962 <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 800495a:	231e      	movs	r3, #30
 800495c:	18fb      	adds	r3, r7, r3
 800495e:	2201      	movs	r2, #1
 8004960:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	2200      	movs	r2, #0
 8004966:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	2200      	movs	r2, #0
 800496c:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800496e:	231e      	movs	r3, #30
 8004970:	18fb      	adds	r3, r7, r3
 8004972:	781b      	ldrb	r3, [r3, #0]
}
 8004974:	0018      	movs	r0, r3
 8004976:	46bd      	mov	sp, r7
 8004978:	b008      	add	sp, #32
 800497a:	bd80      	pop	{r7, pc}
 800497c:	ffff69f3 	.word	0xffff69f3
 8004980:	ffffcfff 	.word	0xffffcfff
 8004984:	fffff4ff 	.word	0xfffff4ff
 8004988:	40013800 	.word	0x40013800
 800498c:	40021000 	.word	0x40021000
 8004990:	40004400 	.word	0x40004400
 8004994:	007a1200 	.word	0x007a1200

08004998 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004998:	b580      	push	{r7, lr}
 800499a:	b082      	sub	sp, #8
 800499c:	af00      	add	r7, sp, #0
 800499e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049a4:	2201      	movs	r2, #1
 80049a6:	4013      	ands	r3, r2
 80049a8:	d00b      	beq.n	80049c2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	685b      	ldr	r3, [r3, #4]
 80049b0:	4a4a      	ldr	r2, [pc, #296]	; (8004adc <UART_AdvFeatureConfig+0x144>)
 80049b2:	4013      	ands	r3, r2
 80049b4:	0019      	movs	r1, r3
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	430a      	orrs	r2, r1
 80049c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049c6:	2202      	movs	r2, #2
 80049c8:	4013      	ands	r3, r2
 80049ca:	d00b      	beq.n	80049e4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	685b      	ldr	r3, [r3, #4]
 80049d2:	4a43      	ldr	r2, [pc, #268]	; (8004ae0 <UART_AdvFeatureConfig+0x148>)
 80049d4:	4013      	ands	r3, r2
 80049d6:	0019      	movs	r1, r3
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	430a      	orrs	r2, r1
 80049e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049e8:	2204      	movs	r2, #4
 80049ea:	4013      	ands	r3, r2
 80049ec:	d00b      	beq.n	8004a06 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	685b      	ldr	r3, [r3, #4]
 80049f4:	4a3b      	ldr	r2, [pc, #236]	; (8004ae4 <UART_AdvFeatureConfig+0x14c>)
 80049f6:	4013      	ands	r3, r2
 80049f8:	0019      	movs	r1, r3
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	430a      	orrs	r2, r1
 8004a04:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a0a:	2208      	movs	r2, #8
 8004a0c:	4013      	ands	r3, r2
 8004a0e:	d00b      	beq.n	8004a28 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	685b      	ldr	r3, [r3, #4]
 8004a16:	4a34      	ldr	r2, [pc, #208]	; (8004ae8 <UART_AdvFeatureConfig+0x150>)
 8004a18:	4013      	ands	r3, r2
 8004a1a:	0019      	movs	r1, r3
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	430a      	orrs	r2, r1
 8004a26:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a2c:	2210      	movs	r2, #16
 8004a2e:	4013      	ands	r3, r2
 8004a30:	d00b      	beq.n	8004a4a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	689b      	ldr	r3, [r3, #8]
 8004a38:	4a2c      	ldr	r2, [pc, #176]	; (8004aec <UART_AdvFeatureConfig+0x154>)
 8004a3a:	4013      	ands	r3, r2
 8004a3c:	0019      	movs	r1, r3
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	430a      	orrs	r2, r1
 8004a48:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a4e:	2220      	movs	r2, #32
 8004a50:	4013      	ands	r3, r2
 8004a52:	d00b      	beq.n	8004a6c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	689b      	ldr	r3, [r3, #8]
 8004a5a:	4a25      	ldr	r2, [pc, #148]	; (8004af0 <UART_AdvFeatureConfig+0x158>)
 8004a5c:	4013      	ands	r3, r2
 8004a5e:	0019      	movs	r1, r3
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	430a      	orrs	r2, r1
 8004a6a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a70:	2240      	movs	r2, #64	; 0x40
 8004a72:	4013      	ands	r3, r2
 8004a74:	d01d      	beq.n	8004ab2 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	685b      	ldr	r3, [r3, #4]
 8004a7c:	4a1d      	ldr	r2, [pc, #116]	; (8004af4 <UART_AdvFeatureConfig+0x15c>)
 8004a7e:	4013      	ands	r3, r2
 8004a80:	0019      	movs	r1, r3
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	430a      	orrs	r2, r1
 8004a8c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004a92:	2380      	movs	r3, #128	; 0x80
 8004a94:	035b      	lsls	r3, r3, #13
 8004a96:	429a      	cmp	r2, r3
 8004a98:	d10b      	bne.n	8004ab2 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	685b      	ldr	r3, [r3, #4]
 8004aa0:	4a15      	ldr	r2, [pc, #84]	; (8004af8 <UART_AdvFeatureConfig+0x160>)
 8004aa2:	4013      	ands	r3, r2
 8004aa4:	0019      	movs	r1, r3
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	430a      	orrs	r2, r1
 8004ab0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ab6:	2280      	movs	r2, #128	; 0x80
 8004ab8:	4013      	ands	r3, r2
 8004aba:	d00b      	beq.n	8004ad4 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	685b      	ldr	r3, [r3, #4]
 8004ac2:	4a0e      	ldr	r2, [pc, #56]	; (8004afc <UART_AdvFeatureConfig+0x164>)
 8004ac4:	4013      	ands	r3, r2
 8004ac6:	0019      	movs	r1, r3
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	430a      	orrs	r2, r1
 8004ad2:	605a      	str	r2, [r3, #4]
  }
}
 8004ad4:	46c0      	nop			; (mov r8, r8)
 8004ad6:	46bd      	mov	sp, r7
 8004ad8:	b002      	add	sp, #8
 8004ada:	bd80      	pop	{r7, pc}
 8004adc:	fffdffff 	.word	0xfffdffff
 8004ae0:	fffeffff 	.word	0xfffeffff
 8004ae4:	fffbffff 	.word	0xfffbffff
 8004ae8:	ffff7fff 	.word	0xffff7fff
 8004aec:	ffffefff 	.word	0xffffefff
 8004af0:	ffffdfff 	.word	0xffffdfff
 8004af4:	ffefffff 	.word	0xffefffff
 8004af8:	ff9fffff 	.word	0xff9fffff
 8004afc:	fff7ffff 	.word	0xfff7ffff

08004b00 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004b00:	b580      	push	{r7, lr}
 8004b02:	b086      	sub	sp, #24
 8004b04:	af02      	add	r7, sp, #8
 8004b06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	2280      	movs	r2, #128	; 0x80
 8004b0c:	2100      	movs	r1, #0
 8004b0e:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004b10:	f7fd f972 	bl	8001df8 <HAL_GetTick>
 8004b14:	0003      	movs	r3, r0
 8004b16:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	2208      	movs	r2, #8
 8004b20:	4013      	ands	r3, r2
 8004b22:	2b08      	cmp	r3, #8
 8004b24:	d10c      	bne.n	8004b40 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	2280      	movs	r2, #128	; 0x80
 8004b2a:	0391      	lsls	r1, r2, #14
 8004b2c:	6878      	ldr	r0, [r7, #4]
 8004b2e:	4a17      	ldr	r2, [pc, #92]	; (8004b8c <UART_CheckIdleState+0x8c>)
 8004b30:	9200      	str	r2, [sp, #0]
 8004b32:	2200      	movs	r2, #0
 8004b34:	f000 f82c 	bl	8004b90 <UART_WaitOnFlagUntilTimeout>
 8004b38:	1e03      	subs	r3, r0, #0
 8004b3a:	d001      	beq.n	8004b40 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004b3c:	2303      	movs	r3, #3
 8004b3e:	e021      	b.n	8004b84 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	2204      	movs	r2, #4
 8004b48:	4013      	ands	r3, r2
 8004b4a:	2b04      	cmp	r3, #4
 8004b4c:	d10c      	bne.n	8004b68 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	2280      	movs	r2, #128	; 0x80
 8004b52:	03d1      	lsls	r1, r2, #15
 8004b54:	6878      	ldr	r0, [r7, #4]
 8004b56:	4a0d      	ldr	r2, [pc, #52]	; (8004b8c <UART_CheckIdleState+0x8c>)
 8004b58:	9200      	str	r2, [sp, #0]
 8004b5a:	2200      	movs	r2, #0
 8004b5c:	f000 f818 	bl	8004b90 <UART_WaitOnFlagUntilTimeout>
 8004b60:	1e03      	subs	r3, r0, #0
 8004b62:	d001      	beq.n	8004b68 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004b64:	2303      	movs	r3, #3
 8004b66:	e00d      	b.n	8004b84 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	2220      	movs	r2, #32
 8004b6c:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	2220      	movs	r2, #32
 8004b72:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	2200      	movs	r2, #0
 8004b78:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	2274      	movs	r2, #116	; 0x74
 8004b7e:	2100      	movs	r1, #0
 8004b80:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004b82:	2300      	movs	r3, #0
}
 8004b84:	0018      	movs	r0, r3
 8004b86:	46bd      	mov	sp, r7
 8004b88:	b004      	add	sp, #16
 8004b8a:	bd80      	pop	{r7, pc}
 8004b8c:	01ffffff 	.word	0x01ffffff

08004b90 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004b90:	b580      	push	{r7, lr}
 8004b92:	b094      	sub	sp, #80	; 0x50
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	60f8      	str	r0, [r7, #12]
 8004b98:	60b9      	str	r1, [r7, #8]
 8004b9a:	603b      	str	r3, [r7, #0]
 8004b9c:	1dfb      	adds	r3, r7, #7
 8004b9e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004ba0:	e0a3      	b.n	8004cea <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ba2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004ba4:	3301      	adds	r3, #1
 8004ba6:	d100      	bne.n	8004baa <UART_WaitOnFlagUntilTimeout+0x1a>
 8004ba8:	e09f      	b.n	8004cea <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004baa:	f7fd f925 	bl	8001df8 <HAL_GetTick>
 8004bae:	0002      	movs	r2, r0
 8004bb0:	683b      	ldr	r3, [r7, #0]
 8004bb2:	1ad3      	subs	r3, r2, r3
 8004bb4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004bb6:	429a      	cmp	r2, r3
 8004bb8:	d302      	bcc.n	8004bc0 <UART_WaitOnFlagUntilTimeout+0x30>
 8004bba:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d13d      	bne.n	8004c3c <UART_WaitOnFlagUntilTimeout+0xac>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004bc0:	f3ef 8310 	mrs	r3, PRIMASK
 8004bc4:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8004bc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004bc8:	647b      	str	r3, [r7, #68]	; 0x44
 8004bca:	2301      	movs	r3, #1
 8004bcc:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004bce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bd0:	f383 8810 	msr	PRIMASK, r3
}
 8004bd4:	46c0      	nop			; (mov r8, r8)
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	681a      	ldr	r2, [r3, #0]
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	494c      	ldr	r1, [pc, #304]	; (8004d14 <UART_WaitOnFlagUntilTimeout+0x184>)
 8004be2:	400a      	ands	r2, r1
 8004be4:	601a      	str	r2, [r3, #0]
 8004be6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004be8:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004bea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bec:	f383 8810 	msr	PRIMASK, r3
}
 8004bf0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004bf2:	f3ef 8310 	mrs	r3, PRIMASK
 8004bf6:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8004bf8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004bfa:	643b      	str	r3, [r7, #64]	; 0x40
 8004bfc:	2301      	movs	r3, #1
 8004bfe:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c02:	f383 8810 	msr	PRIMASK, r3
}
 8004c06:	46c0      	nop			; (mov r8, r8)
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	689a      	ldr	r2, [r3, #8]
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	2101      	movs	r1, #1
 8004c14:	438a      	bics	r2, r1
 8004c16:	609a      	str	r2, [r3, #8]
 8004c18:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004c1a:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c1e:	f383 8810 	msr	PRIMASK, r3
}
 8004c22:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	2220      	movs	r2, #32
 8004c28:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	2220      	movs	r2, #32
 8004c2e:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	2274      	movs	r2, #116	; 0x74
 8004c34:	2100      	movs	r1, #0
 8004c36:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8004c38:	2303      	movs	r3, #3
 8004c3a:	e067      	b.n	8004d0c <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	2204      	movs	r2, #4
 8004c44:	4013      	ands	r3, r2
 8004c46:	d050      	beq.n	8004cea <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	69da      	ldr	r2, [r3, #28]
 8004c4e:	2380      	movs	r3, #128	; 0x80
 8004c50:	011b      	lsls	r3, r3, #4
 8004c52:	401a      	ands	r2, r3
 8004c54:	2380      	movs	r3, #128	; 0x80
 8004c56:	011b      	lsls	r3, r3, #4
 8004c58:	429a      	cmp	r2, r3
 8004c5a:	d146      	bne.n	8004cea <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	2280      	movs	r2, #128	; 0x80
 8004c62:	0112      	lsls	r2, r2, #4
 8004c64:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004c66:	f3ef 8310 	mrs	r3, PRIMASK
 8004c6a:	613b      	str	r3, [r7, #16]
  return(result);
 8004c6c:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004c6e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004c70:	2301      	movs	r3, #1
 8004c72:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c74:	697b      	ldr	r3, [r7, #20]
 8004c76:	f383 8810 	msr	PRIMASK, r3
}
 8004c7a:	46c0      	nop			; (mov r8, r8)
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	681a      	ldr	r2, [r3, #0]
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	4923      	ldr	r1, [pc, #140]	; (8004d14 <UART_WaitOnFlagUntilTimeout+0x184>)
 8004c88:	400a      	ands	r2, r1
 8004c8a:	601a      	str	r2, [r3, #0]
 8004c8c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004c8e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c90:	69bb      	ldr	r3, [r7, #24]
 8004c92:	f383 8810 	msr	PRIMASK, r3
}
 8004c96:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004c98:	f3ef 8310 	mrs	r3, PRIMASK
 8004c9c:	61fb      	str	r3, [r7, #28]
  return(result);
 8004c9e:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ca0:	64bb      	str	r3, [r7, #72]	; 0x48
 8004ca2:	2301      	movs	r3, #1
 8004ca4:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ca6:	6a3b      	ldr	r3, [r7, #32]
 8004ca8:	f383 8810 	msr	PRIMASK, r3
}
 8004cac:	46c0      	nop			; (mov r8, r8)
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	689a      	ldr	r2, [r3, #8]
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	2101      	movs	r1, #1
 8004cba:	438a      	bics	r2, r1
 8004cbc:	609a      	str	r2, [r3, #8]
 8004cbe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004cc0:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004cc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cc4:	f383 8810 	msr	PRIMASK, r3
}
 8004cc8:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	2220      	movs	r2, #32
 8004cce:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	2220      	movs	r2, #32
 8004cd4:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	2280      	movs	r2, #128	; 0x80
 8004cda:	2120      	movs	r1, #32
 8004cdc:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	2274      	movs	r2, #116	; 0x74
 8004ce2:	2100      	movs	r1, #0
 8004ce4:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8004ce6:	2303      	movs	r3, #3
 8004ce8:	e010      	b.n	8004d0c <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	69db      	ldr	r3, [r3, #28]
 8004cf0:	68ba      	ldr	r2, [r7, #8]
 8004cf2:	4013      	ands	r3, r2
 8004cf4:	68ba      	ldr	r2, [r7, #8]
 8004cf6:	1ad3      	subs	r3, r2, r3
 8004cf8:	425a      	negs	r2, r3
 8004cfa:	4153      	adcs	r3, r2
 8004cfc:	b2db      	uxtb	r3, r3
 8004cfe:	001a      	movs	r2, r3
 8004d00:	1dfb      	adds	r3, r7, #7
 8004d02:	781b      	ldrb	r3, [r3, #0]
 8004d04:	429a      	cmp	r2, r3
 8004d06:	d100      	bne.n	8004d0a <UART_WaitOnFlagUntilTimeout+0x17a>
 8004d08:	e74b      	b.n	8004ba2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004d0a:	2300      	movs	r3, #0
}
 8004d0c:	0018      	movs	r0, r3
 8004d0e:	46bd      	mov	sp, r7
 8004d10:	b014      	add	sp, #80	; 0x50
 8004d12:	bd80      	pop	{r7, pc}
 8004d14:	fffffe5f 	.word	0xfffffe5f

08004d18 <__errno>:
 8004d18:	4b01      	ldr	r3, [pc, #4]	; (8004d20 <__errno+0x8>)
 8004d1a:	6818      	ldr	r0, [r3, #0]
 8004d1c:	4770      	bx	lr
 8004d1e:	46c0      	nop			; (mov r8, r8)
 8004d20:	2000000c 	.word	0x2000000c

08004d24 <__libc_init_array>:
 8004d24:	b570      	push	{r4, r5, r6, lr}
 8004d26:	2600      	movs	r6, #0
 8004d28:	4d0c      	ldr	r5, [pc, #48]	; (8004d5c <__libc_init_array+0x38>)
 8004d2a:	4c0d      	ldr	r4, [pc, #52]	; (8004d60 <__libc_init_array+0x3c>)
 8004d2c:	1b64      	subs	r4, r4, r5
 8004d2e:	10a4      	asrs	r4, r4, #2
 8004d30:	42a6      	cmp	r6, r4
 8004d32:	d109      	bne.n	8004d48 <__libc_init_array+0x24>
 8004d34:	2600      	movs	r6, #0
 8004d36:	f000 fc8b 	bl	8005650 <_init>
 8004d3a:	4d0a      	ldr	r5, [pc, #40]	; (8004d64 <__libc_init_array+0x40>)
 8004d3c:	4c0a      	ldr	r4, [pc, #40]	; (8004d68 <__libc_init_array+0x44>)
 8004d3e:	1b64      	subs	r4, r4, r5
 8004d40:	10a4      	asrs	r4, r4, #2
 8004d42:	42a6      	cmp	r6, r4
 8004d44:	d105      	bne.n	8004d52 <__libc_init_array+0x2e>
 8004d46:	bd70      	pop	{r4, r5, r6, pc}
 8004d48:	00b3      	lsls	r3, r6, #2
 8004d4a:	58eb      	ldr	r3, [r5, r3]
 8004d4c:	4798      	blx	r3
 8004d4e:	3601      	adds	r6, #1
 8004d50:	e7ee      	b.n	8004d30 <__libc_init_array+0xc>
 8004d52:	00b3      	lsls	r3, r6, #2
 8004d54:	58eb      	ldr	r3, [r5, r3]
 8004d56:	4798      	blx	r3
 8004d58:	3601      	adds	r6, #1
 8004d5a:	e7f2      	b.n	8004d42 <__libc_init_array+0x1e>
 8004d5c:	08005758 	.word	0x08005758
 8004d60:	08005758 	.word	0x08005758
 8004d64:	08005758 	.word	0x08005758
 8004d68:	0800575c 	.word	0x0800575c

08004d6c <memset>:
 8004d6c:	0003      	movs	r3, r0
 8004d6e:	1882      	adds	r2, r0, r2
 8004d70:	4293      	cmp	r3, r2
 8004d72:	d100      	bne.n	8004d76 <memset+0xa>
 8004d74:	4770      	bx	lr
 8004d76:	7019      	strb	r1, [r3, #0]
 8004d78:	3301      	adds	r3, #1
 8004d7a:	e7f9      	b.n	8004d70 <memset+0x4>

08004d7c <siprintf>:
 8004d7c:	b40e      	push	{r1, r2, r3}
 8004d7e:	b500      	push	{lr}
 8004d80:	490b      	ldr	r1, [pc, #44]	; (8004db0 <siprintf+0x34>)
 8004d82:	b09c      	sub	sp, #112	; 0x70
 8004d84:	ab1d      	add	r3, sp, #116	; 0x74
 8004d86:	9002      	str	r0, [sp, #8]
 8004d88:	9006      	str	r0, [sp, #24]
 8004d8a:	9107      	str	r1, [sp, #28]
 8004d8c:	9104      	str	r1, [sp, #16]
 8004d8e:	4809      	ldr	r0, [pc, #36]	; (8004db4 <siprintf+0x38>)
 8004d90:	4909      	ldr	r1, [pc, #36]	; (8004db8 <siprintf+0x3c>)
 8004d92:	cb04      	ldmia	r3!, {r2}
 8004d94:	9105      	str	r1, [sp, #20]
 8004d96:	6800      	ldr	r0, [r0, #0]
 8004d98:	a902      	add	r1, sp, #8
 8004d9a:	9301      	str	r3, [sp, #4]
 8004d9c:	f000 f870 	bl	8004e80 <_svfiprintf_r>
 8004da0:	2300      	movs	r3, #0
 8004da2:	9a02      	ldr	r2, [sp, #8]
 8004da4:	7013      	strb	r3, [r2, #0]
 8004da6:	b01c      	add	sp, #112	; 0x70
 8004da8:	bc08      	pop	{r3}
 8004daa:	b003      	add	sp, #12
 8004dac:	4718      	bx	r3
 8004dae:	46c0      	nop			; (mov r8, r8)
 8004db0:	7fffffff 	.word	0x7fffffff
 8004db4:	2000000c 	.word	0x2000000c
 8004db8:	ffff0208 	.word	0xffff0208

08004dbc <__ssputs_r>:
 8004dbc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004dbe:	688e      	ldr	r6, [r1, #8]
 8004dc0:	b085      	sub	sp, #20
 8004dc2:	0007      	movs	r7, r0
 8004dc4:	000c      	movs	r4, r1
 8004dc6:	9203      	str	r2, [sp, #12]
 8004dc8:	9301      	str	r3, [sp, #4]
 8004dca:	429e      	cmp	r6, r3
 8004dcc:	d83c      	bhi.n	8004e48 <__ssputs_r+0x8c>
 8004dce:	2390      	movs	r3, #144	; 0x90
 8004dd0:	898a      	ldrh	r2, [r1, #12]
 8004dd2:	00db      	lsls	r3, r3, #3
 8004dd4:	421a      	tst	r2, r3
 8004dd6:	d034      	beq.n	8004e42 <__ssputs_r+0x86>
 8004dd8:	6909      	ldr	r1, [r1, #16]
 8004dda:	6823      	ldr	r3, [r4, #0]
 8004ddc:	6960      	ldr	r0, [r4, #20]
 8004dde:	1a5b      	subs	r3, r3, r1
 8004de0:	9302      	str	r3, [sp, #8]
 8004de2:	2303      	movs	r3, #3
 8004de4:	4343      	muls	r3, r0
 8004de6:	0fdd      	lsrs	r5, r3, #31
 8004de8:	18ed      	adds	r5, r5, r3
 8004dea:	9b01      	ldr	r3, [sp, #4]
 8004dec:	9802      	ldr	r0, [sp, #8]
 8004dee:	3301      	adds	r3, #1
 8004df0:	181b      	adds	r3, r3, r0
 8004df2:	106d      	asrs	r5, r5, #1
 8004df4:	42ab      	cmp	r3, r5
 8004df6:	d900      	bls.n	8004dfa <__ssputs_r+0x3e>
 8004df8:	001d      	movs	r5, r3
 8004dfa:	0553      	lsls	r3, r2, #21
 8004dfc:	d532      	bpl.n	8004e64 <__ssputs_r+0xa8>
 8004dfe:	0029      	movs	r1, r5
 8004e00:	0038      	movs	r0, r7
 8004e02:	f000 fb53 	bl	80054ac <_malloc_r>
 8004e06:	1e06      	subs	r6, r0, #0
 8004e08:	d109      	bne.n	8004e1e <__ssputs_r+0x62>
 8004e0a:	230c      	movs	r3, #12
 8004e0c:	603b      	str	r3, [r7, #0]
 8004e0e:	2340      	movs	r3, #64	; 0x40
 8004e10:	2001      	movs	r0, #1
 8004e12:	89a2      	ldrh	r2, [r4, #12]
 8004e14:	4240      	negs	r0, r0
 8004e16:	4313      	orrs	r3, r2
 8004e18:	81a3      	strh	r3, [r4, #12]
 8004e1a:	b005      	add	sp, #20
 8004e1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004e1e:	9a02      	ldr	r2, [sp, #8]
 8004e20:	6921      	ldr	r1, [r4, #16]
 8004e22:	f000 faba 	bl	800539a <memcpy>
 8004e26:	89a3      	ldrh	r3, [r4, #12]
 8004e28:	4a14      	ldr	r2, [pc, #80]	; (8004e7c <__ssputs_r+0xc0>)
 8004e2a:	401a      	ands	r2, r3
 8004e2c:	2380      	movs	r3, #128	; 0x80
 8004e2e:	4313      	orrs	r3, r2
 8004e30:	81a3      	strh	r3, [r4, #12]
 8004e32:	9b02      	ldr	r3, [sp, #8]
 8004e34:	6126      	str	r6, [r4, #16]
 8004e36:	18f6      	adds	r6, r6, r3
 8004e38:	6026      	str	r6, [r4, #0]
 8004e3a:	6165      	str	r5, [r4, #20]
 8004e3c:	9e01      	ldr	r6, [sp, #4]
 8004e3e:	1aed      	subs	r5, r5, r3
 8004e40:	60a5      	str	r5, [r4, #8]
 8004e42:	9b01      	ldr	r3, [sp, #4]
 8004e44:	429e      	cmp	r6, r3
 8004e46:	d900      	bls.n	8004e4a <__ssputs_r+0x8e>
 8004e48:	9e01      	ldr	r6, [sp, #4]
 8004e4a:	0032      	movs	r2, r6
 8004e4c:	9903      	ldr	r1, [sp, #12]
 8004e4e:	6820      	ldr	r0, [r4, #0]
 8004e50:	f000 faac 	bl	80053ac <memmove>
 8004e54:	68a3      	ldr	r3, [r4, #8]
 8004e56:	2000      	movs	r0, #0
 8004e58:	1b9b      	subs	r3, r3, r6
 8004e5a:	60a3      	str	r3, [r4, #8]
 8004e5c:	6823      	ldr	r3, [r4, #0]
 8004e5e:	199e      	adds	r6, r3, r6
 8004e60:	6026      	str	r6, [r4, #0]
 8004e62:	e7da      	b.n	8004e1a <__ssputs_r+0x5e>
 8004e64:	002a      	movs	r2, r5
 8004e66:	0038      	movs	r0, r7
 8004e68:	f000 fb96 	bl	8005598 <_realloc_r>
 8004e6c:	1e06      	subs	r6, r0, #0
 8004e6e:	d1e0      	bne.n	8004e32 <__ssputs_r+0x76>
 8004e70:	0038      	movs	r0, r7
 8004e72:	6921      	ldr	r1, [r4, #16]
 8004e74:	f000 faae 	bl	80053d4 <_free_r>
 8004e78:	e7c7      	b.n	8004e0a <__ssputs_r+0x4e>
 8004e7a:	46c0      	nop			; (mov r8, r8)
 8004e7c:	fffffb7f 	.word	0xfffffb7f

08004e80 <_svfiprintf_r>:
 8004e80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004e82:	b0a1      	sub	sp, #132	; 0x84
 8004e84:	9003      	str	r0, [sp, #12]
 8004e86:	001d      	movs	r5, r3
 8004e88:	898b      	ldrh	r3, [r1, #12]
 8004e8a:	000f      	movs	r7, r1
 8004e8c:	0016      	movs	r6, r2
 8004e8e:	061b      	lsls	r3, r3, #24
 8004e90:	d511      	bpl.n	8004eb6 <_svfiprintf_r+0x36>
 8004e92:	690b      	ldr	r3, [r1, #16]
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d10e      	bne.n	8004eb6 <_svfiprintf_r+0x36>
 8004e98:	2140      	movs	r1, #64	; 0x40
 8004e9a:	f000 fb07 	bl	80054ac <_malloc_r>
 8004e9e:	6038      	str	r0, [r7, #0]
 8004ea0:	6138      	str	r0, [r7, #16]
 8004ea2:	2800      	cmp	r0, #0
 8004ea4:	d105      	bne.n	8004eb2 <_svfiprintf_r+0x32>
 8004ea6:	230c      	movs	r3, #12
 8004ea8:	9a03      	ldr	r2, [sp, #12]
 8004eaa:	3801      	subs	r0, #1
 8004eac:	6013      	str	r3, [r2, #0]
 8004eae:	b021      	add	sp, #132	; 0x84
 8004eb0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004eb2:	2340      	movs	r3, #64	; 0x40
 8004eb4:	617b      	str	r3, [r7, #20]
 8004eb6:	2300      	movs	r3, #0
 8004eb8:	ac08      	add	r4, sp, #32
 8004eba:	6163      	str	r3, [r4, #20]
 8004ebc:	3320      	adds	r3, #32
 8004ebe:	7663      	strb	r3, [r4, #25]
 8004ec0:	3310      	adds	r3, #16
 8004ec2:	76a3      	strb	r3, [r4, #26]
 8004ec4:	9507      	str	r5, [sp, #28]
 8004ec6:	0035      	movs	r5, r6
 8004ec8:	782b      	ldrb	r3, [r5, #0]
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d001      	beq.n	8004ed2 <_svfiprintf_r+0x52>
 8004ece:	2b25      	cmp	r3, #37	; 0x25
 8004ed0:	d147      	bne.n	8004f62 <_svfiprintf_r+0xe2>
 8004ed2:	1bab      	subs	r3, r5, r6
 8004ed4:	9305      	str	r3, [sp, #20]
 8004ed6:	42b5      	cmp	r5, r6
 8004ed8:	d00c      	beq.n	8004ef4 <_svfiprintf_r+0x74>
 8004eda:	0032      	movs	r2, r6
 8004edc:	0039      	movs	r1, r7
 8004ede:	9803      	ldr	r0, [sp, #12]
 8004ee0:	f7ff ff6c 	bl	8004dbc <__ssputs_r>
 8004ee4:	1c43      	adds	r3, r0, #1
 8004ee6:	d100      	bne.n	8004eea <_svfiprintf_r+0x6a>
 8004ee8:	e0ae      	b.n	8005048 <_svfiprintf_r+0x1c8>
 8004eea:	6962      	ldr	r2, [r4, #20]
 8004eec:	9b05      	ldr	r3, [sp, #20]
 8004eee:	4694      	mov	ip, r2
 8004ef0:	4463      	add	r3, ip
 8004ef2:	6163      	str	r3, [r4, #20]
 8004ef4:	782b      	ldrb	r3, [r5, #0]
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d100      	bne.n	8004efc <_svfiprintf_r+0x7c>
 8004efa:	e0a5      	b.n	8005048 <_svfiprintf_r+0x1c8>
 8004efc:	2201      	movs	r2, #1
 8004efe:	2300      	movs	r3, #0
 8004f00:	4252      	negs	r2, r2
 8004f02:	6062      	str	r2, [r4, #4]
 8004f04:	a904      	add	r1, sp, #16
 8004f06:	3254      	adds	r2, #84	; 0x54
 8004f08:	1852      	adds	r2, r2, r1
 8004f0a:	1c6e      	adds	r6, r5, #1
 8004f0c:	6023      	str	r3, [r4, #0]
 8004f0e:	60e3      	str	r3, [r4, #12]
 8004f10:	60a3      	str	r3, [r4, #8]
 8004f12:	7013      	strb	r3, [r2, #0]
 8004f14:	65a3      	str	r3, [r4, #88]	; 0x58
 8004f16:	2205      	movs	r2, #5
 8004f18:	7831      	ldrb	r1, [r6, #0]
 8004f1a:	4854      	ldr	r0, [pc, #336]	; (800506c <_svfiprintf_r+0x1ec>)
 8004f1c:	f000 fa32 	bl	8005384 <memchr>
 8004f20:	1c75      	adds	r5, r6, #1
 8004f22:	2800      	cmp	r0, #0
 8004f24:	d11f      	bne.n	8004f66 <_svfiprintf_r+0xe6>
 8004f26:	6822      	ldr	r2, [r4, #0]
 8004f28:	06d3      	lsls	r3, r2, #27
 8004f2a:	d504      	bpl.n	8004f36 <_svfiprintf_r+0xb6>
 8004f2c:	2353      	movs	r3, #83	; 0x53
 8004f2e:	a904      	add	r1, sp, #16
 8004f30:	185b      	adds	r3, r3, r1
 8004f32:	2120      	movs	r1, #32
 8004f34:	7019      	strb	r1, [r3, #0]
 8004f36:	0713      	lsls	r3, r2, #28
 8004f38:	d504      	bpl.n	8004f44 <_svfiprintf_r+0xc4>
 8004f3a:	2353      	movs	r3, #83	; 0x53
 8004f3c:	a904      	add	r1, sp, #16
 8004f3e:	185b      	adds	r3, r3, r1
 8004f40:	212b      	movs	r1, #43	; 0x2b
 8004f42:	7019      	strb	r1, [r3, #0]
 8004f44:	7833      	ldrb	r3, [r6, #0]
 8004f46:	2b2a      	cmp	r3, #42	; 0x2a
 8004f48:	d016      	beq.n	8004f78 <_svfiprintf_r+0xf8>
 8004f4a:	0035      	movs	r5, r6
 8004f4c:	2100      	movs	r1, #0
 8004f4e:	200a      	movs	r0, #10
 8004f50:	68e3      	ldr	r3, [r4, #12]
 8004f52:	782a      	ldrb	r2, [r5, #0]
 8004f54:	1c6e      	adds	r6, r5, #1
 8004f56:	3a30      	subs	r2, #48	; 0x30
 8004f58:	2a09      	cmp	r2, #9
 8004f5a:	d94e      	bls.n	8004ffa <_svfiprintf_r+0x17a>
 8004f5c:	2900      	cmp	r1, #0
 8004f5e:	d111      	bne.n	8004f84 <_svfiprintf_r+0x104>
 8004f60:	e017      	b.n	8004f92 <_svfiprintf_r+0x112>
 8004f62:	3501      	adds	r5, #1
 8004f64:	e7b0      	b.n	8004ec8 <_svfiprintf_r+0x48>
 8004f66:	4b41      	ldr	r3, [pc, #260]	; (800506c <_svfiprintf_r+0x1ec>)
 8004f68:	6822      	ldr	r2, [r4, #0]
 8004f6a:	1ac0      	subs	r0, r0, r3
 8004f6c:	2301      	movs	r3, #1
 8004f6e:	4083      	lsls	r3, r0
 8004f70:	4313      	orrs	r3, r2
 8004f72:	002e      	movs	r6, r5
 8004f74:	6023      	str	r3, [r4, #0]
 8004f76:	e7ce      	b.n	8004f16 <_svfiprintf_r+0x96>
 8004f78:	9b07      	ldr	r3, [sp, #28]
 8004f7a:	1d19      	adds	r1, r3, #4
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	9107      	str	r1, [sp, #28]
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	db01      	blt.n	8004f88 <_svfiprintf_r+0x108>
 8004f84:	930b      	str	r3, [sp, #44]	; 0x2c
 8004f86:	e004      	b.n	8004f92 <_svfiprintf_r+0x112>
 8004f88:	425b      	negs	r3, r3
 8004f8a:	60e3      	str	r3, [r4, #12]
 8004f8c:	2302      	movs	r3, #2
 8004f8e:	4313      	orrs	r3, r2
 8004f90:	6023      	str	r3, [r4, #0]
 8004f92:	782b      	ldrb	r3, [r5, #0]
 8004f94:	2b2e      	cmp	r3, #46	; 0x2e
 8004f96:	d10a      	bne.n	8004fae <_svfiprintf_r+0x12e>
 8004f98:	786b      	ldrb	r3, [r5, #1]
 8004f9a:	2b2a      	cmp	r3, #42	; 0x2a
 8004f9c:	d135      	bne.n	800500a <_svfiprintf_r+0x18a>
 8004f9e:	9b07      	ldr	r3, [sp, #28]
 8004fa0:	3502      	adds	r5, #2
 8004fa2:	1d1a      	adds	r2, r3, #4
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	9207      	str	r2, [sp, #28]
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	db2b      	blt.n	8005004 <_svfiprintf_r+0x184>
 8004fac:	9309      	str	r3, [sp, #36]	; 0x24
 8004fae:	4e30      	ldr	r6, [pc, #192]	; (8005070 <_svfiprintf_r+0x1f0>)
 8004fb0:	2203      	movs	r2, #3
 8004fb2:	0030      	movs	r0, r6
 8004fb4:	7829      	ldrb	r1, [r5, #0]
 8004fb6:	f000 f9e5 	bl	8005384 <memchr>
 8004fba:	2800      	cmp	r0, #0
 8004fbc:	d006      	beq.n	8004fcc <_svfiprintf_r+0x14c>
 8004fbe:	2340      	movs	r3, #64	; 0x40
 8004fc0:	1b80      	subs	r0, r0, r6
 8004fc2:	4083      	lsls	r3, r0
 8004fc4:	6822      	ldr	r2, [r4, #0]
 8004fc6:	3501      	adds	r5, #1
 8004fc8:	4313      	orrs	r3, r2
 8004fca:	6023      	str	r3, [r4, #0]
 8004fcc:	7829      	ldrb	r1, [r5, #0]
 8004fce:	2206      	movs	r2, #6
 8004fd0:	4828      	ldr	r0, [pc, #160]	; (8005074 <_svfiprintf_r+0x1f4>)
 8004fd2:	1c6e      	adds	r6, r5, #1
 8004fd4:	7621      	strb	r1, [r4, #24]
 8004fd6:	f000 f9d5 	bl	8005384 <memchr>
 8004fda:	2800      	cmp	r0, #0
 8004fdc:	d03c      	beq.n	8005058 <_svfiprintf_r+0x1d8>
 8004fde:	4b26      	ldr	r3, [pc, #152]	; (8005078 <_svfiprintf_r+0x1f8>)
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d125      	bne.n	8005030 <_svfiprintf_r+0x1b0>
 8004fe4:	2207      	movs	r2, #7
 8004fe6:	9b07      	ldr	r3, [sp, #28]
 8004fe8:	3307      	adds	r3, #7
 8004fea:	4393      	bics	r3, r2
 8004fec:	3308      	adds	r3, #8
 8004fee:	9307      	str	r3, [sp, #28]
 8004ff0:	6963      	ldr	r3, [r4, #20]
 8004ff2:	9a04      	ldr	r2, [sp, #16]
 8004ff4:	189b      	adds	r3, r3, r2
 8004ff6:	6163      	str	r3, [r4, #20]
 8004ff8:	e765      	b.n	8004ec6 <_svfiprintf_r+0x46>
 8004ffa:	4343      	muls	r3, r0
 8004ffc:	0035      	movs	r5, r6
 8004ffe:	2101      	movs	r1, #1
 8005000:	189b      	adds	r3, r3, r2
 8005002:	e7a6      	b.n	8004f52 <_svfiprintf_r+0xd2>
 8005004:	2301      	movs	r3, #1
 8005006:	425b      	negs	r3, r3
 8005008:	e7d0      	b.n	8004fac <_svfiprintf_r+0x12c>
 800500a:	2300      	movs	r3, #0
 800500c:	200a      	movs	r0, #10
 800500e:	001a      	movs	r2, r3
 8005010:	3501      	adds	r5, #1
 8005012:	6063      	str	r3, [r4, #4]
 8005014:	7829      	ldrb	r1, [r5, #0]
 8005016:	1c6e      	adds	r6, r5, #1
 8005018:	3930      	subs	r1, #48	; 0x30
 800501a:	2909      	cmp	r1, #9
 800501c:	d903      	bls.n	8005026 <_svfiprintf_r+0x1a6>
 800501e:	2b00      	cmp	r3, #0
 8005020:	d0c5      	beq.n	8004fae <_svfiprintf_r+0x12e>
 8005022:	9209      	str	r2, [sp, #36]	; 0x24
 8005024:	e7c3      	b.n	8004fae <_svfiprintf_r+0x12e>
 8005026:	4342      	muls	r2, r0
 8005028:	0035      	movs	r5, r6
 800502a:	2301      	movs	r3, #1
 800502c:	1852      	adds	r2, r2, r1
 800502e:	e7f1      	b.n	8005014 <_svfiprintf_r+0x194>
 8005030:	ab07      	add	r3, sp, #28
 8005032:	9300      	str	r3, [sp, #0]
 8005034:	003a      	movs	r2, r7
 8005036:	0021      	movs	r1, r4
 8005038:	4b10      	ldr	r3, [pc, #64]	; (800507c <_svfiprintf_r+0x1fc>)
 800503a:	9803      	ldr	r0, [sp, #12]
 800503c:	e000      	b.n	8005040 <_svfiprintf_r+0x1c0>
 800503e:	bf00      	nop
 8005040:	9004      	str	r0, [sp, #16]
 8005042:	9b04      	ldr	r3, [sp, #16]
 8005044:	3301      	adds	r3, #1
 8005046:	d1d3      	bne.n	8004ff0 <_svfiprintf_r+0x170>
 8005048:	89bb      	ldrh	r3, [r7, #12]
 800504a:	980d      	ldr	r0, [sp, #52]	; 0x34
 800504c:	065b      	lsls	r3, r3, #25
 800504e:	d400      	bmi.n	8005052 <_svfiprintf_r+0x1d2>
 8005050:	e72d      	b.n	8004eae <_svfiprintf_r+0x2e>
 8005052:	2001      	movs	r0, #1
 8005054:	4240      	negs	r0, r0
 8005056:	e72a      	b.n	8004eae <_svfiprintf_r+0x2e>
 8005058:	ab07      	add	r3, sp, #28
 800505a:	9300      	str	r3, [sp, #0]
 800505c:	003a      	movs	r2, r7
 800505e:	0021      	movs	r1, r4
 8005060:	4b06      	ldr	r3, [pc, #24]	; (800507c <_svfiprintf_r+0x1fc>)
 8005062:	9803      	ldr	r0, [sp, #12]
 8005064:	f000 f87c 	bl	8005160 <_printf_i>
 8005068:	e7ea      	b.n	8005040 <_svfiprintf_r+0x1c0>
 800506a:	46c0      	nop			; (mov r8, r8)
 800506c:	08005724 	.word	0x08005724
 8005070:	0800572a 	.word	0x0800572a
 8005074:	0800572e 	.word	0x0800572e
 8005078:	00000000 	.word	0x00000000
 800507c:	08004dbd 	.word	0x08004dbd

08005080 <_printf_common>:
 8005080:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005082:	0015      	movs	r5, r2
 8005084:	9301      	str	r3, [sp, #4]
 8005086:	688a      	ldr	r2, [r1, #8]
 8005088:	690b      	ldr	r3, [r1, #16]
 800508a:	000c      	movs	r4, r1
 800508c:	9000      	str	r0, [sp, #0]
 800508e:	4293      	cmp	r3, r2
 8005090:	da00      	bge.n	8005094 <_printf_common+0x14>
 8005092:	0013      	movs	r3, r2
 8005094:	0022      	movs	r2, r4
 8005096:	602b      	str	r3, [r5, #0]
 8005098:	3243      	adds	r2, #67	; 0x43
 800509a:	7812      	ldrb	r2, [r2, #0]
 800509c:	2a00      	cmp	r2, #0
 800509e:	d001      	beq.n	80050a4 <_printf_common+0x24>
 80050a0:	3301      	adds	r3, #1
 80050a2:	602b      	str	r3, [r5, #0]
 80050a4:	6823      	ldr	r3, [r4, #0]
 80050a6:	069b      	lsls	r3, r3, #26
 80050a8:	d502      	bpl.n	80050b0 <_printf_common+0x30>
 80050aa:	682b      	ldr	r3, [r5, #0]
 80050ac:	3302      	adds	r3, #2
 80050ae:	602b      	str	r3, [r5, #0]
 80050b0:	6822      	ldr	r2, [r4, #0]
 80050b2:	2306      	movs	r3, #6
 80050b4:	0017      	movs	r7, r2
 80050b6:	401f      	ands	r7, r3
 80050b8:	421a      	tst	r2, r3
 80050ba:	d027      	beq.n	800510c <_printf_common+0x8c>
 80050bc:	0023      	movs	r3, r4
 80050be:	3343      	adds	r3, #67	; 0x43
 80050c0:	781b      	ldrb	r3, [r3, #0]
 80050c2:	1e5a      	subs	r2, r3, #1
 80050c4:	4193      	sbcs	r3, r2
 80050c6:	6822      	ldr	r2, [r4, #0]
 80050c8:	0692      	lsls	r2, r2, #26
 80050ca:	d430      	bmi.n	800512e <_printf_common+0xae>
 80050cc:	0022      	movs	r2, r4
 80050ce:	9901      	ldr	r1, [sp, #4]
 80050d0:	9800      	ldr	r0, [sp, #0]
 80050d2:	9e08      	ldr	r6, [sp, #32]
 80050d4:	3243      	adds	r2, #67	; 0x43
 80050d6:	47b0      	blx	r6
 80050d8:	1c43      	adds	r3, r0, #1
 80050da:	d025      	beq.n	8005128 <_printf_common+0xa8>
 80050dc:	2306      	movs	r3, #6
 80050de:	6820      	ldr	r0, [r4, #0]
 80050e0:	682a      	ldr	r2, [r5, #0]
 80050e2:	68e1      	ldr	r1, [r4, #12]
 80050e4:	2500      	movs	r5, #0
 80050e6:	4003      	ands	r3, r0
 80050e8:	2b04      	cmp	r3, #4
 80050ea:	d103      	bne.n	80050f4 <_printf_common+0x74>
 80050ec:	1a8d      	subs	r5, r1, r2
 80050ee:	43eb      	mvns	r3, r5
 80050f0:	17db      	asrs	r3, r3, #31
 80050f2:	401d      	ands	r5, r3
 80050f4:	68a3      	ldr	r3, [r4, #8]
 80050f6:	6922      	ldr	r2, [r4, #16]
 80050f8:	4293      	cmp	r3, r2
 80050fa:	dd01      	ble.n	8005100 <_printf_common+0x80>
 80050fc:	1a9b      	subs	r3, r3, r2
 80050fe:	18ed      	adds	r5, r5, r3
 8005100:	2700      	movs	r7, #0
 8005102:	42bd      	cmp	r5, r7
 8005104:	d120      	bne.n	8005148 <_printf_common+0xc8>
 8005106:	2000      	movs	r0, #0
 8005108:	e010      	b.n	800512c <_printf_common+0xac>
 800510a:	3701      	adds	r7, #1
 800510c:	68e3      	ldr	r3, [r4, #12]
 800510e:	682a      	ldr	r2, [r5, #0]
 8005110:	1a9b      	subs	r3, r3, r2
 8005112:	42bb      	cmp	r3, r7
 8005114:	ddd2      	ble.n	80050bc <_printf_common+0x3c>
 8005116:	0022      	movs	r2, r4
 8005118:	2301      	movs	r3, #1
 800511a:	9901      	ldr	r1, [sp, #4]
 800511c:	9800      	ldr	r0, [sp, #0]
 800511e:	9e08      	ldr	r6, [sp, #32]
 8005120:	3219      	adds	r2, #25
 8005122:	47b0      	blx	r6
 8005124:	1c43      	adds	r3, r0, #1
 8005126:	d1f0      	bne.n	800510a <_printf_common+0x8a>
 8005128:	2001      	movs	r0, #1
 800512a:	4240      	negs	r0, r0
 800512c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800512e:	2030      	movs	r0, #48	; 0x30
 8005130:	18e1      	adds	r1, r4, r3
 8005132:	3143      	adds	r1, #67	; 0x43
 8005134:	7008      	strb	r0, [r1, #0]
 8005136:	0021      	movs	r1, r4
 8005138:	1c5a      	adds	r2, r3, #1
 800513a:	3145      	adds	r1, #69	; 0x45
 800513c:	7809      	ldrb	r1, [r1, #0]
 800513e:	18a2      	adds	r2, r4, r2
 8005140:	3243      	adds	r2, #67	; 0x43
 8005142:	3302      	adds	r3, #2
 8005144:	7011      	strb	r1, [r2, #0]
 8005146:	e7c1      	b.n	80050cc <_printf_common+0x4c>
 8005148:	0022      	movs	r2, r4
 800514a:	2301      	movs	r3, #1
 800514c:	9901      	ldr	r1, [sp, #4]
 800514e:	9800      	ldr	r0, [sp, #0]
 8005150:	9e08      	ldr	r6, [sp, #32]
 8005152:	321a      	adds	r2, #26
 8005154:	47b0      	blx	r6
 8005156:	1c43      	adds	r3, r0, #1
 8005158:	d0e6      	beq.n	8005128 <_printf_common+0xa8>
 800515a:	3701      	adds	r7, #1
 800515c:	e7d1      	b.n	8005102 <_printf_common+0x82>
	...

08005160 <_printf_i>:
 8005160:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005162:	b08b      	sub	sp, #44	; 0x2c
 8005164:	9206      	str	r2, [sp, #24]
 8005166:	000a      	movs	r2, r1
 8005168:	3243      	adds	r2, #67	; 0x43
 800516a:	9307      	str	r3, [sp, #28]
 800516c:	9005      	str	r0, [sp, #20]
 800516e:	9204      	str	r2, [sp, #16]
 8005170:	7e0a      	ldrb	r2, [r1, #24]
 8005172:	000c      	movs	r4, r1
 8005174:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005176:	2a78      	cmp	r2, #120	; 0x78
 8005178:	d807      	bhi.n	800518a <_printf_i+0x2a>
 800517a:	2a62      	cmp	r2, #98	; 0x62
 800517c:	d809      	bhi.n	8005192 <_printf_i+0x32>
 800517e:	2a00      	cmp	r2, #0
 8005180:	d100      	bne.n	8005184 <_printf_i+0x24>
 8005182:	e0c1      	b.n	8005308 <_printf_i+0x1a8>
 8005184:	2a58      	cmp	r2, #88	; 0x58
 8005186:	d100      	bne.n	800518a <_printf_i+0x2a>
 8005188:	e08c      	b.n	80052a4 <_printf_i+0x144>
 800518a:	0026      	movs	r6, r4
 800518c:	3642      	adds	r6, #66	; 0x42
 800518e:	7032      	strb	r2, [r6, #0]
 8005190:	e022      	b.n	80051d8 <_printf_i+0x78>
 8005192:	0010      	movs	r0, r2
 8005194:	3863      	subs	r0, #99	; 0x63
 8005196:	2815      	cmp	r0, #21
 8005198:	d8f7      	bhi.n	800518a <_printf_i+0x2a>
 800519a:	f7fa ffbd 	bl	8000118 <__gnu_thumb1_case_shi>
 800519e:	0016      	.short	0x0016
 80051a0:	fff6001f 	.word	0xfff6001f
 80051a4:	fff6fff6 	.word	0xfff6fff6
 80051a8:	001ffff6 	.word	0x001ffff6
 80051ac:	fff6fff6 	.word	0xfff6fff6
 80051b0:	fff6fff6 	.word	0xfff6fff6
 80051b4:	003600a8 	.word	0x003600a8
 80051b8:	fff6009a 	.word	0xfff6009a
 80051bc:	00b9fff6 	.word	0x00b9fff6
 80051c0:	0036fff6 	.word	0x0036fff6
 80051c4:	fff6fff6 	.word	0xfff6fff6
 80051c8:	009e      	.short	0x009e
 80051ca:	0026      	movs	r6, r4
 80051cc:	681a      	ldr	r2, [r3, #0]
 80051ce:	3642      	adds	r6, #66	; 0x42
 80051d0:	1d11      	adds	r1, r2, #4
 80051d2:	6019      	str	r1, [r3, #0]
 80051d4:	6813      	ldr	r3, [r2, #0]
 80051d6:	7033      	strb	r3, [r6, #0]
 80051d8:	2301      	movs	r3, #1
 80051da:	e0a7      	b.n	800532c <_printf_i+0x1cc>
 80051dc:	6808      	ldr	r0, [r1, #0]
 80051de:	6819      	ldr	r1, [r3, #0]
 80051e0:	1d0a      	adds	r2, r1, #4
 80051e2:	0605      	lsls	r5, r0, #24
 80051e4:	d50b      	bpl.n	80051fe <_printf_i+0x9e>
 80051e6:	680d      	ldr	r5, [r1, #0]
 80051e8:	601a      	str	r2, [r3, #0]
 80051ea:	2d00      	cmp	r5, #0
 80051ec:	da03      	bge.n	80051f6 <_printf_i+0x96>
 80051ee:	232d      	movs	r3, #45	; 0x2d
 80051f0:	9a04      	ldr	r2, [sp, #16]
 80051f2:	426d      	negs	r5, r5
 80051f4:	7013      	strb	r3, [r2, #0]
 80051f6:	4b61      	ldr	r3, [pc, #388]	; (800537c <_printf_i+0x21c>)
 80051f8:	270a      	movs	r7, #10
 80051fa:	9303      	str	r3, [sp, #12]
 80051fc:	e01b      	b.n	8005236 <_printf_i+0xd6>
 80051fe:	680d      	ldr	r5, [r1, #0]
 8005200:	601a      	str	r2, [r3, #0]
 8005202:	0641      	lsls	r1, r0, #25
 8005204:	d5f1      	bpl.n	80051ea <_printf_i+0x8a>
 8005206:	b22d      	sxth	r5, r5
 8005208:	e7ef      	b.n	80051ea <_printf_i+0x8a>
 800520a:	680d      	ldr	r5, [r1, #0]
 800520c:	6819      	ldr	r1, [r3, #0]
 800520e:	1d08      	adds	r0, r1, #4
 8005210:	6018      	str	r0, [r3, #0]
 8005212:	062e      	lsls	r6, r5, #24
 8005214:	d501      	bpl.n	800521a <_printf_i+0xba>
 8005216:	680d      	ldr	r5, [r1, #0]
 8005218:	e003      	b.n	8005222 <_printf_i+0xc2>
 800521a:	066d      	lsls	r5, r5, #25
 800521c:	d5fb      	bpl.n	8005216 <_printf_i+0xb6>
 800521e:	680d      	ldr	r5, [r1, #0]
 8005220:	b2ad      	uxth	r5, r5
 8005222:	4b56      	ldr	r3, [pc, #344]	; (800537c <_printf_i+0x21c>)
 8005224:	2708      	movs	r7, #8
 8005226:	9303      	str	r3, [sp, #12]
 8005228:	2a6f      	cmp	r2, #111	; 0x6f
 800522a:	d000      	beq.n	800522e <_printf_i+0xce>
 800522c:	3702      	adds	r7, #2
 800522e:	0023      	movs	r3, r4
 8005230:	2200      	movs	r2, #0
 8005232:	3343      	adds	r3, #67	; 0x43
 8005234:	701a      	strb	r2, [r3, #0]
 8005236:	6863      	ldr	r3, [r4, #4]
 8005238:	60a3      	str	r3, [r4, #8]
 800523a:	2b00      	cmp	r3, #0
 800523c:	db03      	blt.n	8005246 <_printf_i+0xe6>
 800523e:	2204      	movs	r2, #4
 8005240:	6821      	ldr	r1, [r4, #0]
 8005242:	4391      	bics	r1, r2
 8005244:	6021      	str	r1, [r4, #0]
 8005246:	2d00      	cmp	r5, #0
 8005248:	d102      	bne.n	8005250 <_printf_i+0xf0>
 800524a:	9e04      	ldr	r6, [sp, #16]
 800524c:	2b00      	cmp	r3, #0
 800524e:	d00c      	beq.n	800526a <_printf_i+0x10a>
 8005250:	9e04      	ldr	r6, [sp, #16]
 8005252:	0028      	movs	r0, r5
 8005254:	0039      	movs	r1, r7
 8005256:	f7fa ffef 	bl	8000238 <__aeabi_uidivmod>
 800525a:	9b03      	ldr	r3, [sp, #12]
 800525c:	3e01      	subs	r6, #1
 800525e:	5c5b      	ldrb	r3, [r3, r1]
 8005260:	7033      	strb	r3, [r6, #0]
 8005262:	002b      	movs	r3, r5
 8005264:	0005      	movs	r5, r0
 8005266:	429f      	cmp	r7, r3
 8005268:	d9f3      	bls.n	8005252 <_printf_i+0xf2>
 800526a:	2f08      	cmp	r7, #8
 800526c:	d109      	bne.n	8005282 <_printf_i+0x122>
 800526e:	6823      	ldr	r3, [r4, #0]
 8005270:	07db      	lsls	r3, r3, #31
 8005272:	d506      	bpl.n	8005282 <_printf_i+0x122>
 8005274:	6863      	ldr	r3, [r4, #4]
 8005276:	6922      	ldr	r2, [r4, #16]
 8005278:	4293      	cmp	r3, r2
 800527a:	dc02      	bgt.n	8005282 <_printf_i+0x122>
 800527c:	2330      	movs	r3, #48	; 0x30
 800527e:	3e01      	subs	r6, #1
 8005280:	7033      	strb	r3, [r6, #0]
 8005282:	9b04      	ldr	r3, [sp, #16]
 8005284:	1b9b      	subs	r3, r3, r6
 8005286:	6123      	str	r3, [r4, #16]
 8005288:	9b07      	ldr	r3, [sp, #28]
 800528a:	0021      	movs	r1, r4
 800528c:	9300      	str	r3, [sp, #0]
 800528e:	9805      	ldr	r0, [sp, #20]
 8005290:	9b06      	ldr	r3, [sp, #24]
 8005292:	aa09      	add	r2, sp, #36	; 0x24
 8005294:	f7ff fef4 	bl	8005080 <_printf_common>
 8005298:	1c43      	adds	r3, r0, #1
 800529a:	d14c      	bne.n	8005336 <_printf_i+0x1d6>
 800529c:	2001      	movs	r0, #1
 800529e:	4240      	negs	r0, r0
 80052a0:	b00b      	add	sp, #44	; 0x2c
 80052a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80052a4:	3145      	adds	r1, #69	; 0x45
 80052a6:	700a      	strb	r2, [r1, #0]
 80052a8:	4a34      	ldr	r2, [pc, #208]	; (800537c <_printf_i+0x21c>)
 80052aa:	9203      	str	r2, [sp, #12]
 80052ac:	681a      	ldr	r2, [r3, #0]
 80052ae:	6821      	ldr	r1, [r4, #0]
 80052b0:	ca20      	ldmia	r2!, {r5}
 80052b2:	601a      	str	r2, [r3, #0]
 80052b4:	0608      	lsls	r0, r1, #24
 80052b6:	d516      	bpl.n	80052e6 <_printf_i+0x186>
 80052b8:	07cb      	lsls	r3, r1, #31
 80052ba:	d502      	bpl.n	80052c2 <_printf_i+0x162>
 80052bc:	2320      	movs	r3, #32
 80052be:	4319      	orrs	r1, r3
 80052c0:	6021      	str	r1, [r4, #0]
 80052c2:	2710      	movs	r7, #16
 80052c4:	2d00      	cmp	r5, #0
 80052c6:	d1b2      	bne.n	800522e <_printf_i+0xce>
 80052c8:	2320      	movs	r3, #32
 80052ca:	6822      	ldr	r2, [r4, #0]
 80052cc:	439a      	bics	r2, r3
 80052ce:	6022      	str	r2, [r4, #0]
 80052d0:	e7ad      	b.n	800522e <_printf_i+0xce>
 80052d2:	2220      	movs	r2, #32
 80052d4:	6809      	ldr	r1, [r1, #0]
 80052d6:	430a      	orrs	r2, r1
 80052d8:	6022      	str	r2, [r4, #0]
 80052da:	0022      	movs	r2, r4
 80052dc:	2178      	movs	r1, #120	; 0x78
 80052de:	3245      	adds	r2, #69	; 0x45
 80052e0:	7011      	strb	r1, [r2, #0]
 80052e2:	4a27      	ldr	r2, [pc, #156]	; (8005380 <_printf_i+0x220>)
 80052e4:	e7e1      	b.n	80052aa <_printf_i+0x14a>
 80052e6:	0648      	lsls	r0, r1, #25
 80052e8:	d5e6      	bpl.n	80052b8 <_printf_i+0x158>
 80052ea:	b2ad      	uxth	r5, r5
 80052ec:	e7e4      	b.n	80052b8 <_printf_i+0x158>
 80052ee:	681a      	ldr	r2, [r3, #0]
 80052f0:	680d      	ldr	r5, [r1, #0]
 80052f2:	1d10      	adds	r0, r2, #4
 80052f4:	6949      	ldr	r1, [r1, #20]
 80052f6:	6018      	str	r0, [r3, #0]
 80052f8:	6813      	ldr	r3, [r2, #0]
 80052fa:	062e      	lsls	r6, r5, #24
 80052fc:	d501      	bpl.n	8005302 <_printf_i+0x1a2>
 80052fe:	6019      	str	r1, [r3, #0]
 8005300:	e002      	b.n	8005308 <_printf_i+0x1a8>
 8005302:	066d      	lsls	r5, r5, #25
 8005304:	d5fb      	bpl.n	80052fe <_printf_i+0x19e>
 8005306:	8019      	strh	r1, [r3, #0]
 8005308:	2300      	movs	r3, #0
 800530a:	9e04      	ldr	r6, [sp, #16]
 800530c:	6123      	str	r3, [r4, #16]
 800530e:	e7bb      	b.n	8005288 <_printf_i+0x128>
 8005310:	681a      	ldr	r2, [r3, #0]
 8005312:	1d11      	adds	r1, r2, #4
 8005314:	6019      	str	r1, [r3, #0]
 8005316:	6816      	ldr	r6, [r2, #0]
 8005318:	2100      	movs	r1, #0
 800531a:	0030      	movs	r0, r6
 800531c:	6862      	ldr	r2, [r4, #4]
 800531e:	f000 f831 	bl	8005384 <memchr>
 8005322:	2800      	cmp	r0, #0
 8005324:	d001      	beq.n	800532a <_printf_i+0x1ca>
 8005326:	1b80      	subs	r0, r0, r6
 8005328:	6060      	str	r0, [r4, #4]
 800532a:	6863      	ldr	r3, [r4, #4]
 800532c:	6123      	str	r3, [r4, #16]
 800532e:	2300      	movs	r3, #0
 8005330:	9a04      	ldr	r2, [sp, #16]
 8005332:	7013      	strb	r3, [r2, #0]
 8005334:	e7a8      	b.n	8005288 <_printf_i+0x128>
 8005336:	6923      	ldr	r3, [r4, #16]
 8005338:	0032      	movs	r2, r6
 800533a:	9906      	ldr	r1, [sp, #24]
 800533c:	9805      	ldr	r0, [sp, #20]
 800533e:	9d07      	ldr	r5, [sp, #28]
 8005340:	47a8      	blx	r5
 8005342:	1c43      	adds	r3, r0, #1
 8005344:	d0aa      	beq.n	800529c <_printf_i+0x13c>
 8005346:	6823      	ldr	r3, [r4, #0]
 8005348:	079b      	lsls	r3, r3, #30
 800534a:	d415      	bmi.n	8005378 <_printf_i+0x218>
 800534c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800534e:	68e0      	ldr	r0, [r4, #12]
 8005350:	4298      	cmp	r0, r3
 8005352:	daa5      	bge.n	80052a0 <_printf_i+0x140>
 8005354:	0018      	movs	r0, r3
 8005356:	e7a3      	b.n	80052a0 <_printf_i+0x140>
 8005358:	0022      	movs	r2, r4
 800535a:	2301      	movs	r3, #1
 800535c:	9906      	ldr	r1, [sp, #24]
 800535e:	9805      	ldr	r0, [sp, #20]
 8005360:	9e07      	ldr	r6, [sp, #28]
 8005362:	3219      	adds	r2, #25
 8005364:	47b0      	blx	r6
 8005366:	1c43      	adds	r3, r0, #1
 8005368:	d098      	beq.n	800529c <_printf_i+0x13c>
 800536a:	3501      	adds	r5, #1
 800536c:	68e3      	ldr	r3, [r4, #12]
 800536e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005370:	1a9b      	subs	r3, r3, r2
 8005372:	42ab      	cmp	r3, r5
 8005374:	dcf0      	bgt.n	8005358 <_printf_i+0x1f8>
 8005376:	e7e9      	b.n	800534c <_printf_i+0x1ec>
 8005378:	2500      	movs	r5, #0
 800537a:	e7f7      	b.n	800536c <_printf_i+0x20c>
 800537c:	08005735 	.word	0x08005735
 8005380:	08005746 	.word	0x08005746

08005384 <memchr>:
 8005384:	b2c9      	uxtb	r1, r1
 8005386:	1882      	adds	r2, r0, r2
 8005388:	4290      	cmp	r0, r2
 800538a:	d101      	bne.n	8005390 <memchr+0xc>
 800538c:	2000      	movs	r0, #0
 800538e:	4770      	bx	lr
 8005390:	7803      	ldrb	r3, [r0, #0]
 8005392:	428b      	cmp	r3, r1
 8005394:	d0fb      	beq.n	800538e <memchr+0xa>
 8005396:	3001      	adds	r0, #1
 8005398:	e7f6      	b.n	8005388 <memchr+0x4>

0800539a <memcpy>:
 800539a:	2300      	movs	r3, #0
 800539c:	b510      	push	{r4, lr}
 800539e:	429a      	cmp	r2, r3
 80053a0:	d100      	bne.n	80053a4 <memcpy+0xa>
 80053a2:	bd10      	pop	{r4, pc}
 80053a4:	5ccc      	ldrb	r4, [r1, r3]
 80053a6:	54c4      	strb	r4, [r0, r3]
 80053a8:	3301      	adds	r3, #1
 80053aa:	e7f8      	b.n	800539e <memcpy+0x4>

080053ac <memmove>:
 80053ac:	b510      	push	{r4, lr}
 80053ae:	4288      	cmp	r0, r1
 80053b0:	d902      	bls.n	80053b8 <memmove+0xc>
 80053b2:	188b      	adds	r3, r1, r2
 80053b4:	4298      	cmp	r0, r3
 80053b6:	d303      	bcc.n	80053c0 <memmove+0x14>
 80053b8:	2300      	movs	r3, #0
 80053ba:	e007      	b.n	80053cc <memmove+0x20>
 80053bc:	5c8b      	ldrb	r3, [r1, r2]
 80053be:	5483      	strb	r3, [r0, r2]
 80053c0:	3a01      	subs	r2, #1
 80053c2:	d2fb      	bcs.n	80053bc <memmove+0x10>
 80053c4:	bd10      	pop	{r4, pc}
 80053c6:	5ccc      	ldrb	r4, [r1, r3]
 80053c8:	54c4      	strb	r4, [r0, r3]
 80053ca:	3301      	adds	r3, #1
 80053cc:	429a      	cmp	r2, r3
 80053ce:	d1fa      	bne.n	80053c6 <memmove+0x1a>
 80053d0:	e7f8      	b.n	80053c4 <memmove+0x18>
	...

080053d4 <_free_r>:
 80053d4:	b570      	push	{r4, r5, r6, lr}
 80053d6:	0005      	movs	r5, r0
 80053d8:	2900      	cmp	r1, #0
 80053da:	d010      	beq.n	80053fe <_free_r+0x2a>
 80053dc:	1f0c      	subs	r4, r1, #4
 80053de:	6823      	ldr	r3, [r4, #0]
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	da00      	bge.n	80053e6 <_free_r+0x12>
 80053e4:	18e4      	adds	r4, r4, r3
 80053e6:	0028      	movs	r0, r5
 80053e8:	f000 f918 	bl	800561c <__malloc_lock>
 80053ec:	4a1d      	ldr	r2, [pc, #116]	; (8005464 <_free_r+0x90>)
 80053ee:	6813      	ldr	r3, [r2, #0]
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d105      	bne.n	8005400 <_free_r+0x2c>
 80053f4:	6063      	str	r3, [r4, #4]
 80053f6:	6014      	str	r4, [r2, #0]
 80053f8:	0028      	movs	r0, r5
 80053fa:	f000 f917 	bl	800562c <__malloc_unlock>
 80053fe:	bd70      	pop	{r4, r5, r6, pc}
 8005400:	42a3      	cmp	r3, r4
 8005402:	d908      	bls.n	8005416 <_free_r+0x42>
 8005404:	6821      	ldr	r1, [r4, #0]
 8005406:	1860      	adds	r0, r4, r1
 8005408:	4283      	cmp	r3, r0
 800540a:	d1f3      	bne.n	80053f4 <_free_r+0x20>
 800540c:	6818      	ldr	r0, [r3, #0]
 800540e:	685b      	ldr	r3, [r3, #4]
 8005410:	1841      	adds	r1, r0, r1
 8005412:	6021      	str	r1, [r4, #0]
 8005414:	e7ee      	b.n	80053f4 <_free_r+0x20>
 8005416:	001a      	movs	r2, r3
 8005418:	685b      	ldr	r3, [r3, #4]
 800541a:	2b00      	cmp	r3, #0
 800541c:	d001      	beq.n	8005422 <_free_r+0x4e>
 800541e:	42a3      	cmp	r3, r4
 8005420:	d9f9      	bls.n	8005416 <_free_r+0x42>
 8005422:	6811      	ldr	r1, [r2, #0]
 8005424:	1850      	adds	r0, r2, r1
 8005426:	42a0      	cmp	r0, r4
 8005428:	d10b      	bne.n	8005442 <_free_r+0x6e>
 800542a:	6820      	ldr	r0, [r4, #0]
 800542c:	1809      	adds	r1, r1, r0
 800542e:	1850      	adds	r0, r2, r1
 8005430:	6011      	str	r1, [r2, #0]
 8005432:	4283      	cmp	r3, r0
 8005434:	d1e0      	bne.n	80053f8 <_free_r+0x24>
 8005436:	6818      	ldr	r0, [r3, #0]
 8005438:	685b      	ldr	r3, [r3, #4]
 800543a:	1841      	adds	r1, r0, r1
 800543c:	6011      	str	r1, [r2, #0]
 800543e:	6053      	str	r3, [r2, #4]
 8005440:	e7da      	b.n	80053f8 <_free_r+0x24>
 8005442:	42a0      	cmp	r0, r4
 8005444:	d902      	bls.n	800544c <_free_r+0x78>
 8005446:	230c      	movs	r3, #12
 8005448:	602b      	str	r3, [r5, #0]
 800544a:	e7d5      	b.n	80053f8 <_free_r+0x24>
 800544c:	6821      	ldr	r1, [r4, #0]
 800544e:	1860      	adds	r0, r4, r1
 8005450:	4283      	cmp	r3, r0
 8005452:	d103      	bne.n	800545c <_free_r+0x88>
 8005454:	6818      	ldr	r0, [r3, #0]
 8005456:	685b      	ldr	r3, [r3, #4]
 8005458:	1841      	adds	r1, r0, r1
 800545a:	6021      	str	r1, [r4, #0]
 800545c:	6063      	str	r3, [r4, #4]
 800545e:	6054      	str	r4, [r2, #4]
 8005460:	e7ca      	b.n	80053f8 <_free_r+0x24>
 8005462:	46c0      	nop			; (mov r8, r8)
 8005464:	200001e8 	.word	0x200001e8

08005468 <sbrk_aligned>:
 8005468:	b570      	push	{r4, r5, r6, lr}
 800546a:	4e0f      	ldr	r6, [pc, #60]	; (80054a8 <sbrk_aligned+0x40>)
 800546c:	000d      	movs	r5, r1
 800546e:	6831      	ldr	r1, [r6, #0]
 8005470:	0004      	movs	r4, r0
 8005472:	2900      	cmp	r1, #0
 8005474:	d102      	bne.n	800547c <sbrk_aligned+0x14>
 8005476:	f000 f8bf 	bl	80055f8 <_sbrk_r>
 800547a:	6030      	str	r0, [r6, #0]
 800547c:	0029      	movs	r1, r5
 800547e:	0020      	movs	r0, r4
 8005480:	f000 f8ba 	bl	80055f8 <_sbrk_r>
 8005484:	1c43      	adds	r3, r0, #1
 8005486:	d00a      	beq.n	800549e <sbrk_aligned+0x36>
 8005488:	2303      	movs	r3, #3
 800548a:	1cc5      	adds	r5, r0, #3
 800548c:	439d      	bics	r5, r3
 800548e:	42a8      	cmp	r0, r5
 8005490:	d007      	beq.n	80054a2 <sbrk_aligned+0x3a>
 8005492:	1a29      	subs	r1, r5, r0
 8005494:	0020      	movs	r0, r4
 8005496:	f000 f8af 	bl	80055f8 <_sbrk_r>
 800549a:	1c43      	adds	r3, r0, #1
 800549c:	d101      	bne.n	80054a2 <sbrk_aligned+0x3a>
 800549e:	2501      	movs	r5, #1
 80054a0:	426d      	negs	r5, r5
 80054a2:	0028      	movs	r0, r5
 80054a4:	bd70      	pop	{r4, r5, r6, pc}
 80054a6:	46c0      	nop			; (mov r8, r8)
 80054a8:	200001ec 	.word	0x200001ec

080054ac <_malloc_r>:
 80054ac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80054ae:	2203      	movs	r2, #3
 80054b0:	1ccb      	adds	r3, r1, #3
 80054b2:	4393      	bics	r3, r2
 80054b4:	3308      	adds	r3, #8
 80054b6:	0006      	movs	r6, r0
 80054b8:	001f      	movs	r7, r3
 80054ba:	2b0c      	cmp	r3, #12
 80054bc:	d232      	bcs.n	8005524 <_malloc_r+0x78>
 80054be:	270c      	movs	r7, #12
 80054c0:	42b9      	cmp	r1, r7
 80054c2:	d831      	bhi.n	8005528 <_malloc_r+0x7c>
 80054c4:	0030      	movs	r0, r6
 80054c6:	f000 f8a9 	bl	800561c <__malloc_lock>
 80054ca:	4d32      	ldr	r5, [pc, #200]	; (8005594 <_malloc_r+0xe8>)
 80054cc:	682b      	ldr	r3, [r5, #0]
 80054ce:	001c      	movs	r4, r3
 80054d0:	2c00      	cmp	r4, #0
 80054d2:	d12e      	bne.n	8005532 <_malloc_r+0x86>
 80054d4:	0039      	movs	r1, r7
 80054d6:	0030      	movs	r0, r6
 80054d8:	f7ff ffc6 	bl	8005468 <sbrk_aligned>
 80054dc:	0004      	movs	r4, r0
 80054de:	1c43      	adds	r3, r0, #1
 80054e0:	d11e      	bne.n	8005520 <_malloc_r+0x74>
 80054e2:	682c      	ldr	r4, [r5, #0]
 80054e4:	0025      	movs	r5, r4
 80054e6:	2d00      	cmp	r5, #0
 80054e8:	d14a      	bne.n	8005580 <_malloc_r+0xd4>
 80054ea:	6823      	ldr	r3, [r4, #0]
 80054ec:	0029      	movs	r1, r5
 80054ee:	18e3      	adds	r3, r4, r3
 80054f0:	0030      	movs	r0, r6
 80054f2:	9301      	str	r3, [sp, #4]
 80054f4:	f000 f880 	bl	80055f8 <_sbrk_r>
 80054f8:	9b01      	ldr	r3, [sp, #4]
 80054fa:	4283      	cmp	r3, r0
 80054fc:	d143      	bne.n	8005586 <_malloc_r+0xda>
 80054fe:	6823      	ldr	r3, [r4, #0]
 8005500:	3703      	adds	r7, #3
 8005502:	1aff      	subs	r7, r7, r3
 8005504:	2303      	movs	r3, #3
 8005506:	439f      	bics	r7, r3
 8005508:	3708      	adds	r7, #8
 800550a:	2f0c      	cmp	r7, #12
 800550c:	d200      	bcs.n	8005510 <_malloc_r+0x64>
 800550e:	270c      	movs	r7, #12
 8005510:	0039      	movs	r1, r7
 8005512:	0030      	movs	r0, r6
 8005514:	f7ff ffa8 	bl	8005468 <sbrk_aligned>
 8005518:	1c43      	adds	r3, r0, #1
 800551a:	d034      	beq.n	8005586 <_malloc_r+0xda>
 800551c:	6823      	ldr	r3, [r4, #0]
 800551e:	19df      	adds	r7, r3, r7
 8005520:	6027      	str	r7, [r4, #0]
 8005522:	e013      	b.n	800554c <_malloc_r+0xa0>
 8005524:	2b00      	cmp	r3, #0
 8005526:	dacb      	bge.n	80054c0 <_malloc_r+0x14>
 8005528:	230c      	movs	r3, #12
 800552a:	2500      	movs	r5, #0
 800552c:	6033      	str	r3, [r6, #0]
 800552e:	0028      	movs	r0, r5
 8005530:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005532:	6822      	ldr	r2, [r4, #0]
 8005534:	1bd1      	subs	r1, r2, r7
 8005536:	d420      	bmi.n	800557a <_malloc_r+0xce>
 8005538:	290b      	cmp	r1, #11
 800553a:	d917      	bls.n	800556c <_malloc_r+0xc0>
 800553c:	19e2      	adds	r2, r4, r7
 800553e:	6027      	str	r7, [r4, #0]
 8005540:	42a3      	cmp	r3, r4
 8005542:	d111      	bne.n	8005568 <_malloc_r+0xbc>
 8005544:	602a      	str	r2, [r5, #0]
 8005546:	6863      	ldr	r3, [r4, #4]
 8005548:	6011      	str	r1, [r2, #0]
 800554a:	6053      	str	r3, [r2, #4]
 800554c:	0030      	movs	r0, r6
 800554e:	0025      	movs	r5, r4
 8005550:	f000 f86c 	bl	800562c <__malloc_unlock>
 8005554:	2207      	movs	r2, #7
 8005556:	350b      	adds	r5, #11
 8005558:	1d23      	adds	r3, r4, #4
 800555a:	4395      	bics	r5, r2
 800555c:	1aea      	subs	r2, r5, r3
 800555e:	429d      	cmp	r5, r3
 8005560:	d0e5      	beq.n	800552e <_malloc_r+0x82>
 8005562:	1b5b      	subs	r3, r3, r5
 8005564:	50a3      	str	r3, [r4, r2]
 8005566:	e7e2      	b.n	800552e <_malloc_r+0x82>
 8005568:	605a      	str	r2, [r3, #4]
 800556a:	e7ec      	b.n	8005546 <_malloc_r+0x9a>
 800556c:	6862      	ldr	r2, [r4, #4]
 800556e:	42a3      	cmp	r3, r4
 8005570:	d101      	bne.n	8005576 <_malloc_r+0xca>
 8005572:	602a      	str	r2, [r5, #0]
 8005574:	e7ea      	b.n	800554c <_malloc_r+0xa0>
 8005576:	605a      	str	r2, [r3, #4]
 8005578:	e7e8      	b.n	800554c <_malloc_r+0xa0>
 800557a:	0023      	movs	r3, r4
 800557c:	6864      	ldr	r4, [r4, #4]
 800557e:	e7a7      	b.n	80054d0 <_malloc_r+0x24>
 8005580:	002c      	movs	r4, r5
 8005582:	686d      	ldr	r5, [r5, #4]
 8005584:	e7af      	b.n	80054e6 <_malloc_r+0x3a>
 8005586:	230c      	movs	r3, #12
 8005588:	0030      	movs	r0, r6
 800558a:	6033      	str	r3, [r6, #0]
 800558c:	f000 f84e 	bl	800562c <__malloc_unlock>
 8005590:	e7cd      	b.n	800552e <_malloc_r+0x82>
 8005592:	46c0      	nop			; (mov r8, r8)
 8005594:	200001e8 	.word	0x200001e8

08005598 <_realloc_r>:
 8005598:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800559a:	0007      	movs	r7, r0
 800559c:	000e      	movs	r6, r1
 800559e:	0014      	movs	r4, r2
 80055a0:	2900      	cmp	r1, #0
 80055a2:	d105      	bne.n	80055b0 <_realloc_r+0x18>
 80055a4:	0011      	movs	r1, r2
 80055a6:	f7ff ff81 	bl	80054ac <_malloc_r>
 80055aa:	0005      	movs	r5, r0
 80055ac:	0028      	movs	r0, r5
 80055ae:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80055b0:	2a00      	cmp	r2, #0
 80055b2:	d103      	bne.n	80055bc <_realloc_r+0x24>
 80055b4:	f7ff ff0e 	bl	80053d4 <_free_r>
 80055b8:	0025      	movs	r5, r4
 80055ba:	e7f7      	b.n	80055ac <_realloc_r+0x14>
 80055bc:	f000 f83e 	bl	800563c <_malloc_usable_size_r>
 80055c0:	9001      	str	r0, [sp, #4]
 80055c2:	4284      	cmp	r4, r0
 80055c4:	d803      	bhi.n	80055ce <_realloc_r+0x36>
 80055c6:	0035      	movs	r5, r6
 80055c8:	0843      	lsrs	r3, r0, #1
 80055ca:	42a3      	cmp	r3, r4
 80055cc:	d3ee      	bcc.n	80055ac <_realloc_r+0x14>
 80055ce:	0021      	movs	r1, r4
 80055d0:	0038      	movs	r0, r7
 80055d2:	f7ff ff6b 	bl	80054ac <_malloc_r>
 80055d6:	1e05      	subs	r5, r0, #0
 80055d8:	d0e8      	beq.n	80055ac <_realloc_r+0x14>
 80055da:	9b01      	ldr	r3, [sp, #4]
 80055dc:	0022      	movs	r2, r4
 80055de:	429c      	cmp	r4, r3
 80055e0:	d900      	bls.n	80055e4 <_realloc_r+0x4c>
 80055e2:	001a      	movs	r2, r3
 80055e4:	0031      	movs	r1, r6
 80055e6:	0028      	movs	r0, r5
 80055e8:	f7ff fed7 	bl	800539a <memcpy>
 80055ec:	0031      	movs	r1, r6
 80055ee:	0038      	movs	r0, r7
 80055f0:	f7ff fef0 	bl	80053d4 <_free_r>
 80055f4:	e7da      	b.n	80055ac <_realloc_r+0x14>
	...

080055f8 <_sbrk_r>:
 80055f8:	2300      	movs	r3, #0
 80055fa:	b570      	push	{r4, r5, r6, lr}
 80055fc:	4d06      	ldr	r5, [pc, #24]	; (8005618 <_sbrk_r+0x20>)
 80055fe:	0004      	movs	r4, r0
 8005600:	0008      	movs	r0, r1
 8005602:	602b      	str	r3, [r5, #0]
 8005604:	f7fc fb38 	bl	8001c78 <_sbrk>
 8005608:	1c43      	adds	r3, r0, #1
 800560a:	d103      	bne.n	8005614 <_sbrk_r+0x1c>
 800560c:	682b      	ldr	r3, [r5, #0]
 800560e:	2b00      	cmp	r3, #0
 8005610:	d000      	beq.n	8005614 <_sbrk_r+0x1c>
 8005612:	6023      	str	r3, [r4, #0]
 8005614:	bd70      	pop	{r4, r5, r6, pc}
 8005616:	46c0      	nop			; (mov r8, r8)
 8005618:	200001f0 	.word	0x200001f0

0800561c <__malloc_lock>:
 800561c:	b510      	push	{r4, lr}
 800561e:	4802      	ldr	r0, [pc, #8]	; (8005628 <__malloc_lock+0xc>)
 8005620:	f000 f814 	bl	800564c <__retarget_lock_acquire_recursive>
 8005624:	bd10      	pop	{r4, pc}
 8005626:	46c0      	nop			; (mov r8, r8)
 8005628:	200001f4 	.word	0x200001f4

0800562c <__malloc_unlock>:
 800562c:	b510      	push	{r4, lr}
 800562e:	4802      	ldr	r0, [pc, #8]	; (8005638 <__malloc_unlock+0xc>)
 8005630:	f000 f80d 	bl	800564e <__retarget_lock_release_recursive>
 8005634:	bd10      	pop	{r4, pc}
 8005636:	46c0      	nop			; (mov r8, r8)
 8005638:	200001f4 	.word	0x200001f4

0800563c <_malloc_usable_size_r>:
 800563c:	1f0b      	subs	r3, r1, #4
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	1f18      	subs	r0, r3, #4
 8005642:	2b00      	cmp	r3, #0
 8005644:	da01      	bge.n	800564a <_malloc_usable_size_r+0xe>
 8005646:	580b      	ldr	r3, [r1, r0]
 8005648:	18c0      	adds	r0, r0, r3
 800564a:	4770      	bx	lr

0800564c <__retarget_lock_acquire_recursive>:
 800564c:	4770      	bx	lr

0800564e <__retarget_lock_release_recursive>:
 800564e:	4770      	bx	lr

08005650 <_init>:
 8005650:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005652:	46c0      	nop			; (mov r8, r8)
 8005654:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005656:	bc08      	pop	{r3}
 8005658:	469e      	mov	lr, r3
 800565a:	4770      	bx	lr

0800565c <_fini>:
 800565c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800565e:	46c0      	nop			; (mov r8, r8)
 8005660:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005662:	bc08      	pop	{r3}
 8005664:	469e      	mov	lr, r3
 8005666:	4770      	bx	lr
